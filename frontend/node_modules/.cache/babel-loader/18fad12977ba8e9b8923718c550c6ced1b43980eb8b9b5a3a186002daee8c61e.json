{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { toast } from \"react-toastify\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\nimport { useSelector } from \"react-redux\";\nimport axios from 'axios';\n\n// const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//     stripe = loadStripe(stripeKey);\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OrderScreen = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    id: orderId\n  } = useParams();\n  const elements = useElements();\n  const {\n    data: order,\n    refetch,\n    isLoading,\n    error\n  } = useGetOrderDetailsQuery(orderId);\n  const [payOrder, {\n    isLoading: loadingPay\n  }] = usePayOrderMutation();\n\n  // const stripeInside = useStripe();\n\n  const {\n    data: stripeKey,\n    isLoading: loadingStripeKey,\n    error: errorStripeKey\n  } = useGetStripeKeyQuery();\n  const [stripe, setStripe] = useState(null);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  useEffect(() => {\n    if (order && !order.isPaid) {\n      dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n      .then(result => {\n        setClientSecret(result.payload.clientSecret);\n      }).catch(err => {\n        toast.error(\"Failed to create payment intent\");\n      });\n    }\n  }, [order, dispatch]);\n  useEffect(() => {\n    let mounted = true;\n    const initializeStripe = async () => {\n      let stripeInstance;\n      if (stripeKey && typeof stripeKey === 'string') {\n        stripeInstance = await loadStripe(stripeKey);\n      } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n        stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n      } else {\n        console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n        throw new Error(\"Stripe key is missing!\");\n      }\n      if (mounted) {\n        setStripe(stripeInstance);\n      }\n      console.log(\"Stripe Key coming from API:\", stripeKey);\n      console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n    };\n    initializeStripe();\n  }, [stripeKey]);\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n  const handlePayment = async () => {\n    if (!stripe || !elements) {\n      toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n      return;\n    }\n    if (!stripe || !elements) {\n      console.log(\"Stripe or elements not ready\");\n      return;\n    }\n    const card = elements.getElement(CardElement);\n    if (!card) {\n      console.log(\"CardElement not ready or not found\");\n      return;\n    }\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: card,\n        billing_details: {\n          name: order.user.name,\n          email: order.user.email\n        }\n      }\n    });\n    if (result.error) {\n      // Inform the customer that there was an error.\n      toast.error(result.error.message);\n    } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n      const paymentData = {\n        id: result.token.id,\n        status: 'completed',\n        update_time: new Date().toISOString(),\n        // You can customize this\n        payer: {\n          email_address: userInfo.email\n        }\n      };\n      await payOrder({\n        orderId,\n        details: paymentData\n      });\n      refetch();\n      // Send the token to your server (this is where you would call your API to charge the card).\n      // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n      // payOrder(result.token);\n    }\n  };\n\n  // Render logic to improve readability.\n  if (isLoading || loadingStripeKey) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 47\n  }, this);\n  if (error || errorStripeKey) return /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\",\n    children: error || errorStripeKey\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 12\n  }, this);\n  return isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 17\n  }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 40\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Order \", order._id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Delivery\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 29\n              }, this), \" \", order.user.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 29\n              }, this), \" \", order.user.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Address:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 29\n              }, this), \" \", order.deliveryAddress.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 25\n            }, this), order.isDelivered ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Delivered on \", order.deliveredAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Delivered \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Payment Method\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Method:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 29\n              }, this), order.paymentMethod]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 25\n            }, this), order.isPaid ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Paid on \", order.paidAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Paid \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Order Items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n              variant: \"flush\",\n              children: order.orderItems.map((item, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: 1,\n                    children: /*#__PURE__*/_jsxDEV(Image, {\n                      src: item.image,\n                      alt: item.name,\n                      fluid: true,\n                      rounded: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 185,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/product/${item.product}`,\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 193,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: [item.qty, \" x $\", item.price, \" = $\", item.qty * item.price]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 37\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\",\n            children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Order Summary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Items\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.itemsPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Delivery\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.deliveryPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Tax\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.taxPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 38\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.totalPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 25\n            }, this), !order.isPaid && stripe && !loadingStripeKey ? /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: \"20px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: handlePayment,\n                  style: {\n                    marginTop: \"10px\"\n                  },\n                  children: loadingPay ? \"Processing...\" : \"Pay Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 37\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(OrderScreen, \"gRcXarrWz5XsTzw0VCs2cPzE0SM=\", false, function () {\n  return [useDispatch, useParams, useElements, useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery, useSelector];\n});\n_c = OrderScreen;\nexport default OrderScreen;\n\n// import { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery, useCreatePaymentIntentMutation } from \"../slices/ordersApiSlice\";\n\n// const OrderScreen = () => {\n//     const dispatch = useDispatch();\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const elements = useElements();\n//     const { userInfo } = useSelector((state) => state.auth);\n\n//     const { data: order, refetch, isLoading, error } = useGetOrderDetailsQuery(orderId);\n//     const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\n//     const [createPaymentIntent] = useCreatePaymentIntentMutation();\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n\n//     const [clientSecret, setClientSecret] = useState(\"\");\n//     const [disabled, setDisabled] = useState(true);\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [processing, setProcessing] = useState(false);\n\n//     useEffect(() => {\n//         if (order && !order.isPaid) {\n//             dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n//                 .then(result => {\n//                     setClientSecret(result.payload.clientSecret);\n//                 })\n//                 .catch(err => {\n//                     toast.error(\"Failed to create payment intent\");\n//                 });\n//         }\n//     }, [order, dispatch]);\n\n//     useEffect(() => {\n//         if (stripeKey && typeof stripeKey === 'string') {\n//             loadStripe(stripeKey);\n//         } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//             loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         } else {\n//             console.error(\"Stripe key is missing!\");\n//         }\n//     }, [stripeKey]);\n\n//     const handleChange = async (event) => {\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message);\n//         }\n//     };\n\n//     const handlePayment = async (ev) => {\n//         ev.preventDefault();\n//         setProcessing(true);\n\n//         const card = elements.getElement(CardElement);\n\n//         if (!stripe || !elements || !card) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             toast.error(result.error.message);\n//             setProcessing(false);\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n//             setSucceeded(true);\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(),\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//         }\n//     };\n\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//       return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && (\n//             <form onSubmit={handlePayment}>\n//                 <CardElement onChange={handleChange} />\n//                 <button type=\"submit\" disabled={processing || disabled || succeeded}>\n//                     {processing ? \"Processing...\" : \"Pay Now\"}\n//                 </button>\n//             </form>\n//         )}\n\n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"names":["useEffect","useState","useDispatch","Link","useParams","Row","Col","ListGroup","Image","Form","Button","Card","loadStripe","CardElement","useStripe","useElements","toast","Message","Loader","useGetOrderDetailsQuery","usePayOrderMutation","useGetStripeKeyQuery","useSelector","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","OrderScreen","_s","dispatch","id","orderId","elements","data","order","refetch","isLoading","error","payOrder","loadingPay","stripeKey","loadingStripeKey","errorStripeKey","stripe","setStripe","clientSecret","setClientSecret","isPaid","createPaymentIntent","totalPrice","then","result","payload","catch","err","mounted","initializeStripe","stripeInstance","process","env","REACT_APP_STRIPE_PUBLIC_KEY","console","Error","log","userInfo","state","auth","handlePayment","card","getElement","confirmCardPayment","payment_method","billing_details","name","user","email","message","paymentIntent","status","paymentData","token","update_time","Date","toISOString","payer","email_address","details","fileName","_jsxFileName","lineNumber","columnNumber","variant","children","_id","md","Item","deliveryAddress","address","isDelivered","deliveredAt","paymentMethod","paidAt","orderItems","map","item","index","src","image","alt","fluid","rounded","to","product","qty","price","itemsPrice","deliveryPrice","taxPrice","style","marginBottom","onClick","marginTop","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { toast } from \"react-toastify\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\nimport { useSelector } from \"react-redux\";\nimport axios from 'axios'\n\n// const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//     stripe = loadStripe(stripeKey);\n// }\n\nconst OrderScreen = () => {\n    const dispatch = useDispatch();\n    const { id: orderId } = useParams();\n    const elements = useElements()\n\n    const { data: order, refetch, isLoading, error } = \n    useGetOrderDetailsQuery(orderId);\n\n    const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n    // const stripeInside = useStripe();\n\n\n    const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n    \n    const [stripe, setStripe] = useState(null);\n    const [clientSecret, setClientSecret] = useState(\"\");\n\n    useEffect(() => {\n        if (order && !order.isPaid) {\n            dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n            .then(result => {\n                setClientSecret(result.payload.clientSecret);\n            })\n            .catch(err => {\n                toast.error(\"Failed to create payment intent\");\n            });\n        }\n    }, [order, dispatch]);\n\n    useEffect(() => {\n        let mounted = true;\n\n        const initializeStripe = async () => {\n            let stripeInstance;\n        \n            if (stripeKey && typeof stripeKey === 'string') {\n                stripeInstance = await loadStripe(stripeKey);\n            } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n                stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n            } else {\n                console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n                throw new Error(\"Stripe key is missing!\");\n            }\n        \n            if (mounted) {\n                setStripe(stripeInstance);\n            }\n        \n            console.log(\"Stripe Key coming from API:\", stripeKey);\n            console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n        };\n        \n    \n        initializeStripe();\n    }, [stripeKey]);\n\n\n    const { userInfo } = useSelector((state) => (state.auth))\n\n\n    const handlePayment = async () => {\n        if (!stripe || !elements) {\n            toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n            return;\n        }\n        \n        if (!stripe || !elements) {\n            console.log(\"Stripe or elements not ready\");\n            return;\n        }\n\n        const card = elements.getElement(CardElement);\n        if (!card) {\n            console.log(\"CardElement not ready or not found\");\n            return;\n        }\n\n\n        const result = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: card,\n                billing_details: {\n                    name: order.user.name,\n                    email: order.user.email,\n                }\n            }\n        });\n\n        if (result.error) {\n            // Inform the customer that there was an error.\n            toast.error(result.error.message);\n\n        } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n            const paymentData = {\n                id: result.token.id,\n                status: 'completed',\n                update_time: new Date().toISOString(), // You can customize this\n                payer: {\n                    email_address: userInfo.email\n                }\n            };\n            await payOrder({ orderId, details: paymentData });\n            refetch();\n            // Send the token to your server (this is where you would call your API to charge the card).\n            // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n            // payOrder(result.token);\n        }\n\n\n    }\n\n    // Render logic to improve readability.\n    if (isLoading || loadingStripeKey) return <Loader />;\n    if (error || errorStripeKey) \n    return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n  return (\n    isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n    : (\n        <>\n        <h1>Order {order._id}</h1>\n        <Row>\n            <Col md={8}>\n                <ListGroup>\n                    <ListGroup.Item>\n                        <h2>Delivery</h2>\n                        <p>\n                            <strong>Name:</strong> {order.user.name}\n                        </p>\n                        <p>\n                            <strong>Email:</strong> {order.user.email}\n                        </p>\n                        <p>\n                            <strong>Address:</strong> {order.deliveryAddress.address}\n                        </p>\n\n                        {order.isDelivered ? (\n                            <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                        ) : (\n                            <Message variant=\"danger\">Not Delivered </Message>\n                        )}\n\n                    </ListGroup.Item>\n\n                   <ListGroup.Item>\n                        <h2>Payment Method</h2>\n                        <p>\n                            <strong>Method:</strong>\n                            {order.paymentMethod}\n                        </p>\n                        {order.isPaid ? (\n                            <Message variant=\"success\">Paid on {order.paidAt}</Message>\n                        ) : (\n                            <Message variant=\"danger\">Not Paid </Message>\n                        )}\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <h2>Order Items</h2>\n                        <ListGroup variant='flush'>\n                            {order.orderItems.map((item, index) => (\n                                <ListGroup.Item key={index}>\n                                    <Row>\n                                    <Col md={1}>\n                                        <Image\n                                        src={item.image}\n                                        alt={item.name}\n                                        fluid\n                                        rounded\n                                        />\n                                    </Col>\n                                    <Col>\n                                        <Link to={`/product/${item.product}`}>\n                                        {item.name}\n                                        </Link>\n                                    </Col>\n                                    <Col md={4}>\n                                        {item.qty} x ${item.price} = ${item.qty * item.price}\n                                    </Col>\n                                    </Row>\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n            \n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <h2>Order Summary</h2>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Items</Col>\n                                <Col>SEK{order.itemsPrice}</Col>\n                            </Row>\n\n                            <Row>\n                                <Col>Delivery</Col>\n                                <Col>SEK{order.deliveryPrice}</Col>\n                            </Row>\n\n                            <Row>\n                                <Col>Tax</Col>\n                                <Col>SEK{order.taxPrice}</Col>\n                            </Row>\n\n                            <Row>\n                                <Col><strong>Total</strong></Col>\n                                <Col>SEK{order.totalPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        {/* PAY ORDER PLACEHOLDER */}\n                        {!order.isPaid && stripe && !loadingStripeKey ? (\n                                    <ListGroup.Item>\n                                        {/* <Elements stripe={stripe}> */}\n                                            <div style={{ marginBottom: \"20px\" }}>\n                                                <CardElement />\n                                                <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n                                                    {loadingPay ? \"Processing...\":\"Pay Now\"}\n                                                </Button>\n                                            </div>\n                                        {/* </Elements> */}\n                                    </ListGroup.Item>\n                                ) : null} \n                        \n                        \n                        {/* MARK AS DELIVERED PLACEHOLDER */ }\n                    </ListGroup>\n                </Card>\n            </Col>\n        </Row>\n        </>\n    )\n  );\n}\n\nexport default OrderScreen;\n\n\n\n\n\n\n\n// import { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery, useCreatePaymentIntentMutation } from \"../slices/ordersApiSlice\";\n\n// const OrderScreen = () => {\n//     const dispatch = useDispatch();\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const elements = useElements();\n//     const { userInfo } = useSelector((state) => state.auth);\n    \n//     const { data: order, refetch, isLoading, error } = useGetOrderDetailsQuery(orderId);\n//     const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\n//     const [createPaymentIntent] = useCreatePaymentIntentMutation();\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n\n//     const [clientSecret, setClientSecret] = useState(\"\");\n//     const [disabled, setDisabled] = useState(true);\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [processing, setProcessing] = useState(false);\n\n//     useEffect(() => {\n//         if (order && !order.isPaid) {\n//             dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n//                 .then(result => {\n//                     setClientSecret(result.payload.clientSecret);\n//                 })\n//                 .catch(err => {\n//                     toast.error(\"Failed to create payment intent\");\n//                 });\n//         }\n//     }, [order, dispatch]);\n\n//     useEffect(() => {\n//         if (stripeKey && typeof stripeKey === 'string') {\n//             loadStripe(stripeKey);\n//         } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//             loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         } else {\n//             console.error(\"Stripe key is missing!\");\n//         }\n//     }, [stripeKey]);\n\n//     const handleChange = async (event) => {\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message);\n//         }\n//     };\n\n//     const handlePayment = async (ev) => {\n//         ev.preventDefault();\n//         setProcessing(true);\n\n//         const card = elements.getElement(CardElement);\n\n//         if (!stripe || !elements || !card) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             toast.error(result.error.message);\n//             setProcessing(false);\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n//             setSucceeded(true);\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(),\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//         }\n//     };\n\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n\n//       return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n            \n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && (\n//             <form onSubmit={handlePayment}>\n//                 <CardElement onChange={handleChange} />\n//                 <button type=\"submit\" disabled={processing || disabled || succeeded}>\n//                     {processing ? \"Processing...\" : \"Pay Now\"}\n//                 </button>\n//             </form>\n//         )}\n                        \n                        \n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;"],"mappings":"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CA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA+F,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}