{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\n// import { Link, useParams, useNavigate } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Form, Button, Card}\n// from 'react-bootstrap';\n// import {\n//     CardElement,\n//     useStripe,\n//     useElements\n//   } from \"@stripe/react-stripe-js\";\n// import { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader'\n// import { \n//     useGetOrderDetailsQuery, \n//     usePayOrderMutation, \n//     useCreatePaymentIntentMutation } from '../slices/ordersApiSlice';\n// import {toast} from 'react-toastify'\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams()\n//     const stripe = useStripe();\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [disabled, setDisabled] = useState(false)\n//     const [processing, setProcessing] = useState('');\n//     const [succeeded, setSucceeded] = useState(false);\n//     const elements = useElements();\n\n//     const { \n//         data: order,  \n//         isLoading, error } = useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, {isLoading:loadingPay}] = usePayOrderMutation()\n\n//     // const { data: stripeInfo, isLoading: loadingStripe, error: errorStripe } = \n//     // useCreatePaymentIntentMutation({ amount: order.totalPrice})\n\n//     const [createPaymentIntent, \n//         { data: stripeInfo, isLoading: loadingStripe, error: errorStripe }] \n//         = useCreatePaymentIntentMutation();\n\n//     const { userInfo } = useSelector((state) => state.auth)\n\n//     useEffect(() => {\n//         console.log(\"Checking if order exists and clientSecret is missing:\", order, clientSecret);\n//         if (order && !order.isPaid && !clientSecret) {\n//             createPaymentIntent({ amount: order.totalPrice * 100 });\n//         }\n//     }, [order, clientSecret]);\n\n//     useEffect(() => {\n//         console.log(\"stripeInfo:\", stripeInfo);\n//         if (stripeInfo && stripeInfo.clientSecret) {\n//             setClientSecret(stripeInfo.clientSecret);\n//         }\n//         console.log(\"ClientSecret inside useEffect:\", clientSecret);\n//     }, [stripeInfo]);\n\n//     const handleChange = async (event) => {\n//         // Listen for changes in the CardElement\n//         // and display any errors as the customer types their card details\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message)\n//         }\n//       };\n\n//       const handlePayment = async ev => {\n//         ev.preventDefault();\n//         console.log(\"ClientSecret inside useEffect:\", clientSecret);\n//         setProcessing(true);\n\n//         if (!clientSecret) {\n//             toast.error(\"Client secret is not available.\");\n//             return;\n//         }\n\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//           payment_method: {\n//             card: elements.getElement(CardElement)\n//           }\n//         });\n\n//         if (payload.error) {\n//           toast.error(`Payment failed ${payload.error.message}`);\n//           setProcessing(false);\n//         } else {\n//           setProcessing(false);\n//           setSucceeded(true);\n//         }\n//       };\n\n//     return (\n//         isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//         : (\n//             <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n\n//                         </ListGroup.Item>\n\n//                        <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                         <Col md={1}>\n//                                             <Image\n//                                             src={item.image}\n//                                             alt={item.name}\n//                                             fluid\n//                                             rounded\n//                                             />\n//                                         </Col>\n//                                         <Col>\n//                                             <Link to={`/product/${item.product}`}>\n//                                             {item.name}\n//                                             </Link>\n//                                         </Col>\n//                                         <Col md={4}>\n//                                             {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                         </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n\n//                 </ListGroup.Item>\n//               </ListGroup>\n//             </Col>\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n\n//                             {/* PAY ORDER PLACEHOLDER */}\n//                             {!order.isPaid && stripe && !loadingStripe ? (\n//                                         <ListGroup.Item>\n\n//                                                 <div style={{ marginBottom: \"20px\" }}>\n//                                                     <CardElement onChange={handleChange}/>\n//                                                     <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                                         {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                     </Button>\n//                                                 </div>\n\n//                                         </ListGroup.Item>\n//                                     ) : null}\n\n//                             {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//             </>\n//         )\n//       );\n//     }\n\n//     export default OrderScreen;\n\n// import { Link, useParams } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { useGetOrderDetailsQuery, usePayOrderMutation,  } from '../slices/ordersApiSlice';\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const [order, setOrder] = useState(null);\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [loading, setLoading] = useState(true);  // Fixed variable name\n//     const [error, setError] = useState(null);\n//     const [processing, setProcessing] = useState('');\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [disabled, setDisabled] = useState(false);  // Newly defined state variable\n//     const [loadingPay, setLoadingPay] = useState(false);  // Newly defined state variable for payment loading state\n//     const elements = useElements();\n//     const { userInfo } = useSelector((state) => state.auth);\n\n//     useEffect(() => {\n//         const fetchOrderDetails = async () => {\n//             try {\n//                 const { data } = await axios.get(`/api/orders/${orderId}`);\n//                 setOrder(data);\n//                 setLoading(false);\n//             } catch (err) {\n//                 setError(err.message);\n//                 setLoading(false);\n//             }\n//         };\n//         fetchOrderDetails();\n//     }, [orderId]);\n\n//     useEffect(() => {\n//         const createPaymentIntent = async () => {\n//             try {\n//                 const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n//                 setClientSecret(data.clientSecret);\n//             } catch (err) {\n//                 console.error(\"Error fetching client secret:\", err.message);\n//             }\n//         };\n//         if (order && !order.isPaid) {\n//             createPaymentIntent();\n//         }\n//     }, [order]);\n\n//     const handleChange = async (event) => {\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message);\n//         }\n//     };\n\n//     const handlePayment = async ev => {\n//         ev.preventDefault();\n//         setLoadingPay(true);  // Start loading state for payment\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement)\n//             }\n//         });\n//         if (payload.error) {\n//             toast.error(`Payment failed ${payload.error.message}`);\n//             setLoadingPay(false);\n//         } else {\n//             setLoadingPay(false);\n//             setSucceeded(true);\n//             toast.success('Payment successful')\n//         }\n//     };\n\n//     return (\n//         loading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//         : (\n//             <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n//                         </ListGroup.Item>\n//                         <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                         <Col md={1}>\n//                                             <Image\n//                                             src={item.image}\n//                                             alt={item.name}\n//                                             fluid\n//                                             rounded\n//                                             />\n//                                         </Col>\n//                                         <Col>\n//                                             <Link to={`/product/${item.product}`}>\n//                                             {item.name}\n//                                             </Link>\n//                                         </Col>\n//                                         <Col md={4}>\n//                                             {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                         </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n//                         </ListGroup.Item>\n//                     </ListGroup>\n//                 </Col>\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             {!order.isPaid && stripe && !loading ? (\n//                                     <ListGroup.Item>\n//                                         <div style={{ marginBottom: \"20px\" }}>\n//                                             <CardElement onChange={handleChange}/>\n//                                             <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                                 {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                             </Button>\n//                                         </div>\n//                                     </ListGroup.Item>\n//                                 ) : null}\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//             </>\n//         )\n//     );\n// };\n\n// export default OrderScreen;\n\nimport { Link, useParams } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OrderScreen = () => {\n  _s();\n  const {\n    id: orderId\n  } = useParams();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [clientSecret, setClientSecret] = useState('');\n  const [processing, setProcessing] = useState(false);\n  const [succeeded, setSucceeded] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const {\n    data: order,\n    isError,\n    isLoading\n  } = useGetOrderDetailsQuery(orderId);\n  const [payOrder] = usePayOrderMutation();\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n  useEffect(() => {\n    const createPaymentIntent = async () => {\n      try {\n        const {\n          data\n        } = await axios.post('/api/config/stripe', {\n          amount: order.totalPrice * 100\n        });\n        setClientSecret(data.clientSecret);\n      } catch (err) {\n        console.error(\"Error fetching client secret:\", err.message);\n      }\n    };\n    if (order && !order.isPaid) {\n      createPaymentIntent();\n    }\n  }, [order]);\n  const handleChange = async event => {\n    setDisabled(event.empty);\n    if (event.error) {\n      toast.error(event.error.message);\n    }\n  };\n  const handlePayment = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (payload.error) {\n      toast.error(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      const paymentResult = {\n        id: payload.paymentIntent.id,\n        status: payload.paymentIntent.status,\n        update_time: new Date().toISOString(),\n        email_address: payload.paymentIntent.receipt_email\n      };\n      await payOrder({\n        id: orderId,\n        paymentResult\n      });\n      const updatedOrder = {\n        ...order,\n        isPaid: true,\n        paidAt: new Date().toISOString()\n      };\n      setOrder(updatedOrder);\n      toast.success('Payment successful');\n      setProcessing(false);\n    }\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 498,\n    columnNumber: 27\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\",\n    children: isError.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 499,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Order \", order._id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Delivery\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 33\n              }, this), \" \", order.user.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 33\n              }, this), \" \", order.user.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Address:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 33\n              }, this), \" \", order.deliveryAddress.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 29\n            }, this), order.isDelivered ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Delivered on \", order.deliveredAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Delivered \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Payment Method\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Method:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 528,\n                columnNumber: 33\n              }, this), order.paymentMethod]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 29\n            }, this), order.isPaid ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Paid on \", order.paidAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Paid \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Order Items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n              variant: \"flush\",\n              children: order.orderItems.map((item, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: 1,\n                    children: /*#__PURE__*/_jsxDEV(Image, {\n                      src: item.image,\n                      alt: item.name,\n                      fluid: true,\n                      rounded: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 545,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 544,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/product/${item.product}`,\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 548,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 547,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: [item.qty, \" x $\", item.price, \" = $\", item.qty * item.price]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 552,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 543,\n                  columnNumber: 41\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\",\n            children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Order Summary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Items\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 571,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.itemsPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Delivery\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 575,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.deliveryPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 576,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Tax\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 579,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.taxPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 580,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 583,\n                    columnNumber: 42\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 583,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.totalPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 584,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 582,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 29\n            }, this), !order.isPaid && stripe ? /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: \"20px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(CardElement, {\n                  onChange: handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 590,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: handlePayment,\n                  disabled: processing || disabled || succeeded,\n                  style: {\n                    marginTop: \"10px\"\n                  },\n                  children: processing ? \"Processing...\" : \"Pay Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 33\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(OrderScreen, \"arhDz+csCsSGw/d9HWDZLJI8vZ4=\", false, function () {\n  return [useParams, useStripe, useElements, useGetOrderDetailsQuery, usePayOrderMutation, useSelector];\n});\n_c = OrderScreen;\nexport default OrderScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"names":["Link","useParams","Row","Col","ListGroup","Image","Button","Card","CardElement","useStripe","useElements","useState","useEffect","useSelector","Message","Loader","axios","toast","useGetOrderDetailsQuery","usePayOrderMutation","jsxDEV","_jsxDEV","Fragment","_Fragment","OrderScreen","_s","id","orderId","stripe","elements","clientSecret","setClientSecret","processing","setProcessing","succeeded","setSucceeded","disabled","setDisabled","data","order","isError","isLoading","payOrder","userInfo","state","auth","createPaymentIntent","post","amount","totalPrice","err","console","error","message","isPaid","handleChange","event","empty","handlePayment","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","paymentResult","paymentIntent","status","update_time","Date","toISOString","email_address","receipt_email","updatedOrder","paidAt","setOrder","success","fileName","_jsxFileName","lineNumber","columnNumber","variant","children","_id","md","Item","user","name","email","deliveryAddress","address","isDelivered","deliveredAt","paymentMethod","orderItems","map","item","index","src","image","alt","fluid","rounded","to","product","qty","price","itemsPrice","deliveryPrice","taxPrice","style","marginBottom","onChange","onClick","marginTop","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["// import { Link, useParams, useNavigate } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Form, Button, Card}\n// from 'react-bootstrap';\n// import {\n//     CardElement,\n//     useStripe,\n//     useElements\n//   } from \"@stripe/react-stripe-js\";\n// import { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader'\n// import { \n//     useGetOrderDetailsQuery, \n//     usePayOrderMutation, \n//     useCreatePaymentIntentMutation } from '../slices/ordersApiSlice';\n// import {toast} from 'react-toastify'\n\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams()\n//     const stripe = useStripe();\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [disabled, setDisabled] = useState(false)\n//     const [processing, setProcessing] = useState('');\n//     const [succeeded, setSucceeded] = useState(false);\n//     const elements = useElements();\n\n//     const { \n//         data: order,  \n//         isLoading, error } = useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, {isLoading:loadingPay}] = usePayOrderMutation()\n\n//     // const { data: stripeInfo, isLoading: loadingStripe, error: errorStripe } = \n//     // useCreatePaymentIntentMutation({ amount: order.totalPrice})\n\n//     const [createPaymentIntent, \n//         { data: stripeInfo, isLoading: loadingStripe, error: errorStripe }] \n//         = useCreatePaymentIntentMutation();\n\n\n//     const { userInfo } = useSelector((state) => state.auth)\n\n//     useEffect(() => {\n//         console.log(\"Checking if order exists and clientSecret is missing:\", order, clientSecret);\n//         if (order && !order.isPaid && !clientSecret) {\n//             createPaymentIntent({ amount: order.totalPrice * 100 });\n//         }\n//     }, [order, clientSecret]);\n\n//     useEffect(() => {\n//         console.log(\"stripeInfo:\", stripeInfo);\n//         if (stripeInfo && stripeInfo.clientSecret) {\n//             setClientSecret(stripeInfo.clientSecret);\n//         }\n//         console.log(\"ClientSecret inside useEffect:\", clientSecret);\n//     }, [stripeInfo]);\n\n//     const handleChange = async (event) => {\n//         // Listen for changes in the CardElement\n//         // and display any errors as the customer types their card details\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message)\n//         }\n//       };\n    \n//       const handlePayment = async ev => {\n//         ev.preventDefault();\n//         console.log(\"ClientSecret inside useEffect:\", clientSecret);\n//         setProcessing(true);\n\n//         if (!clientSecret) {\n//             toast.error(\"Client secret is not available.\");\n//             return;\n//         }\n    \n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//           payment_method: {\n//             card: elements.getElement(CardElement)\n//           }\n//         });\n    \n//         if (payload.error) {\n//           toast.error(`Payment failed ${payload.error.message}`);\n//           setProcessing(false);\n//         } else {\n//           setProcessing(false);\n//           setSucceeded(true);\n//         }\n//       };\n\n\n//     return (\n//         isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//         : (\n//             <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n    \n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n    \n//                         </ListGroup.Item>\n    \n//                        <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n    \n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                         <Col md={1}>\n//                                             <Image\n//                                             src={item.image}\n//                                             alt={item.name}\n//                                             fluid\n//                                             rounded\n//                                             />\n//                                         </Col>\n//                                         <Col>\n//                                             <Link to={`/product/${item.product}`}>\n//                                             {item.name}\n//                                             </Link>\n//                                         </Col>\n//                                         <Col md={4}>\n//                                             {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                         </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n                \n//                 </ListGroup.Item>\n//               </ListGroup>\n//             </Col>\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n    \n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n    \n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n    \n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n    \n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n    \n//                             {/* PAY ORDER PLACEHOLDER */}\n//                             {!order.isPaid && stripe && !loadingStripe ? (\n//                                         <ListGroup.Item>\n                                            \n//                                                 <div style={{ marginBottom: \"20px\" }}>\n//                                                     <CardElement onChange={handleChange}/>\n//                                                     <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                                         {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                     </Button>\n//                                                 </div>\n                                        \n//                                         </ListGroup.Item>\n//                                     ) : null}\n                            \n                            \n//                             {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//             </>\n//         )\n//       );\n//     }\n    \n//     export default OrderScreen;\n\n\n\n\n\n// import { Link, useParams } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { useGetOrderDetailsQuery, usePayOrderMutation,  } from '../slices/ordersApiSlice';\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const [order, setOrder] = useState(null);\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [loading, setLoading] = useState(true);  // Fixed variable name\n//     const [error, setError] = useState(null);\n//     const [processing, setProcessing] = useState('');\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [disabled, setDisabled] = useState(false);  // Newly defined state variable\n//     const [loadingPay, setLoadingPay] = useState(false);  // Newly defined state variable for payment loading state\n//     const elements = useElements();\n//     const { userInfo } = useSelector((state) => state.auth);\n\n\n\n//     useEffect(() => {\n//         const fetchOrderDetails = async () => {\n//             try {\n//                 const { data } = await axios.get(`/api/orders/${orderId}`);\n//                 setOrder(data);\n//                 setLoading(false);\n//             } catch (err) {\n//                 setError(err.message);\n//                 setLoading(false);\n//             }\n//         };\n//         fetchOrderDetails();\n//     }, [orderId]);\n\n//     useEffect(() => {\n//         const createPaymentIntent = async () => {\n//             try {\n//                 const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n//                 setClientSecret(data.clientSecret);\n//             } catch (err) {\n//                 console.error(\"Error fetching client secret:\", err.message);\n//             }\n//         };\n//         if (order && !order.isPaid) {\n//             createPaymentIntent();\n//         }\n//     }, [order]);\n\n//     const handleChange = async (event) => {\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message);\n//         }\n//     };\n\n//     const handlePayment = async ev => {\n//         ev.preventDefault();\n//         setLoadingPay(true);  // Start loading state for payment\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement)\n//             }\n//         });\n//         if (payload.error) {\n//             toast.error(`Payment failed ${payload.error.message}`);\n//             setLoadingPay(false);\n//         } else {\n//             setLoadingPay(false);\n//             setSucceeded(true);\n//             toast.success('Payment successful')\n//         }\n//     };\n\n//     return (\n//         loading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//         : (\n//             <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n//                         </ListGroup.Item>\n//                         <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                         <Col md={1}>\n//                                             <Image\n//                                             src={item.image}\n//                                             alt={item.name}\n//                                             fluid\n//                                             rounded\n//                                             />\n//                                         </Col>\n//                                         <Col>\n//                                             <Link to={`/product/${item.product}`}>\n//                                             {item.name}\n//                                             </Link>\n//                                         </Col>\n//                                         <Col md={4}>\n//                                             {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                         </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n//                         </ListGroup.Item>\n//                     </ListGroup>\n//                 </Col>\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             {!order.isPaid && stripe && !loading ? (\n//                                     <ListGroup.Item>\n//                                         <div style={{ marginBottom: \"20px\" }}>\n//                                             <CardElement onChange={handleChange}/>\n//                                             <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                                 {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                             </Button>\n//                                         </div>\n//                                     </ListGroup.Item>\n//                                 ) : null}\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//             </>\n//         )\n//     );\n// };\n\n// export default OrderScreen;\n\n\n\n\n\n\nimport { Link, useParams } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\n\nconst OrderScreen = () => {\n    const { id: orderId } = useParams();\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const [clientSecret, setClientSecret] = useState('');\n    const [processing, setProcessing] = useState(false);\n    const [succeeded, setSucceeded] = useState(false);\n    const [disabled, setDisabled] = useState(false);\n\n    const { data: order, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n    const [payOrder] = usePayOrderMutation();\n\n    const { userInfo } = useSelector((state) => state.auth);\n\n    useEffect(() => {\n        const createPaymentIntent = async () => {\n            try {\n                const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n                setClientSecret(data.clientSecret);\n            } catch (err) {\n                console.error(\"Error fetching client secret:\", err.message);\n            }\n        };\n        if (order && !order.isPaid) {\n            createPaymentIntent();\n        }\n    }, [order]);\n\n    const handleChange = async (event) => {\n        setDisabled(event.empty);\n        if (event.error) {\n            toast.error(event.error.message);\n        }\n    };\n\n    const handlePayment = async ev => {\n        ev.preventDefault();\n        setProcessing(true);\n        const payload = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: elements.getElement(CardElement)\n            }\n        });\n        if (payload.error) {\n            toast.error(`Payment failed ${payload.error.message}`);\n            setProcessing(false);\n        } else {\n            const paymentResult = {\n              id: payload.paymentIntent.id,\n              status: payload.paymentIntent.status,\n              update_time: new Date().toISOString(),\n              email_address: payload.paymentIntent.receipt_email,\n            };\n\n\n            await payOrder({ id: orderId, paymentResult });\n            const updatedOrder = { ...order, isPaid: true, \n                paidAt: new Date().toISOString() }\n            setOrder(updatedOrder);\n            toast.success('Payment successful');\n            setProcessing(false);\n        }\n    };\n\n    if (isLoading) return <Loader />;\n    if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n    return (\n        <>\n            <h1>Order {order._id}</h1>\n            <Row>\n                <Col md={8}>\n                    <ListGroup>\n                        <ListGroup.Item>\n                            <h2>Delivery</h2>\n                            <p>\n                                <strong>Name:</strong> {order.user.name}\n                            </p>\n                            <p>\n                                <strong>Email:</strong> {order.user.email}\n                            </p>\n                            <p>\n                                <strong>Address:</strong> {order.deliveryAddress.address}\n                            </p>\n                            {order.isDelivered ? (\n                                <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Delivered </Message>\n                            )}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Payment Method</h2>\n                            <p>\n                                <strong>Method:</strong>\n                                {order.paymentMethod}\n                            </p>\n                            {order.isPaid ? (\n                                <Message variant=\"success\">Paid on {order.paidAt}</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Paid </Message>\n                            )}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            <ListGroup variant='flush'>\n                                {order.orderItems.map((item, index) => (\n                                    <ListGroup.Item key={index}>\n                                        <Row>\n                                            <Col md={1}>\n                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                            </Col>\n                                            <Col>\n                                                <Link to={`/product/${item.product}`}>\n                                                    {item.name}\n                                                </Link>\n                                            </Col>\n                                            <Col md={4}>\n                                                {item.qty} x ${item.price} = ${item.qty * item.price}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>SEK{order.itemsPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col>Delivery</Col>\n                                    <Col>SEK{order.deliveryPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>SEK{order.taxPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col><strong>Total</strong></Col>\n                                    <Col>SEK{order.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            {!order.isPaid && stripe ? (\n                                <ListGroup.Item>\n                                    <div style={{ marginBottom: \"20px\" }}>\n                                        <CardElement onChange={handleChange}/>\n                                        <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n                                            {processing ? \"Processing...\":\"Pay Now\"}\n                                        </Button>\n                                    </div>\n                                </ListGroup.Item>\n                            ) : null}\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default OrderScreen;\n\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,SAASA,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,SAASC,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC1E,SAASC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,yBAAyB;AAC7E,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,uBAAuB,EAAEC,mBAAmB,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExF,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,EAAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}