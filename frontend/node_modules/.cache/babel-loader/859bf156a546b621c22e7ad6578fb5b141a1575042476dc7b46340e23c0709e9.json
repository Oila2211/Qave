{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n\n//     const [stripe, setStripe] = useState(null);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n\n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n\n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n\n//             console.log(\"Stripe Key from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n\n//         initializeStripe();\n//     }, [stripeKey]);\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n\n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n//             // Get the clientSecret from the backend\n//         const amountInCents = order.totalPrice * 100;\n//         let clientSecret;\n//         try {\n//             const response = await axios.post('/api/config/stripe', { amount: amountInCents });\n//             clientSecret = response.data.clientSecret;\n//         } catch (err) {\n//             toast.error(\"Failed to create payment intent. Please try again\");\n//             console.error(\"Error:\", err);\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         <Elements stripe={stripe}>\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         </Elements>\n//                                     </ListGroup.Item>\n//                                 ) : null} \n\n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\nimport React, { useState, useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { useCreateOrderMutation, useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from '../slices/ordersApiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderScreen = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const dispatch = useDispatch();\n  const [orderId, setOrderId] = useState(null);\n  const {\n    data: order,\n    error,\n    isLoading\n  } = useGetOrderDetailsQuery(orderId);\n  const [createOrder, {\n    error: createOrderError\n  }] = useCreateOrderMutation();\n  useEffect(() => {\n    if (createOrderError) {\n      toast.error(`Order creation failed: ${createOrderError.message}`);\n    }\n  }, [createOrderError]);\n  const stripeKeyQuery = useGetStripeKeyQuery();\n  const stripeApiKey = stripeKeyQuery.data ? stripeKeyQuery.data.stripeAPIKey : null;\n  const onPaymentSuccess = paymentData => {\n    _s();\n    dispatch(usePayOrderMutation({\n      orderId,\n      details: paymentData\n    }));\n  };\n  _s(onPaymentSuccess, \"kocqS9+3X8kGj1AkNRlhqjdeo+E=\", false, function () {\n    return [usePayOrderMutation];\n  });\n  const onPaymentFailure = errorMessage => {\n    toast.error(`Payment failed! ${errorMessage}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: stripeApiKey && /*#__PURE__*/_jsxDEV(Elements, {\n      stripe: loadStripe(stripeApiKey),\n      children: /*#__PURE__*/_jsxDEV(PaymentForm, {\n        onPaymentSuccess: onPaymentSuccess,\n        onPaymentFailure: onPaymentFailure\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 9\n  }, this);\n};\n_s2(OrderScreen, \"8puMwmjvbb0U9XQCWmyNUMf47Hc=\", false, function () {\n  return [useDispatch, useGetOrderDetailsQuery, useCreateOrderMutation, useGetStripeKeyQuery];\n});\n_c = OrderScreen;\nconst PaymentForm = ({\n  onPaymentSuccess,\n  onPaymentFailure\n}) => {\n  _s3();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [createPaymentIntent] = useCreateOrderMutation(); // Assuming you have this setup in your slice\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      onPaymentFailure(\"Stripe hasn't loaded yet. Please try again.\");\n      return;\n    }\n    const card = elements.getElement(CardElement);\n    if (!card) {\n      onPaymentFailure(\"CardElement not ready or not found.\");\n      return;\n    }\n\n    // Fetch the clientSecret from your backend\n    let clientSecret;\n    try {\n      const paymentIntentResult = await createPaymentIntent({\n        amount: order.totalPrice * 100\n      }); // Ensure the amount is in cents\n      clientSecret = paymentIntentResult.data.clientSecret;\n    } catch (error) {\n      onPaymentFailure(\"Failed to create payment intent. Please try again.\");\n      return;\n    }\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: card,\n        billing_details: {\n          name: order.user.name,\n          email: order.user.email\n        }\n      }\n    });\n    if (result.error) {\n      onPaymentFailure(result.error.message);\n    } else {\n      const paymentData = {\n        id: result.paymentIntent.id,\n        status: result.paymentIntent.status,\n        update_time: new Date().toISOString(),\n        email_address: order.user.email\n      };\n      onPaymentSuccess(paymentData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      children: \"Pay Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 9\n  }, this);\n};\n_s3(PaymentForm, \"yyGmXvVEkds0DT8oEEnsM0UE9RM=\", false, function () {\n  return [useStripe, useElements, useCreateOrderMutation];\n});\n_c2 = PaymentForm;\nexport default OrderScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"OrderScreen\");\n$RefreshReg$(_c2, \"PaymentForm\");","map":{"version":3,"names":["React","useState","useEffect","loadStripe","CardElement","Elements","useStripe","useElements","useSelector","useDispatch","toast","useCreateOrderMutation","useGetOrderDetailsQuery","usePayOrderMutation","useGetStripeKeyQuery","jsxDEV","_jsxDEV","OrderScreen","_s2","_s","$RefreshSig$","dispatch","orderId","setOrderId","data","order","error","isLoading","createOrder","createOrderError","message","stripeKeyQuery","stripeApiKey","stripeAPIKey","onPaymentSuccess","paymentData","details","onPaymentFailure","errorMessage","children","stripe","PaymentForm","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s3","elements","createPaymentIntent","handleSubmit","event","preventDefault","card","getElement","clientSecret","paymentIntentResult","amount","totalPrice","result","confirmCardPayment","payment_method","billing_details","name","user","email","id","paymentIntent","status","update_time","Date","toISOString","email_address","onSubmit","type","disabled","_c2","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n    \n//     const [stripe, setStripe] = useState(null);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n        \n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n        \n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n        \n//             console.log(\"Stripe Key from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n        \n    \n//         initializeStripe();\n//     }, [stripeKey]);\n\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n        \n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n//             // Get the clientSecret from the backend\n//         const amountInCents = order.totalPrice * 100;\n//         let clientSecret;\n//         try {\n//             const response = await axios.post('/api/config/stripe', { amount: amountInCents });\n//             clientSecret = response.data.clientSecret;\n//         } catch (err) {\n//             toast.error(\"Failed to create payment intent. Please try again\");\n//             console.error(\"Error:\", err);\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n            \n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         <Elements stripe={stripe}>\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         </Elements>\n//                                     </ListGroup.Item>\n//                                 ) : null} \n                        \n                        \n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport {\n    useCreateOrderMutation, \n    useGetOrderDetailsQuery, \n    usePayOrderMutation, \n    useGetStripeKeyQuery \n} from '../slices/ordersApiSlice';\n\nconst OrderScreen = () => {\n    const dispatch = useDispatch();\n\n    const [orderId, setOrderId] = useState(null);\n    const { data: order, error, isLoading } = useGetOrderDetailsQuery(orderId);\n\n    const [createOrder, { error: createOrderError }] = useCreateOrderMutation();\n\n    useEffect(() => {\n        if (createOrderError) {\n            toast.error(`Order creation failed: ${createOrderError.message}`);\n        }\n    }, [createOrderError]);\n\n    const stripeKeyQuery = useGetStripeKeyQuery();\n    const stripeApiKey = stripeKeyQuery.data ? stripeKeyQuery.data.stripeAPIKey : null;\n\n    const onPaymentSuccess = (paymentData) => {\n        dispatch(usePayOrderMutation({ orderId, details: paymentData }));\n    };\n\n    const onPaymentFailure = (errorMessage) => {\n        toast.error(`Payment failed! ${errorMessage}`);\n    };\n\n    return (\n        <div>\n            {/* ... other components and details ... */}\n\n            {stripeApiKey && (\n                <Elements stripe={loadStripe(stripeApiKey)}>\n                    <PaymentForm \n                        onPaymentSuccess={onPaymentSuccess}\n                        onPaymentFailure={onPaymentFailure}\n                    />\n                </Elements>\n            )}\n        </div>\n    );\n};\n\nconst PaymentForm = ({ onPaymentSuccess, onPaymentFailure }) => {\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const [createPaymentIntent] = useCreateOrderMutation(); // Assuming you have this setup in your slice\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        if (!stripe || !elements) {\n            onPaymentFailure(\"Stripe hasn't loaded yet. Please try again.\");\n            return;\n        }\n\n        const card = elements.getElement(CardElement);\n        if (!card) {\n            onPaymentFailure(\"CardElement not ready or not found.\");\n            return;\n        }\n\n        // Fetch the clientSecret from your backend\n        let clientSecret;\n        try {\n            const paymentIntentResult = await createPaymentIntent({ amount: order.totalPrice * 100 }); // Ensure the amount is in cents\n            clientSecret = paymentIntentResult.data.clientSecret;\n        } catch (error) {\n            onPaymentFailure(\"Failed to create payment intent. Please try again.\");\n            return;\n        }\n\n        const result = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: card,\n                billing_details: {\n                    name: order.user.name,\n                    email: order.user.email,\n                }\n            }\n        });\n\n        if (result.error) {\n            onPaymentFailure(result.error.message);\n        } else {\n            const paymentData = {\n                id: result.paymentIntent.id,\n                status: result.paymentIntent.status,\n                update_time: new Date().toISOString(),\n                email_address: order.user.email\n            };\n            onPaymentSuccess(paymentData);\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <CardElement />\n            <button type=\"submit\" disabled={!stripe}>\n                Pay Now\n            </button>\n        </form>\n    );\n};\n\nexport default OrderScreen;\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}