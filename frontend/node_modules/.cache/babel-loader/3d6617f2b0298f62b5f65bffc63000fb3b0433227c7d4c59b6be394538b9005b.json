{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n\n//     const [stripe, setStripe] = useState(null);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n\n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n\n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n\n//             console.log(\"Stripe Key from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n\n//         initializeStripe();\n//     }, [stripeKey]);\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n\n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n//             // Get the clientSecret from the backend\n//         const amountInCents = order.totalPrice * 100;\n//         let clientSecret;\n//         try {\n//             const response = await axios.post('/api/config/stripe', { amount: amountInCents });\n//             clientSecret = response.data.clientSecret;\n//         } catch (err) {\n//             toast.error(\"Failed to create payment intent. Please try again\");\n//             console.error(\"Error:\", err);\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         <Elements stripe={stripe}>\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         </Elements>\n//                                     </ListGroup.Item>\n//                                 ) : null} \n\n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useCreateOrderMutation } from '../slices/ordersApiSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\nconst PlaceOrderScreen = () => {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const cart = useSelector(state => state.cart); // assuming you have cart details in your redux store\n  const {\n    cartItems,\n    deliveryAddress,\n    paymentMethod,\n    itemsPrice,\n    taxPrice,\n    deliveryPrice,\n    totalPrice\n  } = cart;\n  const [createOrder] = useCreateOrderMutation();\n  const stripe = useStripe();\n  const elements = useElements();\n  const placeOrderHandler = async () => {\n    if (!stripe || !elements) {\n      return;\n    }\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n    if (result.error) {\n      console.error(result.error.message);\n    } else {\n      try {\n        await createOrder({\n          orderItems: cartItems,\n          deliveryAddress,\n          paymentMethod,\n          itemsPrice,\n          taxPrice,\n          deliveryPrice,\n          totalPrice,\n          stripeToken: result.token.id\n        });\n        navigate.push('/order-success'); // navigate to a successful order screen or confirmation screen\n      } catch (error) {\n        console.error(\"Error placing the order:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Order Items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this), cartItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [item.name, \" - \", item.price]\n      }, item._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Items Price: $\", itemsPrice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Tax: $\", taxPrice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Delivery: $\", deliveryPrice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Total: $\", totalPrice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Payment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Elements, {\n        stripe: stripePromise,\n        children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: placeOrderHandler,\n          children: \"Pay Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 9\n  }, this);\n};\n_s(PlaceOrderScreen, \"/nnh0G3mzJqA+5JnM7FpfEbSciw=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useCreateOrderMutation, useStripe, useElements];\n});\n_c = PlaceOrderScreen;\nexport default PlaceOrderScreen;\nvar _c;\n$RefreshReg$(_c, \"PlaceOrderScreen\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","useCreateOrderMutation","useNavigate","Elements","CardElement","useStripe","useElements","loadStripe","jsxDEV","_jsxDEV","stripePromise","process","env","REACT_APP_STRIPE_PUBLIC_KEY","PlaceOrderScreen","_s","dispatch","navigate","cart","state","cartItems","deliveryAddress","paymentMethod","itemsPrice","taxPrice","deliveryPrice","totalPrice","createOrder","stripe","elements","placeOrderHandler","card","getElement","result","createToken","error","console","message","orderItems","stripeToken","token","id","push","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","name","price","_id","onClick","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n    \n//     const [stripe, setStripe] = useState(null);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n        \n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n        \n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n        \n//             console.log(\"Stripe Key from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n        \n    \n//         initializeStripe();\n//     }, [stripeKey]);\n\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n        \n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n//             // Get the clientSecret from the backend\n//         const amountInCents = order.totalPrice * 100;\n//         let clientSecret;\n//         try {\n//             const response = await axios.post('/api/config/stripe', { amount: amountInCents });\n//             clientSecret = response.data.clientSecret;\n//         } catch (err) {\n//             toast.error(\"Failed to create payment intent. Please try again\");\n//             console.error(\"Error:\", err);\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n            \n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         <Elements stripe={stripe}>\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         </Elements>\n//                                     </ListGroup.Item>\n//                                 ) : null} \n                        \n                        \n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useCreateOrderMutation } from '../slices/ordersApiSlice'; \nimport { useNavigate } from 'react-router-dom';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n\nconst PlaceOrderScreen = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    \n    const cart = useSelector(state => state.cart);  // assuming you have cart details in your redux store\n    const { cartItems, deliveryAddress, paymentMethod, itemsPrice, taxPrice, deliveryPrice, totalPrice } = cart;\n    \n    const [createOrder] = useCreateOrderMutation();\n\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const placeOrderHandler = async () => {\n        if (!stripe || !elements) {\n            return;\n        }\n        const card = elements.getElement(CardElement);\n        const result = await stripe.createToken(card);\n        if (result.error) {\n            console.error(result.error.message);\n        } else {\n            try {\n                await createOrder({\n                    orderItems: cartItems,\n                    deliveryAddress,\n                    paymentMethod,\n                    itemsPrice,\n                    taxPrice,\n                    deliveryPrice,\n                    totalPrice,\n                    stripeToken: result.token.id\n                });\n                navigate.push('/order-success');  // navigate to a successful order screen or confirmation screen\n            } catch (error) {\n                console.error(\"Error placing the order:\", error);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h1>Place Order</h1>\n            <div>\n                <h2>Order Items</h2>\n                {cartItems.map(item => (\n                    <div key={item._id}>\n                        {item.name} - {item.price}\n                    </div>\n                ))}\n            </div>\n            <div>\n                <h2>Summary</h2>\n                <p>Items Price: ${itemsPrice}</p>\n                <p>Tax: ${taxPrice}</p>\n                <p>Delivery: ${deliveryPrice}</p>\n                <p><strong>Total: ${totalPrice}</strong></p>\n            </div>\n            <div>\n                <h2>Payment</h2>\n                <Elements stripe={stripePromise}>\n                    <CardElement />\n                    <button onClick={placeOrderHandler}>Pay Now</button>\n                </Elements>\n            </div>\n        </div>\n    );\n}\n\nexport default PlaceOrderScreen;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}