{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\n// import { Link, useParams, useNavigate } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Form, Button, Card}\n// from 'react-bootstrap';\n// import {\n//     CardElement,\n//     useStripe,\n//     useElements\n//   } from \"@stripe/react-stripe-js\";\n// import { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader'\n// import { \n//     useGetOrderDetailsQuery, \n//     usePayOrderMutation, \n//     useCreatePaymentIntentMutation } from '../slices/ordersApiSlice';\n// import {toast} from 'react-toastify'\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams()\n//     const stripe = useStripe();\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [disabled, setDisabled] = useState(false)\n//     const [processing, setProcessing] = useState('');\n//     const [succeeded, setSucceeded] = useState(false);\n//     const elements = useElements();\n\n//     const { \n//         data: order,  \n//         isLoading, error } = useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, {isLoading:loadingPay}] = usePayOrderMutation()\n\n//     // const { data: stripeInfo, isLoading: loadingStripe, error: errorStripe } = \n//     // useCreatePaymentIntentMutation({ amount: order.totalPrice})\n\n//     const [createPaymentIntent, \n//         { data: stripeInfo, isLoading: loadingStripe, error: errorStripe }] \n//         = useCreatePaymentIntentMutation();\n\n//     const { userInfo } = useSelector((state) => state.auth)\n\n//     useEffect(() => {\n//         console.log(\"Checking if order exists and clientSecret is missing:\", order, clientSecret);\n//         if (order && !order.isPaid && !clientSecret) {\n//             createPaymentIntent({ amount: order.totalPrice * 100 });\n//         }\n//     }, [order, clientSecret]);\n\n//     useEffect(() => {\n//         console.log(\"stripeInfo:\", stripeInfo);\n//         if (stripeInfo && stripeInfo.clientSecret) {\n//             setClientSecret(stripeInfo.clientSecret);\n//         }\n//         console.log(\"ClientSecret inside useEffect:\", clientSecret);\n//     }, [stripeInfo]);\n\n//     const handleChange = async (event) => {\n//         // Listen for changes in the CardElement\n//         // and display any errors as the customer types their card details\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message)\n//         }\n//       };\n\n//       const handlePayment = async ev => {\n//         ev.preventDefault();\n//         console.log(\"ClientSecret inside useEffect:\", clientSecret);\n//         setProcessing(true);\n\n//         if (!clientSecret) {\n//             toast.error(\"Client secret is not available.\");\n//             return;\n//         }\n\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//           payment_method: {\n//             card: elements.getElement(CardElement)\n//           }\n//         });\n\n//         if (payload.error) {\n//           toast.error(`Payment failed ${payload.error.message}`);\n//           setProcessing(false);\n//         } else {\n//           setProcessing(false);\n//           setSucceeded(true);\n//         }\n//       };\n\n//     return (\n//         isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//         : (\n//             <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n\n//                         </ListGroup.Item>\n\n//                        <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                         <Col md={1}>\n//                                             <Image\n//                                             src={item.image}\n//                                             alt={item.name}\n//                                             fluid\n//                                             rounded\n//                                             />\n//                                         </Col>\n//                                         <Col>\n//                                             <Link to={`/product/${item.product}`}>\n//                                             {item.name}\n//                                             </Link>\n//                                         </Col>\n//                                         <Col md={4}>\n//                                             {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                         </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n\n//                 </ListGroup.Item>\n//               </ListGroup>\n//             </Col>\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n\n//                             {/* PAY ORDER PLACEHOLDER */}\n//                             {!order.isPaid && stripe && !loadingStripe ? (\n//                                         <ListGroup.Item>\n\n//                                                 <div style={{ marginBottom: \"20px\" }}>\n//                                                     <CardElement onChange={handleChange}/>\n//                                                     <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                                         {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                     </Button>\n//                                                 </div>\n\n//                                         </ListGroup.Item>\n//                                     ) : null}\n\n//                             {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//             </>\n//         )\n//       );\n//     }\n\n//     export default OrderScreen;\n\nimport { Link, useParams } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OrderScreen = () => {\n  _s();\n  const {\n    id: orderId\n  } = useParams();\n  const stripe = useStripe();\n  const [order, setOrder] = useState(null);\n  const [clientSecret, setClientSecret] = useState('');\n  const [loading, setLoading] = useState(true); // Fixed variable name\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [succeeded, setSucceeded] = useState(false);\n  const [disabled, setDisabled] = useState(false); // Newly defined state variable\n  const [loadingPay, setLoadingPay] = useState(false); // Newly defined state variable for payment loading state\n  const elements = useElements();\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n  useEffect(() => {\n    const fetchOrderDetails = async () => {\n      try {\n        const {\n          data\n        } = await axios.get(`/api/orders/${orderId}`);\n        setOrder(data);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchOrderDetails();\n  }, [orderId]);\n  useEffect(() => {\n    const createPaymentIntent = async () => {\n      try {\n        const {\n          data\n        } = await axios.post('/api/config/stripe', {\n          amount: order.totalPrice * 100\n        });\n        setClientSecret(data.clientSecret);\n      } catch (err) {\n        console.error(\"Error fetching client secret:\", err.message);\n      }\n    };\n    if (order && !order.isPaid) {\n      createPaymentIntent();\n    }\n  }, [order]);\n  const handleChange = async event => {\n    setDisabled(event.empty);\n    if (event.error) {\n      toast.error(event.error.message);\n    }\n  };\n  const handlePayment = async ev => {\n    ev.preventDefault();\n    setLoadingPay(true); // Start loading state for payment\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (payload.error) {\n      toast.error(`Payment failed ${payload.error.message}`);\n      setLoadingPay(false);\n    } else {\n      setLoadingPay(false);\n      setSucceeded(true);\n    }\n  };\n  return loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 19\n  }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 42\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Order \", order._id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Delivery\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 33\n              }, this), \" \", order.user.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 33\n              }, this), \" \", order.user.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Address:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 33\n              }, this), \" \", order.deliveryAddress.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 29\n            }, this), order.isDelivered ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Delivered on \", order.deliveredAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Delivered \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Payment Method\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Method:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 33\n              }, this), order.paymentMethod]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 29\n            }, this), order.isPaid ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Paid on \", order.paidAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Paid \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Order Items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n              variant: \"flush\",\n              children: order.orderItems.map((item, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: 1,\n                    children: /*#__PURE__*/_jsxDEV(Image, {\n                      src: item.image,\n                      alt: item.name,\n                      fluid: true,\n                      rounded: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 345,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 344,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/product/${item.product}`,\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 353,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 352,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: [item.qty, \" x $\", item.price, \" = $\", item.qty * item.price]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 343,\n                  columnNumber: 41\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\",\n            children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Order Summary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Items\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.itemsPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Delivery\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.deliveryPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Tax\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.taxPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 387,\n                    columnNumber: 42\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.totalPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 29\n            }, this), !order.isPaid && stripe && !loading ? /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: \"20px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(CardElement, {\n                  onChange: handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: handlePayment,\n                  disabled: processing || disabled || succeeded,\n                  style: {\n                    marginTop: \"10px\"\n                  },\n                  children: loadingPay ? \"Processing...\" : \"Pay Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 37\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(OrderScreen, \"mDO+JZCz1gUdii5J6amUX2PuW8I=\", false, function () {\n  return [useParams, useStripe, useElements, useSelector];\n});\n_c = OrderScreen;\nexport default OrderScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"names":["Link","useParams","Row","Col","ListGroup","Image","Button","Card","CardElement","useStripe","useElements","useEffect","useState","useDispatch","useSelector","Message","Loader","axios","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","OrderScreen","_s","id","orderId","stripe","order","setOrder","clientSecret","setClientSecret","loading","setLoading","error","setError","processing","setProcessing","succeeded","setSucceeded","disabled","setDisabled","loadingPay","setLoadingPay","elements","userInfo","state","auth","fetchOrderDetails","data","get","err","message","createPaymentIntent","post","amount","totalPrice","console","isPaid","handleChange","event","empty","handlePayment","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","fileName","_jsxFileName","lineNumber","columnNumber","variant","children","_id","md","Item","user","name","email","deliveryAddress","address","isDelivered","deliveredAt","paymentMethod","paidAt","orderItems","map","item","index","src","image","alt","fluid","rounded","to","product","qty","price","itemsPrice","deliveryPrice","taxPrice","style","marginBottom","onChange","onClick","marginTop","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["// import { Link, useParams, useNavigate } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Form, Button, Card}\n// from 'react-bootstrap';\n// import {\n//     CardElement,\n//     useStripe,\n//     useElements\n//   } from \"@stripe/react-stripe-js\";\n// import { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader'\n// import { \n//     useGetOrderDetailsQuery, \n//     usePayOrderMutation, \n//     useCreatePaymentIntentMutation } from '../slices/ordersApiSlice';\n// import {toast} from 'react-toastify'\n\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams()\n//     const stripe = useStripe();\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [disabled, setDisabled] = useState(false)\n//     const [processing, setProcessing] = useState('');\n//     const [succeeded, setSucceeded] = useState(false);\n//     const elements = useElements();\n\n//     const { \n//         data: order,  \n//         isLoading, error } = useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, {isLoading:loadingPay}] = usePayOrderMutation()\n\n//     // const { data: stripeInfo, isLoading: loadingStripe, error: errorStripe } = \n//     // useCreatePaymentIntentMutation({ amount: order.totalPrice})\n\n//     const [createPaymentIntent, \n//         { data: stripeInfo, isLoading: loadingStripe, error: errorStripe }] \n//         = useCreatePaymentIntentMutation();\n\n\n//     const { userInfo } = useSelector((state) => state.auth)\n\n//     useEffect(() => {\n//         console.log(\"Checking if order exists and clientSecret is missing:\", order, clientSecret);\n//         if (order && !order.isPaid && !clientSecret) {\n//             createPaymentIntent({ amount: order.totalPrice * 100 });\n//         }\n//     }, [order, clientSecret]);\n\n//     useEffect(() => {\n//         console.log(\"stripeInfo:\", stripeInfo);\n//         if (stripeInfo && stripeInfo.clientSecret) {\n//             setClientSecret(stripeInfo.clientSecret);\n//         }\n//         console.log(\"ClientSecret inside useEffect:\", clientSecret);\n//     }, [stripeInfo]);\n\n//     const handleChange = async (event) => {\n//         // Listen for changes in the CardElement\n//         // and display any errors as the customer types their card details\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message)\n//         }\n//       };\n    \n//       const handlePayment = async ev => {\n//         ev.preventDefault();\n//         console.log(\"ClientSecret inside useEffect:\", clientSecret);\n//         setProcessing(true);\n\n//         if (!clientSecret) {\n//             toast.error(\"Client secret is not available.\");\n//             return;\n//         }\n    \n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//           payment_method: {\n//             card: elements.getElement(CardElement)\n//           }\n//         });\n    \n//         if (payload.error) {\n//           toast.error(`Payment failed ${payload.error.message}`);\n//           setProcessing(false);\n//         } else {\n//           setProcessing(false);\n//           setSucceeded(true);\n//         }\n//       };\n\n\n//     return (\n//         isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//         : (\n//             <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n    \n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n    \n//                         </ListGroup.Item>\n    \n//                        <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n    \n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                         <Col md={1}>\n//                                             <Image\n//                                             src={item.image}\n//                                             alt={item.name}\n//                                             fluid\n//                                             rounded\n//                                             />\n//                                         </Col>\n//                                         <Col>\n//                                             <Link to={`/product/${item.product}`}>\n//                                             {item.name}\n//                                             </Link>\n//                                         </Col>\n//                                         <Col md={4}>\n//                                             {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                         </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n                \n//                 </ListGroup.Item>\n//               </ListGroup>\n//             </Col>\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n    \n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n    \n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n    \n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n    \n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n    \n//                             {/* PAY ORDER PLACEHOLDER */}\n//                             {!order.isPaid && stripe && !loadingStripe ? (\n//                                         <ListGroup.Item>\n                                            \n//                                                 <div style={{ marginBottom: \"20px\" }}>\n//                                                     <CardElement onChange={handleChange}/>\n//                                                     <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                                         {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                     </Button>\n//                                                 </div>\n                                        \n//                                         </ListGroup.Item>\n//                                     ) : null}\n                            \n                            \n//                             {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//             </>\n//         )\n//       );\n//     }\n    \n//     export default OrderScreen;\n\n\n\n\nimport { Link, useParams } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst OrderScreen = () => {\n    const { id: orderId } = useParams();\n    const stripe = useStripe();\n    const [order, setOrder] = useState(null);\n    const [clientSecret, setClientSecret] = useState('');\n    const [loading, setLoading] = useState(true);  // Fixed variable name\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState('');\n    const [succeeded, setSucceeded] = useState(false);\n    const [disabled, setDisabled] = useState(false);  // Newly defined state variable\n    const [loadingPay, setLoadingPay] = useState(false);  // Newly defined state variable for payment loading state\n    const elements = useElements();\n    const { userInfo } = useSelector((state) => state.auth);\n\n    useEffect(() => {\n        const fetchOrderDetails = async () => {\n            try {\n                const { data } = await axios.get(`/api/orders/${orderId}`);\n                setOrder(data);\n                setLoading(false);\n            } catch (err) {\n                setError(err.message);\n                setLoading(false);\n            }\n        };\n        fetchOrderDetails();\n    }, [orderId]);\n\n    useEffect(() => {\n        const createPaymentIntent = async () => {\n            try {\n                const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n                setClientSecret(data.clientSecret);\n            } catch (err) {\n                console.error(\"Error fetching client secret:\", err.message);\n            }\n        };\n        if (order && !order.isPaid) {\n            createPaymentIntent();\n        }\n    }, [order]);\n\n    const handleChange = async (event) => {\n        setDisabled(event.empty);\n        if (event.error) {\n            toast.error(event.error.message);\n        }\n    };\n\n    const handlePayment = async ev => {\n        ev.preventDefault();\n        setLoadingPay(true);  // Start loading state for payment\n        const payload = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: elements.getElement(CardElement)\n            }\n        });\n        if (payload.error) {\n            toast.error(`Payment failed ${payload.error.message}`);\n            setLoadingPay(false);\n        } else {\n            setLoadingPay(false);\n            setSucceeded(true);\n        }\n    };\n\n    return (\n        loading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n        : (\n            <>\n            <h1>Order {order._id}</h1>\n            <Row>\n                <Col md={8}>\n                    <ListGroup>\n                        <ListGroup.Item>\n                            <h2>Delivery</h2>\n                            <p>\n                                <strong>Name:</strong> {order.user.name}\n                            </p>\n                            <p>\n                                <strong>Email:</strong> {order.user.email}\n                            </p>\n                            <p>\n                                <strong>Address:</strong> {order.deliveryAddress.address}\n                            </p>\n                            {order.isDelivered ? (\n                                <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Delivered </Message>\n                            )}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <h2>Payment Method</h2>\n                            <p>\n                                <strong>Method:</strong>\n                                {order.paymentMethod}\n                            </p>\n                            {order.isPaid ? (\n                                <Message variant=\"success\">Paid on {order.paidAt}</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Paid </Message>\n                            )}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            <ListGroup variant='flush'>\n                                {order.orderItems.map((item, index) => (\n                                    <ListGroup.Item key={index}>\n                                        <Row>\n                                        <Col md={1}>\n                                            <Image\n                                            src={item.image}\n                                            alt={item.name}\n                                            fluid\n                                            rounded\n                                            />\n                                        </Col>\n                                        <Col>\n                                            <Link to={`/product/${item.product}`}>\n                                            {item.name}\n                                            </Link>\n                                        </Col>\n                                        <Col md={4}>\n                                            {item.qty} x ${item.price} = ${item.qty * item.price}\n                                        </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>SEK{order.itemsPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col>Delivery</Col>\n                                    <Col>SEK{order.deliveryPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>SEK{order.taxPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col><strong>Total</strong></Col>\n                                    <Col>SEK{order.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            {!order.isPaid && stripe && !loading ? (\n                                    <ListGroup.Item>\n                                        <div style={{ marginBottom: \"20px\" }}>\n                                            <CardElement onChange={handleChange}/>\n                                            <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n                                                {loadingPay ? \"Processing...\":\"Pay Now\"}\n                                            </Button>\n                                        </div>\n                                    </ListGroup.Item>\n                                ) : null}\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n            </>\n        )\n    );\n};\n\nexport default OrderScreen;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,SAASA,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,SAASC,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC1E,SAASC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,yBAAyB;AAC7E,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}