{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n//     const dispatch = useDispatch();\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n\n//     const [stripe, setStripe] = useState(null);\n//     const [clientSecret, setClientSecret] = useState(\"\");\n\n//     useEffect(() => {\n//         if (order && !order.isPaid) {\n//             dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n//             .then(result => {\n//                 setClientSecret(result.payload.clientSecret);\n//             })\n//             .catch(err => {\n//                 toast.error(\"Failed to create payment intent\");\n//             });\n//         }\n//     }, [order, dispatch]);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n\n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n\n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n\n//             console.log(\"Stripe Key coming from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n\n//         initializeStripe();\n//     }, [stripeKey]);\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n\n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         {/* <Elements stripe={stripe}> */}\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         {/* </Elements> */}\n//                                     </ListGroup.Item>\n//                                 ) : null} \n\n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { toast } from \"react-toastify\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OrderScreen = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    id: orderId\n  } = useParams();\n  const stripe = useStripe();\n  const elements = useElements();\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n  const {\n    data: order,\n    refetch,\n    isLoading,\n    error\n  } = useGetOrderDetailsQuery(orderId);\n  const [payOrder, {\n    isLoading: loadingPay\n  }] = usePayOrderMutation();\n  const [createPaymentIntent] = useCreatePaymentIntentMutation();\n  const {\n    data: stripeKey,\n    isLoading: loadingStripeKey,\n    error: errorStripeKey\n  } = useGetStripeKeyQuery();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [succeeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  useEffect(() => {\n    if (order && !order.isPaid) {\n      dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n      .then(result => {\n        setClientSecret(result.payload.clientSecret);\n      }).catch(err => {\n        toast.error(\"Failed to create payment intent\");\n      });\n    }\n  }, [order, dispatch]);\n  useEffect(() => {\n    if (stripeKey && typeof stripeKey === 'string') {\n      loadStripe(stripeKey);\n    } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n      loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n    } else {\n      console.error(\"Stripe key is missing!\");\n    }\n  }, [stripeKey]);\n  const handleChange = async event => {\n    setDisabled(event.empty);\n    if (event.error) {\n      toast.error(event.error.message);\n    }\n  };\n  const handlePayment = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const card = elements.getElement(CardElement);\n    if (!stripe || !elements || !card) {\n      toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n      return;\n    }\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: card,\n        billing_details: {\n          name: order.user.name,\n          email: order.user.email\n        }\n      }\n    });\n    if (result.error) {\n      toast.error(result.error.message);\n      setProcessing(false);\n    } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n      setSucceeded(true);\n      const paymentData = {\n        id: result.token.id,\n        status: 'completed',\n        update_time: new Date().toISOString(),\n        payer: {\n          email_address: userInfo.email\n        }\n      };\n      await payOrder({\n        orderId,\n        details: paymentData\n      });\n      refetch();\n    }\n  };\n  if (isLoading || loadingStripeKey) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 366,\n    columnNumber: 47\n  }, this);\n  if (error || errorStripeKey) return /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\",\n    children: error || errorStripeKey\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 41\n  }, this);\n  return isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 17\n  }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 40\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Order \", order._id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Delivery\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 29\n              }, this), \" \", order.user.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 29\n              }, this), \" \", order.user.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Address:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 29\n              }, this), \" \", order.deliveryAddress.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 25\n            }, this), order.isDelivered ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Delivered on \", order.deliveredAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Delivered \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Payment Method\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Method:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 29\n              }, this), order.paymentMethod]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 25\n            }, this), order.isPaid ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Paid on \", order.paidAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Paid \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Order Items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n              variant: \"flush\",\n              children: order.orderItems.map((item, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: 1,\n                    children: /*#__PURE__*/_jsxDEV(Image, {\n                      src: item.image,\n                      alt: item.name,\n                      fluid: true,\n                      rounded: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 418,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 417,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/product/${item.product}`,\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 426,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 425,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: [item.qty, \" x $\", item.price, \" = $\", item.qty * item.price]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 430,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 37\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\",\n            children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Order Summary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Items\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.itemsPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Delivery\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.deliveryPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Tax\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 460,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.taxPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 461,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 465,\n                    columnNumber: 38\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 465,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.totalPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 466,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 464,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 25\n            }, this), !order.isPaid && /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handlePayment,\n              children: [/*#__PURE__*/_jsxDEV(CardElement, {\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                disabled: processing || disabled || succeeded,\n                children: processing ? \"Processing...\" : \"Pay Now\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(OrderScreen, \"Vqa5f2AXzphxuj4GwechC/bRapA=\", true, function () {\n  return [useDispatch, useParams, useStripe, useElements, useSelector, useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery];\n});\n_c = OrderScreen;\nexport default OrderScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","Link","useParams","Row","Col","ListGroup","Image","Card","loadStripe","CardElement","useStripe","useElements","toast","Message","Loader","useGetOrderDetailsQuery","usePayOrderMutation","useGetStripeKeyQuery","jsxDEV","_jsxDEV","Fragment","_Fragment","OrderScreen","_s","dispatch","id","orderId","stripe","elements","userInfo","state","auth","data","order","refetch","isLoading","error","payOrder","loadingPay","createPaymentIntent","useCreatePaymentIntentMutation","stripeKey","loadingStripeKey","errorStripeKey","clientSecret","setClientSecret","disabled","setDisabled","succeeded","setSucceeded","processing","setProcessing","isPaid","totalPrice","then","result","payload","catch","err","process","env","REACT_APP_STRIPE_PUBLIC_KEY","console","handleChange","event","empty","message","handlePayment","ev","preventDefault","card","getElement","confirmCardPayment","payment_method","billing_details","name","user","email","paymentIntent","status","paymentData","token","update_time","Date","toISOString","payer","email_address","details","fileName","_jsxFileName","lineNumber","columnNumber","variant","children","_id","md","Item","deliveryAddress","address","isDelivered","deliveredAt","paymentMethod","paidAt","orderItems","map","item","index","src","image","alt","fluid","rounded","to","product","qty","price","itemsPrice","deliveryPrice","taxPrice","onSubmit","onChange","type","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n//     const dispatch = useDispatch();\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n    \n//     const [stripe, setStripe] = useState(null);\n//     const [clientSecret, setClientSecret] = useState(\"\");\n\n//     useEffect(() => {\n//         if (order && !order.isPaid) {\n//             dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n//             .then(result => {\n//                 setClientSecret(result.payload.clientSecret);\n//             })\n//             .catch(err => {\n//                 toast.error(\"Failed to create payment intent\");\n//             });\n//         }\n//     }, [order, dispatch]);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n        \n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n        \n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n        \n//             console.log(\"Stripe Key coming from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n        \n    \n//         initializeStripe();\n//     }, [stripeKey]);\n\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n        \n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n            \n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         {/* <Elements stripe={stripe}> */}\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         {/* </Elements> */}\n//                                     </ListGroup.Item>\n//                                 ) : null} \n                        \n                        \n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\n\n\n\n\n\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { toast } from \"react-toastify\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n\nconst OrderScreen = () => {\n    const dispatch = useDispatch();\n    const { id: orderId } = useParams();\n    const stripe = useStripe();\n    const elements = useElements();\n    const { userInfo } = useSelector((state) => state.auth);\n    \n    const { data: order, refetch, isLoading, error } = useGetOrderDetailsQuery(orderId);\n    const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\n    const [createPaymentIntent] = useCreatePaymentIntentMutation();\n    const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n\n    const [clientSecret, setClientSecret] = useState(\"\");\n    const [disabled, setDisabled] = useState(true);\n    const [succeeded, setSucceeded] = useState(false);\n    const [processing, setProcessing] = useState(false);\n\n    useEffect(() => {\n        if (order && !order.isPaid) {\n            dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n                .then(result => {\n                    setClientSecret(result.payload.clientSecret);\n                })\n                .catch(err => {\n                    toast.error(\"Failed to create payment intent\");\n                });\n        }\n    }, [order, dispatch]);\n\n    useEffect(() => {\n        if (stripeKey && typeof stripeKey === 'string') {\n            loadStripe(stripeKey);\n        } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n            loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n        } else {\n            console.error(\"Stripe key is missing!\");\n        }\n    }, [stripeKey]);\n\n    const handleChange = async (event) => {\n        setDisabled(event.empty);\n        if (event.error) {\n            toast.error(event.error.message);\n        }\n    };\n\n    const handlePayment = async (ev) => {\n        ev.preventDefault();\n        setProcessing(true);\n\n        const card = elements.getElement(CardElement);\n\n        if (!stripe || !elements || !card) {\n            toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n            return;\n        }\n\n        const result = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: card,\n                billing_details: {\n                    name: order.user.name,\n                    email: order.user.email,\n                }\n            }\n        });\n\n        if (result.error) {\n            toast.error(result.error.message);\n            setProcessing(false);\n        } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n            setSucceeded(true);\n            const paymentData = {\n                id: result.token.id,\n                status: 'completed',\n                update_time: new Date().toISOString(),\n                payer: {\n                    email_address: userInfo.email\n                }\n            };\n            await payOrder({ orderId, details: paymentData });\n            refetch();\n        }\n    };\n\n    if (isLoading || loadingStripeKey) return <Loader />;\n    if (error || errorStripeKey) return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n\n      return (\n    isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n    : (\n        <>\n        <h1>Order {order._id}</h1>\n        <Row>\n            <Col md={8}>\n                <ListGroup>\n                    <ListGroup.Item>\n                        <h2>Delivery</h2>\n                        <p>\n                            <strong>Name:</strong> {order.user.name}\n                        </p>\n                        <p>\n                            <strong>Email:</strong> {order.user.email}\n                        </p>\n                        <p>\n                            <strong>Address:</strong> {order.deliveryAddress.address}\n                        </p>\n\n                        {order.isDelivered ? (\n                            <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                        ) : (\n                            <Message variant=\"danger\">Not Delivered </Message>\n                        )}\n\n                    </ListGroup.Item>\n\n                   <ListGroup.Item>\n                        <h2>Payment Method</h2>\n                        <p>\n                            <strong>Method:</strong>\n                            {order.paymentMethod}\n                        </p>\n                        {order.isPaid ? (\n                            <Message variant=\"success\">Paid on {order.paidAt}</Message>\n                        ) : (\n                            <Message variant=\"danger\">Not Paid </Message>\n                        )}\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <h2>Order Items</h2>\n                        <ListGroup variant='flush'>\n                            {order.orderItems.map((item, index) => (\n                                <ListGroup.Item key={index}>\n                                    <Row>\n                                    <Col md={1}>\n                                        <Image\n                                        src={item.image}\n                                        alt={item.name}\n                                        fluid\n                                        rounded\n                                        />\n                                    </Col>\n                                    <Col>\n                                        <Link to={`/product/${item.product}`}>\n                                        {item.name}\n                                        </Link>\n                                    </Col>\n                                    <Col md={4}>\n                                        {item.qty} x ${item.price} = ${item.qty * item.price}\n                                    </Col>\n                                    </Row>\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n            \n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <h2>Order Summary</h2>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Items</Col>\n                                <Col>SEK{order.itemsPrice}</Col>\n                            </Row>\n\n                            <Row>\n                                <Col>Delivery</Col>\n                                <Col>SEK{order.deliveryPrice}</Col>\n                            </Row>\n\n                            <Row>\n                                <Col>Tax</Col>\n                                <Col>SEK{order.taxPrice}</Col>\n                            </Row>\n\n                            <Row>\n                                <Col><strong>Total</strong></Col>\n                                <Col>SEK{order.totalPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        {/* PAY ORDER PLACEHOLDER */}\n                        {!order.isPaid && (\n            <form onSubmit={handlePayment}>\n                <CardElement onChange={handleChange} />\n                <button type=\"submit\" disabled={processing || disabled || succeeded}>\n                    {processing ? \"Processing...\" : \"Pay Now\"}\n                </button>\n            </form>\n        )}\n                        \n                        \n                        {/* MARK AS DELIVERED PLACEHOLDER */ }\n                    </ListGroup>\n                </Card>\n            </Col>\n        </Row>\n        </>\n    )\n  );\n}\n\nexport default OrderScreen;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}