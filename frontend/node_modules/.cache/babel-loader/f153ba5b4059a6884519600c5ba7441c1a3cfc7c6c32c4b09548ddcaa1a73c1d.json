{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n//     const dispatch = useDispatch();\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n\n//     const [stripe, setStripe] = useState(null);\n//     const [clientSecret, setClientSecret] = useState(\"\");\n\n//     useEffect(() => {\n//         if (order && !order.isPaid) {\n//             dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n//             .then(result => {\n//                 setClientSecret(result.payload.clientSecret);\n//             })\n//             .catch(err => {\n//                 toast.error(\"Failed to create payment intent\");\n//             });\n//         }\n//     }, [order, dispatch]);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n\n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n\n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n\n//             console.log(\"Stripe Key coming from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n\n//         initializeStripe();\n//     }, [stripeKey]);\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n\n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         {/* <Elements stripe={stripe}> */}\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         {/* </Elements> */}\n//                                     </ListGroup.Item>\n//                                 ) : null} \n\n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Row, Col, ListGroup, Card } from 'react-bootstrap';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport StripeCheckoutForm from '../components/StripeCheckoutForm';\nimport { toast } from 'react-toastify';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery, useCreatePaymentIntentMutation, updateOrderAsPaid } from '../slices/ordersApiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderScreen = ({\n  match\n}) => {\n  _s();\n  const orderId = match.params.id;\n  const [clientSecret, setClientSecret] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    data: order,\n    error: orderError\n  } = useGetOrderDetailsQuery(orderId);\n  const [payOrder] = usePayOrderMutation();\n  const {\n    data: stripeKey\n  } = useGetStripeKeyQuery();\n  const [createPaymentIntent] = useCreatePaymentIntentMutation();\n  const stripePromise = loadStripe(stripeKey);\n  useEffect(() => {\n    const createIntent = async () => {\n      try {\n        const response = await createPaymentIntent(order.totalPrice);\n        setClientSecret(response.clientSecret);\n      } catch (error) {\n        toast.error(\"Failed to initialize payment. Please try again.\");\n      }\n    };\n    if (order && !order.isPaid && !clientSecret) {\n      createIntent();\n    }\n  }, [order, createPaymentIntent, clientSecret]);\n  const paymentHandler = async paymentResult => {\n    try {\n      await payOrder({\n        orderId,\n        paymentResult\n      });\n      dispatch(updateOrderAsPaid(orderId)); // Dispatching the action after payment\n      toast.success(\"Payment Successful!\");\n    } catch (err) {\n      toast.error(\"Payment Failed!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      md: 8,\n      children: /*#__PURE__*/_jsxDEV(ListGroup, {\n        variant: \"flush\",\n        children: order && order.isPaid ? /*#__PURE__*/_jsxDEV(Message, {\n          children: \"Your order has already been paid for\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Complete your payment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), clientSecret ? /*#__PURE__*/_jsxDEV(Elements, {\n            stripe: stripePromise,\n            children: /*#__PURE__*/_jsxDEV(StripeCheckoutForm, {\n              amount: order.totalPrice,\n              clientSecret: clientSecret,\n              onPaymentSuccess: paymentHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 17\n          }, this) // Show loader while payment intent is being created\n          ]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n};\n_s(OrderScreen, \"RUDpdcwWAvaBRAzI2tywefPv76o=\", false, function () {\n  return [useDispatch, useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery, useCreatePaymentIntentMutation];\n});\n_c = OrderScreen;\nexport default OrderScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"names":["useEffect","useState","useSelector","useDispatch","Button","Row","Col","ListGroup","Card","loadStripe","Elements","StripeCheckoutForm","toast","Message","Loader","useGetOrderDetailsQuery","usePayOrderMutation","useGetStripeKeyQuery","useCreatePaymentIntentMutation","updateOrderAsPaid","jsxDEV","_jsxDEV","OrderScreen","match","_s","orderId","params","id","clientSecret","setClientSecret","dispatch","data","order","error","orderError","payOrder","stripeKey","createPaymentIntent","stripePromise","createIntent","response","totalPrice","isPaid","paymentHandler","paymentResult","success","err","children","md","variant","fileName","_jsxFileName","lineNumber","columnNumber","Item","stripe","amount","onPaymentSuccess","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n//     const dispatch = useDispatch();\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n    \n//     const [stripe, setStripe] = useState(null);\n//     const [clientSecret, setClientSecret] = useState(\"\");\n\n//     useEffect(() => {\n//         if (order && !order.isPaid) {\n//             dispatch(createPaymentIntent(order.totalPrice)) // Assuming total price is needed to create a PaymentIntent\n//             .then(result => {\n//                 setClientSecret(result.payload.clientSecret);\n//             })\n//             .catch(err => {\n//                 toast.error(\"Failed to create payment intent\");\n//             });\n//         }\n//     }, [order, dispatch]);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n        \n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n        \n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n        \n//             console.log(\"Stripe Key coming from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n        \n    \n//         initializeStripe();\n//     }, [stripeKey]);\n\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n        \n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n            \n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         {/* <Elements stripe={stripe}> */}\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         {/* </Elements> */}\n//                                     </ListGroup.Item>\n//                                 ) : null} \n                        \n                        \n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\n\n\n\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Row, Col, ListGroup, Card } from 'react-bootstrap';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport StripeCheckoutForm from '../components/StripeCheckoutForm';\nimport { toast } from 'react-toastify';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport {\n    useGetOrderDetailsQuery,\n    usePayOrderMutation,\n    useGetStripeKeyQuery,\n    useCreatePaymentIntentMutation,\n    updateOrderAsPaid\n} from '../slices/ordersApiSlice';\n\nconst OrderScreen = ({ match }) => {\n  const orderId = match.params.id;\n  const [clientSecret, setClientSecret] = useState(null);\n  const dispatch = useDispatch();\n  \n  const { data: order, error: orderError } = useGetOrderDetailsQuery(orderId);\n  const [payOrder] = usePayOrderMutation();\n  const { data: stripeKey } = useGetStripeKeyQuery();\n  const [createPaymentIntent] = useCreatePaymentIntentMutation();\n\n  const stripePromise = loadStripe(stripeKey);\n\n  useEffect(() => {\n    const createIntent = async () => {\n      try {\n        const response = await createPaymentIntent(order.totalPrice);\n        setClientSecret(response.clientSecret);\n      } catch (error) {\n        toast.error(\"Failed to initialize payment. Please try again.\");\n      }\n    };\n\n    if (order && !order.isPaid && !clientSecret) {\n      createIntent();\n    }\n  }, [order, createPaymentIntent, clientSecret]);\n\n  const paymentHandler = async (paymentResult) => {\n    try {\n      await payOrder({ orderId, paymentResult });\n      dispatch(updateOrderAsPaid(orderId)); // Dispatching the action after payment\n      toast.success(\"Payment Successful!\");\n    } catch (err) {\n      toast.error(\"Payment Failed!\");\n    }\n  };\n\n  return (\n    <Row>\n      <Col md={8}>\n        <ListGroup variant=\"flush\">\n          {/* ... display order details similarly to PlaceOrderScreen ... */}\n\n          {/* Stripe payment integration */}\n          {order && order.isPaid ? (\n            <Message>Your order has already been paid for</Message>\n          ) : (\n            <ListGroup.Item>\n              <h2>Complete your payment</h2>\n              {clientSecret ? (\n                <Elements stripe={stripePromise}>\n                  <StripeCheckoutForm \n                    amount={order.totalPrice} \n                    clientSecret={clientSecret}\n                    onPaymentSuccess={paymentHandler}\n                  />\n                </Elements>\n              ) : (\n                <Loader /> // Show loader while payment intent is being created\n              )}\n            </ListGroup.Item>\n          )}\n        </ListGroup>\n      </Col>\n      {/* ... The order summary code in a similar structure as PlaceOrderScreen ... */}\n    </Row>\n  );\n};\n\nexport default OrderScreen;\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}