{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card, ListGroupItem } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n\n//     const { id: orderId } = useParams();\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     const stripeInside = useStripe();\n//     const elements = useElements()\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n\n//     const [stripe, setStripe] = useState(null);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             try {\n//                 let stripeInstance;\n\n//                 if (stripeKey && typeof stripeKey === 'string') {\n//                     stripeInstance = await loadStripe(stripeKey);\n//                 } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                     stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//                 } else {\n//                     throw new Error(\"Stripe key is missing!\");\n//                 }\n\n//                 if (mounted) {\n//                     setStripe(stripeInstance);\n//                 }\n//             } catch (err) {\n//                 console.error(\"Failed to initialize Stripe:\", err);\n//             }\n//         };\n\n//         initializeStripe();\n\n//         return () => {\n//             mounted = false;\n//         }\n//     }, [stripeKey]);\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n//     console.log(order)\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             // Stripe.js has not yet loaded.\n//             console.log(\"Stripe.js hasn't loaded yet.\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n\n//         const result = await stripe.createToken(card);\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n//         } else {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n//     }\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         <Elements stripe={stripe}>\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         </Elements>\n//                                     </ListGroup.Item>\n//                                 ) : null} \n\n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Row, Col, ListGroup, Image, Button, Card } from \"react-bootstrap\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { toast } from \"react-toastify\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OrderScreen = () => {\n  _s();\n  const {\n    id: orderId\n  } = useParams();\n  const {\n    data: order,\n    refetch,\n    isLoading: loadingOrder,\n    error: orderError\n  } = useGetOrderDetailsQuery(orderId);\n  const [payOrder] = usePayOrderMutation();\n  const {\n    data: stripeKey,\n    isLoading: loadingStripeKey,\n    error: stripeKeyError\n  } = useGetStripeKeyQuery();\n  const stripeInside = useStripe();\n  const elements = useElements();\n  const [stripe, setStripe] = useState(null);\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n  useEffect(() => {\n    let mounted = true;\n    const initializeStripe = async () => {\n      try {\n        let stripeInstance;\n        if (stripeKey) {\n          stripeInstance = await loadStripe(stripeKey);\n        } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n          stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n        } else {\n          throw new Error(\"Stripe key is missing!\");\n        }\n        if (mounted) {\n          setStripe(stripeInstance);\n        }\n      } catch (err) {\n        console.error(\"Failed to initialize Stripe:\", err);\n      }\n    };\n    initializeStripe();\n    return () => {\n      mounted = false;\n    };\n  }, [stripeKey]);\n  const handlePayment = async () => {\n    if (!stripeInside || !elements) {\n      toast.error(\"Stripe.js hasn't loaded yet.\");\n      return;\n    }\n    const card = elements.getElement(CardElement);\n    const result = await stripeInside.createToken(card);\n    if (result.error) {\n      toast.error(result.error.message);\n    } else {\n      const paymentData = {\n        id: result.token.id,\n        status: 'completed',\n        update_time: new Date().toISOString(),\n        payer: {\n          email_address: userInfo.email\n        }\n      };\n      try {\n        await payOrder({\n          orderId,\n          details: paymentData\n        });\n        toast.success(\"Payment successful!\");\n        refetch();\n      } catch (error) {\n        toast.error(\"There was an issue processing the payment.\");\n      }\n    }\n  };\n  if (loadingOrder || loadingStripeKey) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 16\n    }, this);\n  }\n  if (orderError) {\n    return /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"danger\",\n      children: orderError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 16\n    }, this);\n  }\n  if (stripeKeyError) {\n    return /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"danger\",\n      children: stripeKeyError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Order \", order._id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Delivery\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 32\n              }, this), \" \", order.user.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 32\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `mailto:${order.user.email}`,\n                children: order.user.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 56\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Address:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 32\n              }, this), \" \", order.deliveryAddress.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 29\n            }, this), order.isDelivered ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Delivered on \", order.deliveredAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Delivered\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Payment Method\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Method:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 32\n              }, this), \" \", order.paymentMethod]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 29\n            }, this), order.isPaid ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Paid on \", order.paidAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Order Items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n              variant: \"flush\",\n              children: order.orderItems.map((item, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: 1,\n                    children: /*#__PURE__*/_jsxDEV(Image, {\n                      src: item.image,\n                      alt: item.name,\n                      fluid: true,\n                      rounded: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 355,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 354,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/product/${item.product}`,\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 358,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: [item.qty, \" x $\", item.price, \" = $\", item.qty * item.price]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 360,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 353,\n                  columnNumber: 41\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\",\n            children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Order Summary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Items\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.itemsPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Delivery\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.deliveryPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Tax\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.taxPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 38\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.totalPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 29\n            }, this), !order.isPaid && stripe && !loadingStripeKey ? /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(Elements, {\n                stripe: stripe,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    marginBottom: \"20px\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: handlePayment,\n                    style: {\n                      marginTop: \"10px\"\n                    },\n                    children: \"Pay Now\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 29\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(OrderScreen, \"FzqlqsP+9rvGJnoOIYJRiAb4JBc=\", false, function () {\n  return [useParams, useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery, useStripe, useElements, useSelector];\n});\n_c = OrderScreen;\nexport default OrderScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","Row","Col","ListGroup","Image","Button","Card","loadStripe","Elements","CardElement","useStripe","useElements","toast","Message","Loader","useGetOrderDetailsQuery","usePayOrderMutation","useGetStripeKeyQuery","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","OrderScreen","_s","id","orderId","data","order","refetch","isLoading","loadingOrder","error","orderError","payOrder","stripeKey","loadingStripeKey","stripeKeyError","stripeInside","elements","stripe","setStripe","userInfo","state","auth","mounted","initializeStripe","stripeInstance","process","env","REACT_APP_STRIPE_PUBLIC_KEY","Error","err","console","handlePayment","card","getElement","result","createToken","message","paymentData","token","status","update_time","Date","toISOString","payer","email_address","email","details","success","fileName","_jsxFileName","lineNumber","columnNumber","variant","children","_id","md","Item","user","name","href","deliveryAddress","address","isDelivered","deliveredAt","paymentMethod","isPaid","paidAt","orderItems","map","item","index","src","image","alt","fluid","rounded","to","product","qty","price","itemsPrice","deliveryPrice","taxPrice","totalPrice","style","marginBottom","onClick","marginTop","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card, ListGroupItem } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n\n//     const { id: orderId } = useParams();\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     const stripeInside = useStripe();\n//     const elements = useElements()\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n    \n//     const [stripe, setStripe] = useState(null);\n\n//     useEffect(() => {\n//         let mounted = true;\n    \n//         const initializeStripe = async () => {\n//             try {\n//                 let stripeInstance;\n\n//                 if (stripeKey && typeof stripeKey === 'string') {\n//                     stripeInstance = await loadStripe(stripeKey);\n//                 } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                     stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//                 } else {\n//                     throw new Error(\"Stripe key is missing!\");\n//                 }\n    \n//                 if (mounted) {\n//                     setStripe(stripeInstance);\n//                 }\n//             } catch (err) {\n//                 console.error(\"Failed to initialize Stripe:\", err);\n//             }\n//         };\n    \n//         initializeStripe();\n    \n//         return () => {\n//             mounted = false;\n//         }\n//     }, [stripeKey]);\n\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n//     console.log(order)\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             // Stripe.js has not yet loaded.\n//             console.log(\"Stripe.js hasn't loaded yet.\");\n//             return;\n//         }\n        \n//         const card = elements.getElement(CardElement);\n        \n//         const result = await stripe.createToken(card);\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n//         } else {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n//     }\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n            \n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         <Elements stripe={stripe}>\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         </Elements>\n//                                     </ListGroup.Item>\n//                                 ) : null} \n                        \n                        \n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\n\n\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Row, Col, ListGroup, Image, Button, Card } from \"react-bootstrap\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { toast } from \"react-toastify\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\nimport { useSelector } from \"react-redux\";\n\nconst OrderScreen = () => {\n    const { id: orderId } = useParams();\n    const { data: order, refetch, isLoading: loadingOrder, error: orderError } = useGetOrderDetailsQuery(orderId);\n    const [payOrder] = usePayOrderMutation();\n    const { data: stripeKey, isLoading: loadingStripeKey, error: stripeKeyError } = useGetStripeKeyQuery();\n    const stripeInside = useStripe();\n    const elements = useElements();\n    const [stripe, setStripe] = useState(null);\n    const { userInfo } = useSelector((state) => state.auth);\n\n    useEffect(() => {\n        let mounted = true;\n\n        const initializeStripe = async () => {\n            try {\n                let stripeInstance;\n                if (stripeKey) {\n                    stripeInstance = await loadStripe(stripeKey);\n                } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n                    stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n                } else {\n                    throw new Error(\"Stripe key is missing!\");\n                }\n\n                if (mounted) {\n                    setStripe(stripeInstance);\n                }\n            } catch (err) {\n                console.error(\"Failed to initialize Stripe:\", err);\n            }\n        };\n\n        initializeStripe();\n\n        return () => {\n            mounted = false;\n        }\n    }, [stripeKey]);\n\n    const handlePayment = async () => {\n        if (!stripeInside || !elements) {\n            toast.error(\"Stripe.js hasn't loaded yet.\");\n            return;\n        }\n\n        const card = elements.getElement(CardElement);\n        const result = await stripeInside.createToken(card);\n        if (result.error) {\n            toast.error(result.error.message);\n        } else {\n            const paymentData = {\n                id: result.token.id,\n                status: 'completed',\n                update_time: new Date().toISOString(),\n                payer: {\n                    email_address: userInfo.email\n                }\n            };\n            try {\n                await payOrder({ orderId, details: paymentData });\n                toast.success(\"Payment successful!\");\n                refetch();\n            } catch (error) {\n                toast.error(\"There was an issue processing the payment.\");\n            }\n        }\n    }\n\n    if (loadingOrder || loadingStripeKey) {\n        return <Loader />;\n    }\n\n    if (orderError) {\n        return <Message variant=\"danger\">{orderError.message}</Message>;\n    }\n\n    if (stripeKeyError) {\n        return <Message variant=\"danger\">{stripeKeyError.message}</Message>;\n    }\n\n    return (\n        <>\n            <h1>Order {order._id}</h1>\n            <Row>\n                <Col md={8}>\n                    <ListGroup>\n                        <ListGroup.Item>\n                            <h2>Delivery</h2>\n                            <p><strong>Name:</strong> {order.user.name}</p>\n                            <p><strong>Email:</strong> <a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n                            <p><strong>Address:</strong> {order.deliveryAddress.address}</p>\n                            {order.isDelivered ? (\n                                <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Delivered</Message>\n                            )}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <h2>Payment Method</h2>\n                            <p><strong>Method:</strong> {order.paymentMethod}</p>\n                            {order.isPaid ? (\n                                <Message variant=\"success\">Paid on {order.paidAt}</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Paid</Message>\n                            )}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            <ListGroup variant='flush'>\n                                {order.orderItems.map((item, index) => (\n                                    <ListGroup.Item key={index}>\n                                        <Row>\n                                            <Col md={1}>\n                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                            </Col>\n                                            <Col>\n                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                            </Col>\n                                            <Col md={4}>\n                                                {item.qty} x ${item.price} = ${item.qty * item.price}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>SEK{order.itemsPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col>Delivery</Col>\n                                    <Col>SEK{order.deliveryPrice}</Col>\n                                </Row>\n\n                                <Row>\n                                <Col>Tax</Col>\n                                <Col>SEK{order.taxPrice}</Col>\n                            </Row>\n                            <Row>\n                                <Col><strong>Total</strong></Col>\n                                <Col>SEK{order.totalPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        {!order.isPaid && stripe && !loadingStripeKey ? (\n                            <ListGroup.Item>\n                                <Elements stripe={stripe}>\n                                    <div style={{ marginBottom: \"20px\" }}>\n                                        <CardElement />\n                                        <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n                                            Pay Now\n                                        </Button>\n                                    </div>\n                                </Elements>\n                            </ListGroup.Item>\n                        ) : null}\n                    </ListGroup>\n                </Card>\n            </Col>\n        </Row>\n    </>\n);\n}\n\nexport default OrderScreen;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,SAASC,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC1E,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,QAAQ,E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"},"metadata":{},"sourceType":"module","externalDependencies":[]}