{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements ,CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n\n//     const [stripe, setStripe] = useState(null);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n\n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n\n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n\n//             console.log(\"Stripe Key coming from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n\n//         initializeStripe();\n//     }, [stripeKey]);\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n\n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n//             // Get the clientSecret from the backend\n//         const amountInCents = order.totalPrice * 100;\n//         let clientSecret;\n//         try {\n//             const response = await axios.post('/api/config/stripe', { amount: amountInCents });\n//             clientSecret = response.data.clientSecret;\n//         } catch (err) {\n//             toast.error(\"Failed to create payment intent. Please try again\");\n//             console.error(\"Error:\", err);\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         <Elements stripe={stripe}>\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         </Elements>\n//                                     </ListGroup.Item>\n//                                 ) : null} \n\n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OrderScreen = () => {\n  _s();\n  const {\n    id: orderId\n  } = useParams();\n  const elements = useElements();\n  const stripeContext = useStripe();\n  const [stripe, setStripe] = useState(null);\n  useEffect(() => {\n    const initializeStripe = async () => {\n      if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n        const stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n        setStripe(stripeInstance);\n      } else {\n        console.error(\"REACT_APP_STRIPE_PUBLIC_KEY from env is missing\");\n      }\n    };\n    initializeStripe();\n  }, []);\n  const handlePayment = async () => {\n    if (!stripeContext || !elements) {\n      console.error(\"Stripe or elements not ready\");\n      return;\n    }\n    const card = elements.getElement(CardElement);\n    if (!card) {\n      console.error(\"CardElement not ready or not found\");\n      return;\n    }\n\n    // Simplify just to test Stripe's payment process\n    const response = await axios.post('/api/config/stripe', {\n      amount: 100\n    }); // Assuming 100 cents for testing\n    const clientSecret = response.data.clientSecret;\n    const result = await stripeContext.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: card\n      }\n    });\n    if (result.error) {\n      console.error(result.error.message);\n    } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n      console.log(\"Payment succeeded!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Order \", orderId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Stripe Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }, this), stripe ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handlePayment,\n            children: \"Pay Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading Stripe...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(OrderScreen, \"HoinlsvWBBGOmqW0bdbfrMeukzA=\", false, function () {\n  return [useParams, useElements, useStripe];\n});\n_c = OrderScreen;\nexport default OrderScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Button","Card","loadStripe","Elements","CardElement","useStripe","useElements","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","OrderScreen","_s","id","orderId","elements","stripeContext","stripe","setStripe","initializeStripe","process","env","REACT_APP_STRIPE_PUBLIC_KEY","stripeInstance","console","error","handlePayment","card","getElement","response","post","amount","clientSecret","data","result","confirmCardPayment","payment_method","message","paymentIntent","status","log","children","fileName","_jsxFileName","lineNumber","columnNumber","Body","onClick","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card } from \"react-bootstrap\";\n// import { loadStripe } from \"@stripe/stripe-js\";\n// import { Elements ,CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { toast } from \"react-toastify\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\n// import { useGetOrderDetailsQuery, usePayOrderMutation, useGetStripeKeyQuery } from \"../slices/ordersApiSlice\";\n// import { useSelector } from \"react-redux\";\n// import axios from 'axios'\n\n// // const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n// // if (stripeKey && stripeKey !== process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n// //     stripe = loadStripe(stripeKey);\n// // }\n\n// const OrderScreen = () => {\n\n//     const { id: orderId } = useParams();\n//     const elements = useElements()\n\n//     const { data: order, refetch, isLoading, error } = \n//     useGetOrderDetailsQuery(orderId);\n\n//     const [payOrder, { isLoading: loadingPay }] =usePayOrderMutation();\n\n//     // const stripeInside = useStripe();\n\n\n//     const { data: stripeKey, isLoading: loadingStripeKey, error: errorStripeKey } = useGetStripeKeyQuery();\n    \n//     const [stripe, setStripe] = useState(null);\n\n//     useEffect(() => {\n//         let mounted = true;\n\n//         const initializeStripe = async () => {\n//             let stripeInstance;\n        \n//             if (stripeKey && typeof stripeKey === 'string') {\n//                 stripeInstance = await loadStripe(stripeKey);\n//             } else if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n//                 stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//             } else {\n//                 console.error(\"Neither stripeKey from API nor REACT_APP_STRIPE_PUBLIC_KEY from env is available\");\n//                 throw new Error(\"Stripe key is missing!\");\n//             }\n        \n//             if (mounted) {\n//                 setStripe(stripeInstance);\n//             }\n        \n//             console.log(\"Stripe Key coming from API:\", stripeKey);\n//             console.log(\"Stripe Key from Env:\", process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n//         };\n        \n    \n//         initializeStripe();\n//     }, [stripeKey]);\n\n\n//     const { userInfo } = useSelector((state) => (state.auth))\n\n\n//     const handlePayment = async () => {\n//         if (!stripe || !elements) {\n//             toast.error(\"Stripe hasn't loaded yet. Please wait a moment.\");\n//             return;\n//         }\n        \n//         if (!stripe || !elements) {\n//             console.log(\"Stripe or elements not ready\");\n//             return;\n//         }\n\n//         const card = elements.getElement(CardElement);\n//         if (!card) {\n//             console.log(\"CardElement not ready or not found\");\n//             return;\n//         }\n\n//             // Get the clientSecret from the backend\n//         const amountInCents = order.totalPrice * 100;\n//         let clientSecret;\n//         try {\n//             const response = await axios.post('/api/config/stripe', { amount: amountInCents });\n//             clientSecret = response.data.clientSecret;\n//         } catch (err) {\n//             toast.error(\"Failed to create payment intent. Please try again\");\n//             console.error(\"Error:\", err);\n//             return;\n//         }\n\n//         const result = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: card,\n//                 billing_details: {\n//                     name: order.user.name,\n//                     email: order.user.email,\n//                 }\n//             }\n//         });\n\n//         if (result.error) {\n//             // Inform the customer that there was an error.\n//             toast.error(result.error.message);\n\n//         } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n\n//             const paymentData = {\n//                 id: result.token.id,\n//                 status: 'completed',\n//                 update_time: new Date().toISOString(), // You can customize this\n//                 payer: {\n//                     email_address: userInfo.email\n//                 }\n//             };\n//             await payOrder({ orderId, details: paymentData });\n//             refetch();\n//             // Send the token to your server (this is where you would call your API to charge the card).\n//             // You've mentioned a usePayOrderMutation, so you'd use that here with the token as an argument.\n//             // payOrder(result.token);\n//         }\n\n\n//     }\n\n//     // Render logic to improve readability.\n//     if (isLoading || loadingStripeKey) return <Loader />;\n//     if (error || errorStripeKey) \n//     return <Message variant=\"danger\">{error || errorStripeKey}</Message>;\n\n//   return (\n//     isLoading ? <Loader /> : error ? ( <Message variant=\"danger\"/> )\n//     : (\n//         <>\n//         <h1>Order {order._id}</h1>\n//         <Row>\n//             <Col md={8}>\n//                 <ListGroup>\n//                     <ListGroup.Item>\n//                         <h2>Delivery</h2>\n//                         <p>\n//                             <strong>Name:</strong> {order.user.name}\n//                         </p>\n//                         <p>\n//                             <strong>Email:</strong> {order.user.email}\n//                         </p>\n//                         <p>\n//                             <strong>Address:</strong> {order.deliveryAddress.address}\n//                         </p>\n\n//                         {order.isDelivered ? (\n//                             <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Delivered </Message>\n//                         )}\n\n//                     </ListGroup.Item>\n\n//                    <ListGroup.Item>\n//                         <h2>Payment Method</h2>\n//                         <p>\n//                             <strong>Method:</strong>\n//                             {order.paymentMethod}\n//                         </p>\n//                         {order.isPaid ? (\n//                             <Message variant=\"success\">Paid on {order.paidAt}</Message>\n//                         ) : (\n//                             <Message variant=\"danger\">Not Paid </Message>\n//                         )}\n//                     </ListGroup.Item>\n\n//                     <ListGroup.Item>\n//                         <h2>Order Items</h2>\n//                         <ListGroup variant='flush'>\n//                             {order.orderItems.map((item, index) => (\n//                                 <ListGroup.Item key={index}>\n//                                     <Row>\n//                                     <Col md={1}>\n//                                         <Image\n//                                         src={item.image}\n//                                         alt={item.name}\n//                                         fluid\n//                                         rounded\n//                                         />\n//                                     </Col>\n//                                     <Col>\n//                                         <Link to={`/product/${item.product}`}>\n//                                         {item.name}\n//                                         </Link>\n//                                     </Col>\n//                                     <Col md={4}>\n//                                         {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                     </Col>\n//                                     </Row>\n//                                 </ListGroup.Item>\n//                             ))}\n//                         </ListGroup>\n            \n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Col>\n//             <Col md={4}>\n//                 <Card>\n//                     <ListGroup variant=\"flush\">\n//                         <ListGroup.Item>\n//                             <h2>Order Summary</h2>\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <Row>\n//                                 <Col>Items</Col>\n//                                 <Col>SEK{order.itemsPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Delivery</Col>\n//                                 <Col>SEK{order.deliveryPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col>Tax</Col>\n//                                 <Col>SEK{order.taxPrice}</Col>\n//                             </Row>\n\n//                             <Row>\n//                                 <Col><strong>Total</strong></Col>\n//                                 <Col>SEK{order.totalPrice}</Col>\n//                             </Row>\n//                         </ListGroup.Item>\n\n//                         {/* PAY ORDER PLACEHOLDER */}\n//                         {!order.isPaid && stripe && !loadingStripeKey ? (\n//                                     <ListGroup.Item>\n//                                         <Elements stripe={stripe}>\n//                                             <div style={{ marginBottom: \"20px\" }}>\n//                                                 <CardElement />\n//                                                 <Button onClick={handlePayment} style={{ marginTop: \"10px\" }}>\n//                                                     {loadingPay ? \"Processing...\":\"Pay Now\"}\n//                                                 </Button>\n//                                             </div>\n//                                         </Elements>\n//                                     </ListGroup.Item>\n//                                 ) : null} \n                        \n                        \n//                         {/* MARK AS DELIVERED PLACEHOLDER */ }\n//                     </ListGroup>\n//                 </Card>\n//             </Col>\n//         </Row>\n//         </>\n//     )\n//   );\n// }\n\n// export default OrderScreen;\n\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport axios from 'axios'\n\nconst OrderScreen = () => {\n\n    const { id: orderId } = useParams();\n    const elements = useElements();\n    const stripeContext = useStripe();\n\n    const [stripe, setStripe] = useState(null);\n\n    useEffect(() => {\n        const initializeStripe = async () => {\n            if (process.env.REACT_APP_STRIPE_PUBLIC_KEY) {\n                const stripeInstance = await loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n                setStripe(stripeInstance);\n            } else {\n                console.error(\"REACT_APP_STRIPE_PUBLIC_KEY from env is missing\");\n            }\n        };\n\n        initializeStripe();\n    }, []);\n\n    const handlePayment = async () => {\n        if (!stripeContext || !elements) {\n            console.error(\"Stripe or elements not ready\");\n            return;\n        }\n\n        const card = elements.getElement(CardElement);\n        if (!card) {\n            console.error(\"CardElement not ready or not found\");\n            return;\n        }\n\n        // Simplify just to test Stripe's payment process\n        const response = await axios.post('/api/config/stripe', { amount: 100 });  // Assuming 100 cents for testing\n        const clientSecret = response.data.clientSecret;\n        \n        const result = await stripeContext.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: card\n            }\n        });\n\n        if (result.error) {\n            console.error(result.error.message);\n        } else if (result.paymentIntent && result.paymentIntent.status === \"succeeded\") {\n            console.log(\"Payment succeeded!\");\n        }\n    }\n\n    return (\n        <>\n            <h1>Order {orderId}</h1>\n            <Card>\n                <Card.Body>\n                    <h2>Stripe Test</h2>\n                    {stripe ? (\n                        \n                            <div>\n                                <CardElement />\n                                <Button onClick={handlePayment}>Pay Now</Button>\n                            </div>\n                        \n                    ) : (\n                        <p>Loading Stripe...</p>\n                    )}\n                </Card.Body>\n            </Card>\n        </>\n    );\n}\n\nexport default OrderScreen;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,S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"},"metadata":{},"sourceType":"module","externalDependencies":[]}