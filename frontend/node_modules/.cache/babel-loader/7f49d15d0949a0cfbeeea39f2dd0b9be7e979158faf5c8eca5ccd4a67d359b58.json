{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\n// import { Link, useParams } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { useState, useEffect } from 'react';\n// import { useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const elements = useElements();\n\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [processing, setProcessing] = useState(false);\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [disabled, setDisabled] = useState(false);\n//     const [hasPaid, setHasPaid] = useState(false);\n//     const [paymentDate, setPaymentDate] = useState(null);\n\n//     const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n//     const [payOrder] = usePayOrderMutation();\n\n//     const { userInfo } = useSelector((state) => state.auth);\n\n//     useEffect(() => {\n//         const createPaymentIntent = async () => {\n//             try {\n//                 const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n//                 setClientSecret(data.clientSecret);\n//             } catch (err) {\n//                 console.error(\"Error fetching client secret:\", err.message);\n//             }\n//         };\n//         // Check if order exists and if it hasn't been paid, then create a payment intent.\n//         if (order && !order.isPaid) {\n//             createPaymentIntent();\n//         }\n\n//         // Update local state if the order is marked as paid..\n//         if (order && order.isPaid) {\n//             setHasPaid(true);\n//             setPaymentDate(order.paidAt);\n//         } \n\n//     }, [order]);\n\n//      // Improved Card Element rendering:\n//     const renderCardElement = () => {\n//         return (\n//             <div>\n//                 <label>Card Number</label>\n//                 <CardNumberElement />\n\n//                 <label>Expiration Date</label>\n//                 <CardExpiryElement />\n\n//                 <label>CVC</label>\n//                 <CardCvcElement />\n//             </div>\n//         );\n//     }\n\n//     const handleChange = async (event) => {\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message);\n//         }\n//     };\n\n//     const handlePayment = async ev => {\n//         ev.preventDefault();\n//         setProcessing(true);\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement)\n//             }\n//         });\n//         if (payload.error) {\n//             toast.error(`Payment failed ${payload.error.message}`);\n//             setProcessing(false);\n//         } else {\n//             const paymentResult = {\n//               id: payload.paymentIntent.id,\n//               status: payload.paymentIntent.status,\n//               update_time: new Date().toISOString(),\n//               email_address: payload.paymentIntent.receipt_email,\n//             };\n\n//             // Refetch order Details\n//             await payOrder({ orderId, details: paymentResult });\n//             refetch();\n\n//             setHasPaid(true);\n//             setPaymentDate(new Date().toISOString());\n//             toast.success('Payment successful');\n//             setProcessing(false);\n//         }\n//     };\n\n//     if (isLoading) return <Loader />;\n//     if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n//     return (\n//         <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid || hasPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                             <Col md={1}>\n//                                                 <Image src={item.image} alt={item.name} fluid rounded />\n//                                             </Col>\n//                                             <Col>\n//                                                 <Link to={`/product/${item.product}`}>\n//                                                     {item.name}\n//                                                 </Link>\n//                                             </Col>\n//                                             <Col md={4}>\n//                                                 {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                             </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n//                         </ListGroup.Item>\n//                     </ListGroup>\n//                 </Col>\n\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             {!order.isPaid && !hasPaid && stripe ? (\n//                                 <ListGroup.Item>\n//                                     <div style={{ marginBottom: \"20px\" }}>\n//                                         <CardElement onChange={handleChange}/>\n//                                         <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                             {processing ? \"Processing...\":\"Pay Now\"}\n//                                         </Button>\n//                                     </div>\n//                                 </ListGroup.Item>\n\n//                             ) : null}\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//         </>\n//     );\n// };\n\n// export default OrderScreen;\n\nimport { Link, useParams } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\nimport { CardElement, CardNumberElement, CardExpiryElement, CardCvcElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OrderScreen = () => {\n  _s();\n  const {\n    id: orderId\n  } = useParams();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [clientSecret, setClientSecret] = useState('');\n  const [processing, setProcessing] = useState(false);\n  const [succeeded, setSucceeded] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [hasPaid, setHasPaid] = useState(false);\n  const [paymentDate, setPaymentDate] = useState(null);\n  const {\n    data: order,\n    refetch,\n    isError,\n    isLoading\n  } = useGetOrderDetailsQuery(orderId);\n  const [payOrder] = usePayOrderMutation();\n  const {\n    userInfo\n  } = useSelector(state => state.auth);\n  useEffect(() => {\n    const createPaymentIntent = async () => {\n      try {\n        const {\n          data\n        } = await axios.post('/api/config/stripe', {\n          amount: order.totalPrice * 100\n        });\n        setClientSecret(data.clientSecret);\n      } catch (err) {\n        console.error(\"Error fetching client secret:\", err.message);\n      }\n    };\n    // Check if order exists and if it hasn't been paid, then create a payment intent.\n    if (order && !order.isPaid) {\n      createPaymentIntent();\n    }\n\n    // Update local state if the order is marked as paid..\n    if (order && order.isPaid) {\n      setHasPaid(true);\n      setPaymentDate(order.paidAt);\n    }\n  }, [order]);\n  const handleChange = async event => {\n    setDisabled(event.empty);\n    if (event.error) {\n      toast.error(event.error.message);\n    }\n  };\n  const handlePayment = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: userInfo.email\n        }\n      }\n    });\n    if (payload.error) {\n      toast.error(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      const paymentResult = {\n        id: payload.paymentIntent.id,\n        status: payload.paymentIntent.status,\n        update_time: new Date().toISOString(),\n        email_address: payload.paymentIntent.receipt_email\n      };\n\n      // Refetch order Details\n      await payOrder({\n        orderId,\n        details: paymentResult\n      });\n      refetch();\n      setHasPaid(true);\n      setPaymentDate(new Date().toISOString());\n      toast.success('Payment successful');\n      setProcessing(false);\n    }\n  };\n  const handleKlarnaPayment = async () => {\n    try {\n      const {\n        data\n      } = await axios.post('/api/config/stripe/klarna', {\n        orderId\n      });\n      const {\n        sessionId\n      } = data;\n      const {\n        error\n      } = await stripe.redirectToCheckout({\n        sessionId\n      });\n      if (error) {\n        toast.error(error.message);\n      }\n    } catch (err) {\n      console.error(\"Error initiating Klarna payment:\", err.message);\n    }\n  };\n  const CARD_ELEMENT_OPTIONS = {\n    style: {\n      base: {\n        color: '#32325d',\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n        fontSmoothing: 'antialiased',\n        fontSize: '16px',\n        '::placeholder': {\n          color: '#aab7c4'\n        }\n      },\n      invalid: {\n        color: '#fa755a',\n        iconColor: '#fa755a'\n      }\n    }\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 27\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\",\n    children: isError.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Order \", order._id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Delivery\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 33\n              }, this), \" \", order.user.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 33\n              }, this), \" \", order.user.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Address:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 33\n              }, this), \" \", order.deliveryAddress.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 29\n            }, this), order.isDelivered ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Delivered on \", order.deliveredAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Delivered \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Payment Method\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Method:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 33\n              }, this), order.paymentMethod]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 29\n            }, this), order.isPaid || hasPaid ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Paid on \", order.paidAt || paymentDate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Paid \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Order Items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n              variant: \"flush\",\n              children: order.orderItems.map((item, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: 1,\n                    children: /*#__PURE__*/_jsxDEV(Image, {\n                      src: item.image,\n                      alt: item.name,\n                      fluid: true,\n                      rounded: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 399,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 398,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/product/${item.product}`,\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 402,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: [item.qty, \" x $\", item.price, \" = $\", item.qty * item.price]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 406,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 41\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\",\n            children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Order Summary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Items\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.itemsPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Delivery\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.deliveryPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Tax\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.taxPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 434,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 437,\n                    columnNumber: 42\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 437,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.totalPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 29\n            }, this), !order.isPaid && !hasPaid && stripe ? /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: \"20px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Card Number\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(CardNumberElement, {\n                  options: CARD_ELEMENT_OPTIONS,\n                  onChange: handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 446,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Expiry Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(CardExpiryElement, {\n                  options: CARD_ELEMENT_OPTIONS,\n                  onChange: handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"CVC\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(CardCvcElement, {\n                  options: CARD_ELEMENT_OPTIONS,\n                  onChange: handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: handlePayment,\n                  disabled: processing || disabled || succeeded,\n                  style: {\n                    marginTop: \"10px\"\n                  },\n                  children: processing ? \"Processing...\" : \"Pay Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: handleKlarnaPayment,\n                  style: {\n                    marginTop: \"10px\",\n                    marginLeft: \"10px\"\n                  },\n                  children: \"Pay with Klarna\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 30\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(OrderScreen, \"NqzHx+kRxbZ441toazw0h8W8X8s=\", false, function () {\n  return [useParams, useStripe, useElements, useGetOrderDetailsQuery, usePayOrderMutation, useSelector];\n});\n_c = OrderScreen;\nexport default OrderScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"names":["Link","useParams","Row","Col","ListGroup","Image","Button","Card","CardElement","CardNumberElement","CardExpiryElement","CardCvcElement","useStripe","useElements","useState","useEffect","useSelector","Message","Loader","axios","toast","useGetOrderDetailsQuery","usePayOrderMutation","jsxDEV","_jsxDEV","Fragment","_Fragment","OrderScreen","_s","id","orderId","stripe","elements","clientSecret","setClientSecret","processing","setProcessing","succeeded","setSucceeded","disabled","setDisabled","hasPaid","setHasPaid","paymentDate","setPaymentDate","data","order","refetch","isError","isLoading","payOrder","userInfo","state","auth","createPaymentIntent","post","amount","totalPrice","err","console","error","message","isPaid","paidAt","handleChange","event","empty","handlePayment","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","email","paymentResult","paymentIntent","status","update_time","Date","toISOString","email_address","receipt_email","details","success","handleKlarnaPayment","sessionId","redirectToCheckout","CARD_ELEMENT_OPTIONS","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","fileName","_jsxFileName","lineNumber","columnNumber","variant","children","_id","md","Item","user","name","deliveryAddress","address","isDelivered","deliveredAt","paymentMethod","orderItems","map","item","index","src","image","alt","fluid","rounded","to","product","qty","price","itemsPrice","deliveryPrice","taxPrice","marginBottom","options","onChange","onClick","marginTop","marginLeft","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["\n\n\n// import { Link, useParams } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { useState, useEffect } from 'react';\n// import { useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const elements = useElements();\n\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [processing, setProcessing] = useState(false);\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [disabled, setDisabled] = useState(false);\n//     const [hasPaid, setHasPaid] = useState(false);\n//     const [paymentDate, setPaymentDate] = useState(null);\n\n\n//     const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n//     const [payOrder] = usePayOrderMutation();\n\n//     const { userInfo } = useSelector((state) => state.auth);\n\n\n//     useEffect(() => {\n//         const createPaymentIntent = async () => {\n//             try {\n//                 const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n//                 setClientSecret(data.clientSecret);\n//             } catch (err) {\n//                 console.error(\"Error fetching client secret:\", err.message);\n//             }\n//         };\n//         // Check if order exists and if it hasn't been paid, then create a payment intent.\n//         if (order && !order.isPaid) {\n//             createPaymentIntent();\n//         }\n\n//         // Update local state if the order is marked as paid..\n//         if (order && order.isPaid) {\n//             setHasPaid(true);\n//             setPaymentDate(order.paidAt);\n//         } \n\n//     }, [order]);\n\n//      // Improved Card Element rendering:\n//     const renderCardElement = () => {\n//         return (\n//             <div>\n//                 <label>Card Number</label>\n//                 <CardNumberElement />\n\n//                 <label>Expiration Date</label>\n//                 <CardExpiryElement />\n\n//                 <label>CVC</label>\n//                 <CardCvcElement />\n//             </div>\n//         );\n//     }\n\n//     const handleChange = async (event) => {\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message);\n//         }\n//     };\n\n//     const handlePayment = async ev => {\n//         ev.preventDefault();\n//         setProcessing(true);\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement)\n//             }\n//         });\n//         if (payload.error) {\n//             toast.error(`Payment failed ${payload.error.message}`);\n//             setProcessing(false);\n//         } else {\n//             const paymentResult = {\n//               id: payload.paymentIntent.id,\n//               status: payload.paymentIntent.status,\n//               update_time: new Date().toISOString(),\n//               email_address: payload.paymentIntent.receipt_email,\n//             };\n\n//             // Refetch order Details\n//             await payOrder({ orderId, details: paymentResult });\n//             refetch();\n\n//             setHasPaid(true);\n//             setPaymentDate(new Date().toISOString());\n//             toast.success('Payment successful');\n//             setProcessing(false);\n//         }\n//     };\n\n//     if (isLoading) return <Loader />;\n//     if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n//     return (\n//         <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid || hasPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                             <Col md={1}>\n//                                                 <Image src={item.image} alt={item.name} fluid rounded />\n//                                             </Col>\n//                                             <Col>\n//                                                 <Link to={`/product/${item.product}`}>\n//                                                     {item.name}\n//                                                 </Link>\n//                                             </Col>\n//                                             <Col md={4}>\n//                                                 {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                             </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n//                         </ListGroup.Item>\n//                     </ListGroup>\n//                 </Col>\n\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             {!order.isPaid && !hasPaid && stripe ? (\n//                                 <ListGroup.Item>\n//                                     <div style={{ marginBottom: \"20px\" }}>\n//                                         <CardElement onChange={handleChange}/>\n//                                         <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                             {processing ? \"Processing...\":\"Pay Now\"}\n//                                         </Button>\n//                                     </div>\n//                                 </ListGroup.Item>\n\n//                             ) : null}\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//         </>\n//     );\n// };\n\n// export default OrderScreen;\n\n\n\n\n\n\n\nimport { Link, useParams } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\nimport { CardElement, CardNumberElement, CardExpiryElement, CardCvcElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\n\nconst OrderScreen = () => {\n    const { id: orderId } = useParams();\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const [clientSecret, setClientSecret] = useState('');\n    const [processing, setProcessing] = useState(false);\n    const [succeeded, setSucceeded] = useState(false);\n    const [disabled, setDisabled] = useState(false);\n    const [hasPaid, setHasPaid] = useState(false);\n    const [paymentDate, setPaymentDate] = useState(null);\n\n\n    const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n    const [payOrder] = usePayOrderMutation();\n\n    const { userInfo } = useSelector((state) => state.auth);\n\n\n    useEffect(() => {\n        const createPaymentIntent = async () => {\n            try {\n                const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n                setClientSecret(data.clientSecret);\n            } catch (err) {\n                console.error(\"Error fetching client secret:\", err.message);\n            }\n        };\n        // Check if order exists and if it hasn't been paid, then create a payment intent.\n        if (order && !order.isPaid) {\n            createPaymentIntent();\n        }\n\n        // Update local state if the order is marked as paid..\n        if (order && order.isPaid) {\n            setHasPaid(true);\n            setPaymentDate(order.paidAt);\n        } \n\n    }, [order]);\n\n\n    const handleChange = async (event) => {\n        setDisabled(event.empty);\n        if (event.error) {\n            toast.error(event.error.message);\n        }\n    };\n\n    const handlePayment = async ev => {\n        ev.preventDefault();\n        setProcessing(true);\n        const payload = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: elements.getElement(CardElement),\n                billing_details: {\n                    email: userInfo.email\n                }\n            }\n        });\n        if (payload.error) {\n            toast.error(`Payment failed ${payload.error.message}`);\n            setProcessing(false);\n        } else {\n            const paymentResult = {\n              id: payload.paymentIntent.id,\n              status: payload.paymentIntent.status,\n              update_time: new Date().toISOString(),\n              email_address: payload.paymentIntent.receipt_email,\n            };\n\n            // Refetch order Details\n            await payOrder({ orderId, details: paymentResult });\n            refetch();\n\n            setHasPaid(true);\n            setPaymentDate(new Date().toISOString());\n            toast.success('Payment successful');\n            setProcessing(false);\n        }\n    };\n\n    const handleKlarnaPayment = async () => {\n        try {\n            const { data } = await axios.post('/api/config/stripe/klarna', { orderId });\n            const { sessionId } = data;\n            const { error } = await stripe.redirectToCheckout({\n                sessionId\n            });\n            if (error) {\n                toast.error(error.message);\n            }\n        } catch (err) {\n            console.error(\"Error initiating Klarna payment:\", err.message);\n        }\n    };\n\n    const CARD_ELEMENT_OPTIONS = {\n        style: {\n            base: {\n                color: '#32325d',\n                fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n                fontSmoothing: 'antialiased',\n                fontSize: '16px',\n                '::placeholder': {\n                    color: '#aab7c4',\n                },\n            },\n            invalid: {\n                color: '#fa755a',\n                iconColor: '#fa755a',\n            },\n        },\n    };\n\n\n    if (isLoading) return <Loader />;\n    if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n    return (\n        <>\n            <h1>Order {order._id}</h1>\n            <Row>\n                <Col md={8}>\n                    <ListGroup>\n                        <ListGroup.Item>\n                            <h2>Delivery</h2>\n                            <p>\n                                <strong>Name:</strong> {order.user.name}\n                            </p>\n                            <p>\n                                <strong>Email:</strong> {order.user.email}\n                            </p>\n                            <p>\n                                <strong>Address:</strong> {order.deliveryAddress.address}\n                            </p>\n                            {order.isDelivered ? (\n                                <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Delivered </Message>\n                            )}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Payment Method</h2>\n                            <p>\n                                <strong>Method:</strong>\n                                {order.paymentMethod}\n                            </p>\n                            {order.isPaid || hasPaid ? (\n                                <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Paid </Message>\n                            )}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            <ListGroup variant='flush'>\n                                {order.orderItems.map((item, index) => (\n                                    <ListGroup.Item key={index}>\n                                        <Row>\n                                            <Col md={1}>\n                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                            </Col>\n                                            <Col>\n                                                <Link to={`/product/${item.product}`}>\n                                                    {item.name}\n                                                </Link>\n                                            </Col>\n                                            <Col md={4}>\n                                                {item.qty} x ${item.price} = ${item.qty * item.price}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>SEK{order.itemsPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col>Delivery</Col>\n                                    <Col>SEK{order.deliveryPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>SEK{order.taxPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col><strong>Total</strong></Col>\n                                    <Col>SEK{order.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            {!order.isPaid && !hasPaid && stripe ? (\n                                \n                             <ListGroup.Item>\n                                <div style={{ marginBottom: \"20px\" }}>\n                                    <label>Card Number</label>\n                                    <CardNumberElement options={CARD_ELEMENT_OPTIONS} onChange={handleChange} />\n                                    <label>Expiry Date</label>\n                                    <CardExpiryElement options={CARD_ELEMENT_OPTIONS} onChange={handleChange} />\n                                    <label>CVC</label>\n                                    <CardCvcElement options={CARD_ELEMENT_OPTIONS} onChange={handleChange} />\n                                    <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n                                        {processing ? \"Processing...\" : \"Pay Now\"}\n                                    </Button>\n                                    <Button onClick={handleKlarnaPayment} style={{ marginTop: \"10px\", marginLeft: \"10px\" }}>\n                                        Pay with Klarna\n                                    </Button>\n                                </div>\n                            </ListGroup.Item>\n\n                            ) : null}\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default OrderScreen;\n\n\n\n"],"mappings":";;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA,SAASA,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,SAASC,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC1E,SAASC,WAAW,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,SAAS,EAAEC,WAAW,QAAQ,yBAAyB;AACnI,SAAS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"},"metadata":{},"sourceType":"module","externalDependencies":[]}