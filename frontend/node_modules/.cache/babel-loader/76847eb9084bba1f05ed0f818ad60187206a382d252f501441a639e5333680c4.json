{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx\",\n  _s = $RefreshSig$();\n// import { Link, useParams } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { useState, useEffect } from 'react';\n// import { useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const elements = useElements();\n\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [processing, setProcessing] = useState(false);\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [disabled, setDisabled] = useState(false);\n//     const [hasPaid, setHasPaid] = useState(false);\n//     const [paymentDate, setPaymentDate] = useState(null);\n\n//     const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n//     const [payOrder] = usePayOrderMutation();\n\n//     const { userInfo } = useSelector((state) => state.auth);\n\n//     useEffect(() => {\n//         const createPaymentIntent = async () => {\n//             try {\n//                 const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n//                 setClientSecret(data.clientSecret);\n//             } catch (err) {\n//                 console.error(\"Error fetching client secret:\", err.message);\n//             }\n//         };\n//         // Check if order exists and if it hasn't been paid, then create a payment intent.\n//         if (order && !order.isPaid) {\n//             createPaymentIntent();\n//         }\n\n//         // Update local state if the order is marked as paid..\n//         if (order && order.isPaid) {\n//             setHasPaid(true);\n//             setPaymentDate(order.paidAt);\n//         } \n\n//     }, [order]);\n\n//     const handleChange = async (event) => {\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message);\n//         }\n//     };\n\n//     const handlePayment = async ev => {\n//         ev.preventDefault();\n//         setProcessing(true);\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement)\n//             }\n//         });\n//         if (payload.error) {\n//             toast.error(`Payment failed ${payload.error.message}`);\n//             setProcessing(false);\n//         } else {\n//             const paymentResult = {\n//               id: payload.paymentIntent.id,\n//               status: payload.paymentIntent.status,\n//               update_time: new Date().toISOString(),\n//               email_address: payload.paymentIntent.receipt_email,\n//             };\n\n//             // Refetch order Details\n//             await payOrder({ orderId, details: paymentResult });\n//             refetch();\n\n//             setHasPaid(true);\n//             setPaymentDate(new Date().toISOString());\n//             toast.success('Payment successful');\n//             setProcessing(false);\n//         }\n//     };\n\n//     if (isLoading) return <Loader />;\n//     if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n//     return (\n//         <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid || hasPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                             <Col md={1}>\n//                                                 <Image src={item.image} alt={item.name} fluid rounded />\n//                                             </Col>\n//                                             <Col>\n//                                                 <Link to={`/product/${item.product}`}>\n//                                                     {item.name}\n//                                                 </Link>\n//                                             </Col>\n//                                             <Col md={4}>\n//                                                 {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                             </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n//                         </ListGroup.Item>\n//                     </ListGroup>\n//                 </Col>\n\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             {!order.isPaid && !hasPaid && stripe ? (\n//                                 <ListGroup.Item>\n//                                     <div style={{ marginBottom: \"20px\" }}>\n//                                         <CardElement onChange={handleChange}/>\n//                                         <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                             {processing ? \"Processing...\":\"Pay Now\"}\n//                                         </Button>\n//                                     </div>\n//                                 </ListGroup.Item>\n//                             ) : null}\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//         </>\n//     );\n// };\n\n// export default OrderScreen;\n\nimport { Link, useParams } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OrderScreen = () => {\n  _s();\n  const {\n    id: orderId\n  } = useParams();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [clientSecret, setClientSecret] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    data: order,\n    refetch,\n    isError,\n    isLoading\n  } = useGetOrderDetailsQuery(orderId);\n  const [payOrder] = usePayOrderMutation();\n  useEffect(() => {\n    if (order && !order.isPaid) {\n      axios.post('/api/config/stripe', {\n        amount: order.totalPrice * 100\n      }).then(response => {\n        setClientSecret(response.data.clientSecret);\n      }).catch(err => {\n        console.error(\"Error fetching client secret:\", err.message);\n        setError(\"There was an issue with the payment gateway. Please try again later.\");\n      });\n    }\n  }, [order]);\n  const handleChange = event => {\n    if (event.error) {\n      setError(event.error.message);\n    } else {\n      setError(null);\n    }\n  };\n  const handlePayment = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(PaymentElement)\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed: ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n\n      // Here you can also update the local state or make another call to ensure the order's payment status is updated.\n      await payOrder({\n        orderId,\n        details: payload.paymentIntent\n      });\n      refetch();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Order \", order._id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Delivery\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 33\n              }, this), \" \", order.user.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Email:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 33\n              }, this), \" \", order.user.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Address:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 33\n              }, this), \" \", order.deliveryAddress.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 29\n            }, this), order.isDelivered ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Delivered on \", order.deliveredAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Delivered \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Payment Method\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Method:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 33\n              }, this), order.paymentMethod]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 29\n            }, this), order.isPaid ? /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"success\",\n              children: [\"Paid on \", order.paidAt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Message, {\n              variant: \"danger\",\n              children: \"Not Paid \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Order Items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n              variant: \"flush\",\n              children: order.orderItems.map((item, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: 1,\n                    children: /*#__PURE__*/_jsxDEV(Image, {\n                      src: item.image,\n                      alt: item.name,\n                      fluid: true,\n                      rounded: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 315,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/product/${item.product}`,\n                      children: item.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 318,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: [item.qty, \" x $\", item.price, \" = $\", item.qty * item.price]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 41\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\",\n            children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Order Summary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Items\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.itemsPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Delivery\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.deliveryPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: \"Tax\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.taxPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 353,\n                    columnNumber: 42\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 353,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: [\"SEK\", order.totalPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 29\n            }, this), !order.isPaid && clientSecret && stripe ? /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  marginBottom: \"20px\"\n                },\n                children: [error && /*#__PURE__*/_jsxDEV(Message, {\n                  variant: \"danger\",\n                  children: error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 47\n                }, this), /*#__PURE__*/_jsxDEV(PaymentElement, {\n                  onChange: handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: handlePayment,\n                  disabled: processing || !stripe,\n                  style: {\n                    marginTop: \"10px\"\n                  },\n                  children: processing ? \"Processing...\" : \"Pay Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 33\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(OrderScreen, \"dyMaclTGMEAr6A2YOd+AYLGAHw8=\", false, function () {\n  return [useParams, useStripe, useElements, useGetOrderDetailsQuery, usePayOrderMutation];\n});\n_c = OrderScreen;\nexport default OrderScreen;\n\n// import { Link, useParams } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { useState, useEffect } from 'react';\n// import { useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\n// import StripePaymentForm from '../components/StripePaymentForm';\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const elements = useElements();\n\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [processing, setProcessing] = useState(false);\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [disabled, setDisabled] = useState(false);\n//     const [hasPaid, setHasPaid] = useState(false);\n//     const [paymentDate, setPaymentDate] = useState(null);\n\n//     const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n//     const [payOrder] = usePayOrderMutation();\n\n//     const { userInfo } = useSelector((state) => state.auth);\n\n//     useEffect(() => {\n//         const createPaymentIntent = async () => {\n//             try {\n//                 const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n//                 setClientSecret(data.clientSecret);\n//             } catch (err) {\n//                 console.error(\"Error fetching client secret:\", err.message);\n//             }\n//         };\n//         // Check if order exists and if it hasn't been paid, then create a payment intent.\n//         if (order && !order.isPaid) {\n//             createPaymentIntent();\n//         }\n\n//         // Update local state if the order is marked as paid..\n//         if (order && order.isPaid) {\n//             setHasPaid(true);\n//             setPaymentDate(order.paidAt);\n//         } \n\n//     }, [order]);\n\n//     // const handleChange = async (event) => {\n//     //     setDisabled(event.empty);\n//     //     if (event.error) {\n//     //         toast.error(event.error.message);\n//     //     }\n//     // };\n\n//     const handlePayment = async ev => {\n//         ev.preventDefault();\n//         setProcessing(true);\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement)\n//             }\n//         });\n//         if (payload.error) {\n//             toast.error(`Payment failed ${payload.error.message}`);\n//             setProcessing(false);\n//         } else {\n//             const paymentResult = {\n//               id: payload.paymentIntent.id,\n//               status: payload.paymentIntent.status,\n//               update_time: new Date().toISOString(),\n//               email_address: payload.paymentIntent.receipt_email,\n//             };\n\n//             // Refetch order Details\n//             await payOrder({ orderId, details: paymentResult });\n//             refetch();\n\n//             setHasPaid(true);\n//             setPaymentDate(new Date().toISOString());\n//             toast.success('Payment successful');\n//             setProcessing(false);\n//         }\n//     };\n\n//     if (isLoading) return <Loader />;\n//     if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n//     return (\n//         <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid || hasPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                             <Col md={1}>\n//                                                 <Image src={item.image} alt={item.name} fluid rounded />\n//                                             </Col>\n//                                             <Col>\n//                                                 <Link to={`/product/${item.product}`}>\n//                                                     {item.name}\n//                                                 </Link>\n//                                             </Col>\n//                                             <Col md={4}>\n//                                                 {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                             </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n//                         </ListGroup.Item>\n//                     </ListGroup>\n//                 </Col>\n\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             {!order.isPaid && !hasPaid && stripe ? (\n//                                 <ListGroup.Item>\n//                                     <StripePaymentForm  />\n//                                     <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                         {processing ? \"Processing...\":\"Pay Now\"}\n//                                     </Button>\n//                                 </ListGroup.Item>\n\n//                             ) : null}\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//         </>\n//     );\n// };\n\n// export default OrderScreen;\nvar _c;\n$RefreshReg$(_c, \"OrderScreen\");","map":{"version":3,"names":["Link","useParams","Row","Col","ListGroup","Image","Button","Card","PaymentElement","useStripe","useElements","useState","useEffect","useSelector","Message","Loader","axios","toast","useGetOrderDetailsQuery","usePayOrderMutation","jsxDEV","_jsxDEV","Fragment","_Fragment","OrderScreen","_s","id","orderId","stripe","elements","clientSecret","setClientSecret","processing","setProcessing","error","setError","data","order","refetch","isError","isLoading","payOrder","isPaid","post","amount","totalPrice","then","response","catch","err","console","message","handleChange","event","handlePayment","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","details","paymentIntent","children","_id","fileName","_jsxFileName","lineNumber","columnNumber","md","Item","user","name","email","deliveryAddress","address","isDelivered","variant","deliveredAt","paymentMethod","paidAt","orderItems","map","item","index","src","image","alt","fluid","rounded","to","product","qty","price","itemsPrice","deliveryPrice","taxPrice","style","marginBottom","onChange","onClick","disabled","marginTop","_c","$RefreshReg$"],"sources":["/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx"],"sourcesContent":["// import { Link, useParams } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { useState, useEffect } from 'react';\n// import { useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const elements = useElements();\n\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [processing, setProcessing] = useState(false);\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [disabled, setDisabled] = useState(false);\n//     const [hasPaid, setHasPaid] = useState(false);\n//     const [paymentDate, setPaymentDate] = useState(null);\n\n\n//     const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n//     const [payOrder] = usePayOrderMutation();\n\n//     const { userInfo } = useSelector((state) => state.auth);\n\n//     useEffect(() => {\n//         const createPaymentIntent = async () => {\n//             try {\n//                 const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n//                 setClientSecret(data.clientSecret);\n//             } catch (err) {\n//                 console.error(\"Error fetching client secret:\", err.message);\n//             }\n//         };\n//         // Check if order exists and if it hasn't been paid, then create a payment intent.\n//         if (order && !order.isPaid) {\n//             createPaymentIntent();\n//         }\n\n//         // Update local state if the order is marked as paid..\n//         if (order && order.isPaid) {\n//             setHasPaid(true);\n//             setPaymentDate(order.paidAt);\n//         } \n\n//     }, [order]);\n\n//     const handleChange = async (event) => {\n//         setDisabled(event.empty);\n//         if (event.error) {\n//             toast.error(event.error.message);\n//         }\n//     };\n\n//     const handlePayment = async ev => {\n//         ev.preventDefault();\n//         setProcessing(true);\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement)\n//             }\n//         });\n//         if (payload.error) {\n//             toast.error(`Payment failed ${payload.error.message}`);\n//             setProcessing(false);\n//         } else {\n//             const paymentResult = {\n//               id: payload.paymentIntent.id,\n//               status: payload.paymentIntent.status,\n//               update_time: new Date().toISOString(),\n//               email_address: payload.paymentIntent.receipt_email,\n//             };\n\n//             // Refetch order Details\n//             await payOrder({ orderId, details: paymentResult });\n//             refetch();\n\n//             setHasPaid(true);\n//             setPaymentDate(new Date().toISOString());\n//             toast.success('Payment successful');\n//             setProcessing(false);\n//         }\n//     };\n\n//     if (isLoading) return <Loader />;\n//     if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n//     return (\n//         <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid || hasPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                             <Col md={1}>\n//                                                 <Image src={item.image} alt={item.name} fluid rounded />\n//                                             </Col>\n//                                             <Col>\n//                                                 <Link to={`/product/${item.product}`}>\n//                                                     {item.name}\n//                                                 </Link>\n//                                             </Col>\n//                                             <Col md={4}>\n//                                                 {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                             </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n//                         </ListGroup.Item>\n//                     </ListGroup>\n//                 </Col>\n\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             {!order.isPaid && !hasPaid && stripe ? (\n//                                 <ListGroup.Item>\n//                                     <div style={{ marginBottom: \"20px\" }}>\n//                                         <CardElement onChange={handleChange}/>\n//                                         <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                             {processing ? \"Processing...\":\"Pay Now\"}\n//                                         </Button>\n//                                     </div>\n//                                 </ListGroup.Item>\n//                             ) : null}\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//         </>\n//     );\n// };\n\n// export default OrderScreen;\n\n\n\n\n\n\n\nimport { Link, useParams } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\n\nconst OrderScreen = () => {\n    const { id: orderId } = useParams();\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const [clientSecret, setClientSecret] = useState(null);\n    const [processing, setProcessing] = useState(false);\n    const [error, setError] = useState(null);\n\n    const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n    const [payOrder] = usePayOrderMutation();\n\n    useEffect(() => {\n        if (order && !order.isPaid) {\n            axios.post('/api/config/stripe', { amount: order.totalPrice * 100 })\n                .then(response => {\n                    setClientSecret(response.data.clientSecret);\n                })\n                .catch(err => {\n                    console.error(\"Error fetching client secret:\", err.message);\n                    setError(\"There was an issue with the payment gateway. Please try again later.\");\n                });\n        }\n    }, [order]);\n\n    const handleChange = event => {\n        if (event.error) {\n            setError(event.error.message);\n        } else {\n            setError(null);\n        }\n    };\n\n    const handlePayment = async ev => {\n        ev.preventDefault();\n        setProcessing(true);\n\n        const payload = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: elements.getElement(PaymentElement)\n            }\n        });\n\n        if (payload.error) {\n            setError(`Payment failed: ${payload.error.message}`);\n            setProcessing(false);\n        } else {\n            setError(null);\n            setProcessing(false);\n\n            // Here you can also update the local state or make another call to ensure the order's payment status is updated.\n            await payOrder({ orderId, details: payload.paymentIntent });\n            refetch();\n        }\n    };\n\n    return (\n        <>\n            <h1>Order {order._id}</h1>\n            <Row>\n                <Col md={8}>\n                    <ListGroup>\n                        <ListGroup.Item>\n                            <h2>Delivery</h2>\n                            <p>\n                                <strong>Name:</strong> {order.user.name}\n                            </p>\n                            <p>\n                                <strong>Email:</strong> {order.user.email}\n                            </p>\n                            <p>\n                                <strong>Address:</strong> {order.deliveryAddress.address}\n                            </p>\n                            {order.isDelivered ? (\n                                <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Delivered </Message>\n                            )}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Payment Method</h2>\n                            <p>\n                                <strong>Method:</strong>\n                                {order.paymentMethod}\n                            </p>\n                            {order.isPaid  ? (\n                                <Message variant=\"success\">Paid on {order.paidAt }</Message>\n                            ) : (\n                                <Message variant=\"danger\">Not Paid </Message>\n                            )}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            <ListGroup variant='flush'>\n                                {order.orderItems.map((item, index) => (\n                                    <ListGroup.Item key={index}>\n                                        <Row>\n                                            <Col md={1}>\n                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                            </Col>\n                                            <Col>\n                                                <Link to={`/product/${item.product}`}>\n                                                    {item.name}\n                                                </Link>\n                                            </Col>\n                                            <Col md={4}>\n                                                {item.qty} x ${item.price} = ${item.qty * item.price}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>SEK{order.itemsPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col>Delivery</Col>\n                                    <Col>SEK{order.deliveryPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>SEK{order.taxPrice}</Col>\n                                </Row>\n                                <Row>\n                                    <Col><strong>Total</strong></Col>\n                                    <Col>SEK{order.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            {!order.isPaid && clientSecret && stripe ? (\n                                <ListGroup.Item>\n                                <div style={{ marginBottom: \"20px\" }}>\n                                    {error && <Message variant=\"danger\">{error}</Message>}\n                                    <PaymentElement onChange={handleChange} />\n                                    <Button\n                                        onClick={handlePayment}\n                                        disabled={processing || !stripe}\n                                        style={{ marginTop: \"10px\" }}\n                                    >\n                                        {processing ? \"Processing...\" : \"Pay Now\"}\n                                    </Button>\n                                </div>\n                            </ListGroup.Item>\n                            ) : null}\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default OrderScreen;\n\n\n\n\n\n\n\n\n// import { Link, useParams } from 'react-router-dom';\n// import { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap';\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import { useState, useEffect } from 'react';\n// import { useSelector } from 'react-redux';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader';\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\n// import StripePaymentForm from '../components/StripePaymentForm';\n\n// const OrderScreen = () => {\n//     const { id: orderId } = useParams();\n//     const stripe = useStripe();\n//     const elements = useElements();\n\n//     const [clientSecret, setClientSecret] = useState('');\n//     const [processing, setProcessing] = useState(false);\n//     const [succeeded, setSucceeded] = useState(false);\n//     const [disabled, setDisabled] = useState(false);\n//     const [hasPaid, setHasPaid] = useState(false);\n//     const [paymentDate, setPaymentDate] = useState(null);\n\n\n//     const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n//     const [payOrder] = usePayOrderMutation();\n\n//     const { userInfo } = useSelector((state) => state.auth);\n\n\n//     useEffect(() => {\n//         const createPaymentIntent = async () => {\n//             try {\n//                 const { data } = await axios.post('/api/config/stripe', { amount: order.totalPrice * 100 });\n//                 setClientSecret(data.clientSecret);\n//             } catch (err) {\n//                 console.error(\"Error fetching client secret:\", err.message);\n//             }\n//         };\n//         // Check if order exists and if it hasn't been paid, then create a payment intent.\n//         if (order && !order.isPaid) {\n//             createPaymentIntent();\n//         }\n\n//         // Update local state if the order is marked as paid..\n//         if (order && order.isPaid) {\n//             setHasPaid(true);\n//             setPaymentDate(order.paidAt);\n//         } \n\n//     }, [order]);\n\n\n//     // const handleChange = async (event) => {\n//     //     setDisabled(event.empty);\n//     //     if (event.error) {\n//     //         toast.error(event.error.message);\n//     //     }\n//     // };\n\n//     const handlePayment = async ev => {\n//         ev.preventDefault();\n//         setProcessing(true);\n//         const payload = await stripe.confirmCardPayment(clientSecret, {\n//             payment_method: {\n//                 card: elements.getElement(CardElement)\n//             }\n//         });\n//         if (payload.error) {\n//             toast.error(`Payment failed ${payload.error.message}`);\n//             setProcessing(false);\n//         } else {\n//             const paymentResult = {\n//               id: payload.paymentIntent.id,\n//               status: payload.paymentIntent.status,\n//               update_time: new Date().toISOString(),\n//               email_address: payload.paymentIntent.receipt_email,\n//             };\n\n//             // Refetch order Details\n//             await payOrder({ orderId, details: paymentResult });\n//             refetch();\n\n//             setHasPaid(true);\n//             setPaymentDate(new Date().toISOString());\n//             toast.success('Payment successful');\n//             setProcessing(false);\n//         }\n//     };\n\n//     if (isLoading) return <Loader />;\n//     if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n//     return (\n//         <>\n//             <h1>Order {order._id}</h1>\n//             <Row>\n//                 <Col md={8}>\n//                     <ListGroup>\n//                         <ListGroup.Item>\n//                             <h2>Delivery</h2>\n//                             <p>\n//                                 <strong>Name:</strong> {order.user.name}\n//                             </p>\n//                             <p>\n//                                 <strong>Email:</strong> {order.user.email}\n//                             </p>\n//                             <p>\n//                                 <strong>Address:</strong> {order.deliveryAddress.address}\n//                             </p>\n//                             {order.isDelivered ? (\n//                                 <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Delivered </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Payment Method</h2>\n//                             <p>\n//                                 <strong>Method:</strong>\n//                                 {order.paymentMethod}\n//                             </p>\n//                             {order.isPaid || hasPaid ? (\n//                                 <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n//                             ) : (\n//                                 <Message variant=\"danger\">Not Paid </Message>\n//                             )}\n//                         </ListGroup.Item>\n\n//                         <ListGroup.Item>\n//                             <h2>Order Items</h2>\n//                             <ListGroup variant='flush'>\n//                                 {order.orderItems.map((item, index) => (\n//                                     <ListGroup.Item key={index}>\n//                                         <Row>\n//                                             <Col md={1}>\n//                                                 <Image src={item.image} alt={item.name} fluid rounded />\n//                                             </Col>\n//                                             <Col>\n//                                                 <Link to={`/product/${item.product}`}>\n//                                                     {item.name}\n//                                                 </Link>\n//                                             </Col>\n//                                             <Col md={4}>\n//                                                 {item.qty} x ${item.price} = ${item.qty * item.price}\n//                                             </Col>\n//                                         </Row>\n//                                     </ListGroup.Item>\n//                                 ))}\n//                             </ListGroup>\n//                         </ListGroup.Item>\n//                     </ListGroup>\n//                 </Col>\n\n//                 <Col md={4}>\n//                     <Card>\n//                         <ListGroup variant=\"flush\">\n//                             <ListGroup.Item>\n//                                 <h2>Order Summary</h2>\n//                             </ListGroup.Item>\n//                             <ListGroup.Item>\n//                                 <Row>\n//                                     <Col>Items</Col>\n//                                     <Col>SEK{order.itemsPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Delivery</Col>\n//                                     <Col>SEK{order.deliveryPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col>Tax</Col>\n//                                     <Col>SEK{order.taxPrice}</Col>\n//                                 </Row>\n//                                 <Row>\n//                                     <Col><strong>Total</strong></Col>\n//                                     <Col>SEK{order.totalPrice}</Col>\n//                                 </Row>\n//                             </ListGroup.Item>\n//                             {!order.isPaid && !hasPaid && stripe ? (\n//                                 <ListGroup.Item>\n//                                     <StripePaymentForm  />\n//                                     <Button onClick={handlePayment} disabled={processing || disabled || succeeded} style={{ marginTop: \"10px\" }}>\n//                                         {processing ? \"Processing...\":\"Pay Now\"}\n//                                     </Button>\n//                                 </ListGroup.Item>\n\n//                             ) : null}\n//                         </ListGroup>\n//                     </Card>\n//                 </Col>\n//             </Row>\n//         </>\n//     );\n// };\n\n// export default OrderScreen;\n\n\n\n\n\n\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAQA,SAASA,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,SAASC,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC1E,SAASC,cAAc,EAAEC,SAAS,EAAEC,WAAW,QAAQ,yBAAyB;AAChF,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,MAAM,MAAM,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AAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACM,CAAC,GACb,IAAI;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAAC5C,EAAA,CAnKID,WAAW;EAAA,QACWvB,SAAS,EAClBQ,SAAS,EACPC,WAAW,EAMyBQ,uBAAuB,EACzDC,mBAAmB;AAAA;AAAAqF,EAAA,GAVpChF,WAAW;AAqKjB,eAAeA,WAAW;;AAS1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}