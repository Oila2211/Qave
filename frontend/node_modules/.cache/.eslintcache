[{"/Users/mac/Afriqana/frontend/src/index.js":"1","/Users/mac/Afriqana/frontend/src/reportWebVitals.js":"2","/Users/mac/Afriqana/frontend/src/App.js":"3","/Users/mac/Afriqana/frontend/src/store.js":"4","/Users/mac/Afriqana/frontend/src/screens/ProductCatalogScreen.jsx":"5","/Users/mac/Afriqana/frontend/src/screens/HomeScreen.jsx":"6","/Users/mac/Afriqana/frontend/src/screens/ProductScreen.jsx":"7","/Users/mac/Afriqana/frontend/src/screens/DeliveryScreen.jsx":"8","/Users/mac/Afriqana/frontend/src/screens/CartScreen.jsx":"9","/Users/mac/Afriqana/frontend/src/contexts/StripeContext.js":"10","/Users/mac/Afriqana/frontend/src/screens/RegisterScreen.js":"11","/Users/mac/Afriqana/frontend/src/screens/LoginScreen.jsx":"12","/Users/mac/Afriqana/frontend/src/screens/PlaceOrderScreen.jsx":"13","/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx":"14","/Users/mac/Afriqana/frontend/src/screens/PaymentSuccess.jsx":"15","/Users/mac/Afriqana/frontend/src/screens/ProfileScreen.jsx":"16","/Users/mac/Afriqana/frontend/src/components/AdminRoute.jsx":"17","/Users/mac/Afriqana/frontend/src/components/PrivateRoute.jsx":"18","/Users/mac/Afriqana/frontend/src/screens/admin/OrderListScreen.jsx":"19","/Users/mac/Afriqana/frontend/src/screens/admin/ProductListScreen.jsx":"20","/Users/mac/Afriqana/frontend/src/screens/admin/ProductEditScreen.jsx":"21","/Users/mac/Afriqana/frontend/src/screens/admin/UserListScreen.jsx":"22","/Users/mac/Afriqana/frontend/src/screens/admin/CouponEditScreen.jsx":"23","/Users/mac/Afriqana/frontend/src/screens/admin/CouponListScreen.jsx":"24","/Users/mac/Afriqana/frontend/src/components/Header.js":"25","/Users/mac/Afriqana/frontend/src/slices/apiSlice.js":"26","/Users/mac/Afriqana/frontend/src/slices/authSlice.js":"27","/Users/mac/Afriqana/frontend/src/components/Footer.js":"28","/Users/mac/Afriqana/frontend/src/slices/stripeSlice.js":"29","/Users/mac/Afriqana/frontend/src/slices/orderSlice.js":"30","/Users/mac/Afriqana/frontend/src/slices/productsApiSlice.js":"31","/Users/mac/Afriqana/frontend/src/slices/cartSlice.js":"32","/Users/mac/Afriqana/frontend/src/slices/ordersApiSlice.js":"33","/Users/mac/Afriqana/frontend/src/slices/usersApiSlice.js":"34","/Users/mac/Afriqana/frontend/src/components/Product.jsx":"35","/Users/mac/Afriqana/frontend/src/components/Loader.jsx":"36","/Users/mac/Afriqana/frontend/src/components/Message.jsx":"37","/Users/mac/Afriqana/frontend/src/components/CheckoutSteps.jsx":"38","/Users/mac/Afriqana/frontend/src/components/FormContainer.jsx":"39","/Users/mac/Afriqana/frontend/src/components/RedeemPoints.jsx":"40","/Users/mac/Afriqana/frontend/src/components/PaymentElementScreen.jsx":"41","/Users/mac/Afriqana/frontend/src/components/ApplyCoupon.jsx":"42","/Users/mac/Afriqana/frontend/src/slices/couponApiSlice.js":"43","/Users/mac/Afriqana/frontend/src/constants.js":"44","/Users/mac/Afriqana/frontend/src/utils/cartUtils.js":"45","/Users/mac/Afriqana/frontend/src/screens/admin/RegionListScreen.jsx":"46","/Users/mac/Afriqana/frontend/src/slices/regionApiSlice.js":"47","/Users/mac/Afriqana/frontend/src/screens/admin/RegionPriceEditScreen.jsx":"48","/Users/mac/Afriqana/frontend/src/screens/admin/UserEditScreen.jsx":"49","/Users/mac/Afriqana/frontend/src/components/Paginate.jsx":"50","/Users/mac/Afriqana/frontend/src/components/ProductCarousel.jsx":"51","/Users/mac/Afriqana/frontend/src/components/Meta.jsx":"52","/Users/mac/Afriqana/frontend/src/components/FoodAnimation.jsx":"53","/Users/mac/Afriqana/frontend/src/components/HorizontalTransition.jsx":"54","/Users/mac/Afriqana/frontend/src/components/SlideTransition.jsx":"55","/Users/mac/Afriqana/frontend/src/components/FoodSwiper.jsx":"56","/Users/mac/Afriqana/frontend/src/components/SlowTransition.jsx":"57","/Users/mac/Afriqana/frontend/src/components/ModernCards.jsx":"58","/Users/mac/Afriqana/frontend/src/components/WhyChooseUs.jsx":"59","/Users/mac/Afriqana/frontend/src/screens/VeryEmailScreen.jsx":"60","/Users/mac/Afriqana/frontend/src/components/VerificationModal.jsx":"61","/Users/mac/Afriqana/frontend/src/components/HomeHeroSection.jsx":"62","/Users/mac/Afriqana/frontend/src/components/QanaPoints.jsx":"63","/Users/mac/Afriqana/frontend/src/components/ExperienceSection.jsx":"64","/Users/mac/Afriqana/frontend/src/screens/ContactScreen.jsx":"65","/Users/mac/Afriqana/frontend/src/screens/AboutScreen.jsx":"66","/Users/mac/Afriqana/frontend/src/screens/ForgotPasswordScreen.jsx":"67","/Users/mac/Afriqana/frontend/src/screens/ResetPasswordScreen.jsx":"68"},{"size":4396,"mtime":1741577409975,"results":"69","hashOfConfig":"70"},{"size":362,"mtime":1691189867573,"results":"71","hashOfConfig":"70"},{"size":3086,"mtime":1741577409936,"results":"72","hashOfConfig":"70"},{"size":700,"mtime":1741575263836,"results":"73","hashOfConfig":"70"},{"size":2279,"mtime":1741575263813,"results":"74","hashOfConfig":"70"},{"size":1470,"mtime":1741577409980,"results":"75","hashOfConfig":"70"},{"size":4297,"mtime":1693009532234,"results":"76","hashOfConfig":"70"},{"size":4078,"mtime":1741607911879,"results":"77","hashOfConfig":"70"},{"size":10225,"mtime":1741575263798,"results":"78","hashOfConfig":"70"},{"size":683,"mtime":1696633082497,"results":"79","hashOfConfig":"70"},{"size":9745,"mtime":1741577409986,"results":"80","hashOfConfig":"70"},{"size":6981,"mtime":1741577409982,"results":"81","hashOfConfig":"70"},{"size":6343,"mtime":1741580298599,"results":"82","hashOfConfig":"70"},{"size":8508,"mtime":1724147307451,"results":"83","hashOfConfig":"70"},{"size":2871,"mtime":1723854701347,"results":"84","hashOfConfig":"70"},{"size":5887,"mtime":1741580298599,"results":"85","hashOfConfig":"70"},{"size":303,"mtime":1696855510372,"results":"86","hashOfConfig":"70"},{"size":287,"mtime":1693614346050,"results":"87","hashOfConfig":"70"},{"size":2131,"mtime":1696859762348,"results":"88","hashOfConfig":"70"},{"size":7300,"mtime":1728468968479,"results":"89","hashOfConfig":"70"},{"size":5378,"mtime":1727693024018,"results":"90","hashOfConfig":"70"},{"size":2566,"mtime":1727828149685,"results":"91","hashOfConfig":"70"},{"size":3704,"mtime":1698841560744,"results":"92","hashOfConfig":"70"},{"size":4073,"mtime":1698841212474,"results":"93","hashOfConfig":"70"},{"size":4509,"mtime":1741577409963,"results":"94","hashOfConfig":"70"},{"size":322,"mtime":1741575263821,"results":"95","hashOfConfig":"70"},{"size":1297,"mtime":1741575263822,"results":"96","hashOfConfig":"70"},{"size":4280,"mtime":1741577409962,"results":"97","hashOfConfig":"70"},{"size":374,"mtime":1695978780714,"results":"98","hashOfConfig":"70"},{"size":3796,"mtime":1741580298600,"results":"99","hashOfConfig":"70"},{"size":2145,"mtime":1741575263832,"results":"100","hashOfConfig":"70"},{"size":2176,"mtime":1741580298600,"results":"101","hashOfConfig":"70"},{"size":2414,"mtime":1741575263830,"results":"102","hashOfConfig":"70"},{"size":3846,"mtime":1741577409993,"results":"103","hashOfConfig":"70"},{"size":595,"mtime":1691410613223,"results":"104","hashOfConfig":"70"},{"size":371,"mtime":1692927128134,"results":"105","hashOfConfig":"70"},{"size":228,"mtime":1692927659429,"results":"106","hashOfConfig":"70"},{"size":1379,"mtime":1693616319641,"results":"107","hashOfConfig":"70"},{"size":321,"mtime":1693316315596,"results":"108","hashOfConfig":"70"},{"size":1616,"mtime":1723737910941,"results":"109","hashOfConfig":"70"},{"size":4368,"mtime":1724151098750,"results":"110","hashOfConfig":"70"},{"size":3904,"mtime":1724146302040,"results":"111","hashOfConfig":"70"},{"size":2659,"mtime":1723564130018,"results":"112","hashOfConfig":"70"},{"size":446,"mtime":1741575263789,"results":"113","hashOfConfig":"70"},{"size":710,"mtime":1741575263839,"results":"114","hashOfConfig":"70"},{"size":3772,"mtime":1727775645808,"results":"115","hashOfConfig":"70"},{"size":1636,"mtime":1727692111369,"results":"116","hashOfConfig":"70"},{"size":5635,"mtime":1727806110913,"results":"117","hashOfConfig":"70"},{"size":3005,"mtime":1727826988054,"results":"118","hashOfConfig":"70"},{"size":716,"mtime":1728471534112,"results":"119","hashOfConfig":"70"},{"size":998,"mtime":1728472309185,"results":"120","hashOfConfig":"121"},{"size":460,"mtime":1728472194474,"results":"122","hashOfConfig":"121"},{"size":6736,"mtime":1741577409960,"results":"123","hashOfConfig":"70"},{"size":2539,"mtime":1739638997350,"results":"124","hashOfConfig":"121"},{"size":2365,"mtime":1739641737459,"results":"125","hashOfConfig":"121"},{"size":1526,"mtime":1739642842909,"results":"126","hashOfConfig":"121"},{"size":3464,"mtime":1739643462047,"results":"127","hashOfConfig":"121"},{"size":3242,"mtime":1739822312202,"results":"128","hashOfConfig":"121"},{"size":4394,"mtime":1741577409974,"results":"129","hashOfConfig":"70"},{"size":2778,"mtime":1741577409988,"results":"130","hashOfConfig":"70"},{"size":882,"mtime":1741577409973,"results":"131","hashOfConfig":"70"},{"size":2059,"mtime":1741577409965,"results":"132","hashOfConfig":"70"},{"size":2562,"mtime":1741577409967,"results":"133","hashOfConfig":"70"},{"size":1516,"mtime":1741577409960,"results":"134","hashOfConfig":"70"},{"size":7491,"mtime":1741577409977,"results":"135","hashOfConfig":"70"},{"size":2217,"mtime":1741577409977,"results":"136","hashOfConfig":"70"},{"size":1470,"mtime":1741577409979,"results":"137","hashOfConfig":"70"},{"size":1388,"mtime":1741577409987,"results":"138","hashOfConfig":"70"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nmdr9u",{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273"},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277"},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"938ql0",{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","suppressedMessages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","suppressedMessages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","suppressedMessages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","suppressedMessages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","suppressedMessages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","suppressedMessages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","suppressedMessages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","suppressedMessages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","suppressedMessages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Afriqana/frontend/src/index.js",[],[],"/Users/mac/Afriqana/frontend/src/reportWebVitals.js",[],[],"/Users/mac/Afriqana/frontend/src/App.js",[],[],"/Users/mac/Afriqana/frontend/src/store.js",["356"],[],"import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"./slices/apiSlice\";\nimport  cartSliceReducer  from './slices/cartSlice';\nimport authSliceReducer from \"./slices/authSlice\";\nimport stripeReducer from \"./slices/stripeSlice\";\nimport orderSliceReducer from \"./slices/orderSlice\";\n\nconst  store = configureStore({\n    reducer: {\n        [apiSlice.reducerPath]: apiSlice.reducer,\n        cart: cartSliceReducer,\n        auth: authSliceReducer,\n        order: orderSliceReducer,\n        stripe: stripeReducer,\n    },\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(apiSlice.middleware),\n    devTools: true,\n});\n\nexport default store;","/Users/mac/Afriqana/frontend/src/screens/ProductCatalogScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/HomeScreen.jsx",["357","358","359","360","361","362"],[],"\nimport React, { useState } from 'react';\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport FoodAnimation from '../components/FoodAnimation';\nimport WhyChooseUs from '../components/WhyChooseUs';\nimport HomeHeroSection from '../components/HomeHeroSection';\nimport QanaPoints from '../components/QanaPoints';\nimport ExperienceSection from '../components/ExperienceSection';\n\nconst HomeScreen = () => {\n  const [backgroundImage, setBackgroundImage] = useState('/images/resturant-interior.jpg');\n\n  return (\n    <>\n      <div style={{ height: '5vh'}}>\n\n      </div>\n      {/* SECTION 1: Hero */}\n      <HomeHeroSection />\n\n      {/* SECTION 2: Full width background */}\n      <section\n        className=\"py-5\"\n        style={{\n          borderRadius: '20px' \n        }}\n      >\n        <Container>\n          <FoodAnimation onChangeBackground={setBackgroundImage} />\n        </Container>\n      </section>\n\n    {/* SECTION 3: Point reward system */}\n    <QanaPoints /> {/* ✅ Now included as a component */}\n    <div style={{ height: '5vh'}}></div>\n\n    {/* SECTION 4: Menu & Dine-In Cards */}\n    <ExperienceSection /> {/* ✅ Now included as a component */}\n    <div style={{ height: '5vh'}}></div>\n\n    {/* SECTION 4: Menu & Dine-In Cards */}\n    <WhyChooseUs /> {/* ✅ Now included as a component */}\n    <div style={{ height: '5vh'}}>\n\n</div>\n\n    </>\n  );\n};\n\nexport default HomeScreen;","/Users/mac/Afriqana/frontend/src/screens/ProductScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/DeliveryScreen.jsx",["363","364","365","366"],[],"import { useState, useRef, useEffect } from \"react\"\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useUpdateUserMutation } from \"../slices/usersApiSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport FormContainer from \"../components/FormContainer\";\nimport { saveDeliveryAddress, savePhoneNumber } from \"../slices/cartSlice\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport { toast } from 'react-toastify';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { useJsApiLoader, StandaloneSearchBox } from \"@react-google-maps/api\";\n\nconst libraries = [\"places\"]\n\nconst DeliveryScreen = () => {\n\n    const { isLoaded, loadError } = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: process.env.REACT_APP_GOOGLEMAPS_API_KEY, \n        libraries,\n    });\n\n    const cart = useSelector((state) => state.cart);\n    const { userInfo } = useSelector((state) => state.auth)\n    const { deliveryAddress, phoneNumber } = cart; \n    const [address, setAddress] = useState(deliveryAddress?.address || '');\n    const [longitude, setLongitude] = useState(deliveryAddress?.longitude || '');\n    const [latitude, setLatitude] = useState(deliveryAddress?.latitude || ''); \n\n\n    const [phone, setPhone] = useState(phoneNumber || userInfo?.phoneNumber || '');\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch()\n\n\n\n    const searchBoxRef = useRef(null);\n\n    const onPlacesChanged = async () => {\n        const places = searchBoxRef.current.getPlaces();\n        const place = places[0];\n        if (place) {\n            const geocode = await getGeocode({ address: place.formatted_address });\n            const { lat, lng } = getLatLng(geocode[0]);\n    \n            setAddress(place.formatted_address);\n            setLongitude(lng); // Set longitude first\n            setLatitude(lat); // before setting lat as 2nd\n\n        }\n    };\n    \n\n\n\n    const submitHandler = async (e) => {\n        e.preventDefault();\n\n        try {\n            // // Update the user's phone number in the database\n            // await updateUser({\n            //     userId: userInfo._id, // Assuming userInfo is available from Redux\n            //     phoneNumber: phoneNumber,\n            // }).unwrap();\n\n            // Save delivery address and phone number to Redux\n            dispatch(saveDeliveryAddress({\n                address,\n                longitude,\n                latitude,\n            }));\n            dispatch(savePhoneNumber(phone));\n\n            toast.success('Phone number updated successfully');\n            navigate('/placeorder');\n        } catch (err) {\n            toast.error(err?.data?.message || 'Failed to update phone number');\n        }\n    };\n\n    if (!isLoaded) {\n        return <div>Loading...</div>;\n    }\n\n  return (\n    <FormContainer>\n    <CheckoutSteps step1 step2 />\n    <h1>Delivery</h1>\n    <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"address\" className=\"my-2\">\n            <Form.Label>Address</Form.Label>\n            <StandaloneSearchBox\n                onLoad={ref => searchBoxRef.current = ref}\n                onPlacesChanged={onPlacesChanged}\n            >\n                <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Address\"\n                    value={address}\n                    onChange={(e) => setAddress(e.target.value)}\n                />\n            </StandaloneSearchBox>\n        </Form.Group>\n\n        <Form.Group controlId=\"phoneNumber\" className=\"my-2\">\n            <Form.Label>Phone Number</Form.Label>\n            <Form.Control\n                type=\"number\"\n                placeholder=\"Enter Phone Number\"\n                value={phone}\n                onChange={(e) => setPhone(e.target.value)}\n            ></Form.Control>\n        </Form.Group>\n\n        <Button type=\"submit\" variant=\"primary\" className=\"my-2\">\n            Continue\n        </Button>\n    </Form>\n</FormContainer>\n\n)\n}\n\nexport default DeliveryScreen","/Users/mac/Afriqana/frontend/src/screens/CartScreen.jsx",["367"],[],"// import { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card, FormControl } from \"react-bootstrap\";\n// import { FaTrash } from \"react-icons/fa6\";\n// import Message from '../components/Message';\n// import { toast } from 'react-toastify';\n// import { useApplyCouponMutation } from \"../slices/couponApiSlice\";\n// import { addToCart, removeFromCart, applyCouponDiscount } from \"../slices/cartSlice\";\n\n\n// const CartScreen = () => {\n//     const navigate = useNavigate();\n//     const dispatch = useDispatch();\n//     const [couponCode, setCouponCode] = useState('')\n\n\n//     const cart = useSelector((state) => state.cart);\n//     const { cartItems, discountPercentage } = cart; // added the discountPercentage from state;\n\n//     const [applyCoupon] = useApplyCouponMutation();\n\n//     const addToCartHandler = async (product, qty) => {\n//         dispatch(addToCart({...product, qty}))\n//     };\n\n//     const removeFromCartHandler = async (id) => {\n//         dispatch(removeFromCart(id))\n//     };\n\n//     const addCouponHandler = async () => {\n//         try {\n//             await applyCoupon(couponCode);\n//             toast.success(`Coupon applied successfully! ${discountPercentage}% off your total!`);\n//             dispatch(applyCouponDiscount(discountPercentage))\n//         } catch (error) {\n//             if (error.data && error.data.message) {\n//                 toast.error(`Coupon Error: ${error.data.message}`);\n//             } else {\n//                 toast.error('Coupon Error: Unexpected error occurred.');\n//             }\n//         }\n//     }\n\n//     const checkoutHandler = () => {\n//         navigate('/login?redirect=/delivery'); \n//     }\n\n//     const maxOrderQuantity = 10; // Adjust qty number as pleased...\n\n\n//     const subtotal = cartItems.reduce((acc, item) => acc + Number(item.qty) * Number(item.price), 0);\n//     const discountedTotal = subtotal * ((100 - Number(discountPercentage)) / 100); // Calculate the new total after applying discount\n\n//     console.log(\"Discount Percentage:\", discountPercentage);\n//     console.log(\"Raw Items Price:\", subtotal); // renamed from rawItemsPrice to subtotal for clarity\n//     console.log(\"Discount Amount:\", subtotal - discountedTotal);\n//   return (\n//     <Row>\n//         <Col md={8}>\n//             <h1 style={{marginBottom: '20px'}}>Shopping Cart</h1>\n//             {cartItems.length === 0 ? (\n//                 <Message>\n//                     Your Cart is empty <Link to='/'>Go Back</Link>\n//                 </Message>\n//             ) : (\n//                 <ListGroup variant=\"flush\">\n//                     {cartItems.map((item) => (\n//                         <ListGroup.Item key={item._id}>\n//                             <Row>\n//                                 <Col md={2}>\n//                                     <Image src={item.Image} alt={item.name} fluid rounded />\n//                                 </Col>\n//                                 <Col md={3}>\n//                                     <Link to={`/product/${item._id}`}>{item.name}</Link>\n//                                 </Col>\n//                                 <Col>{item.price}</Col>\n//                                 <Col md={2}>\n//                                 <FormControl\n//                                     as='select'\n//                                     value={item.qty}\n//                                     onChange={(e) => addToCartHandler(item, Number(e.target.value))}>\n//                                     {[...Array(maxOrderQuantity).keys()].map(x => (\n//                                         <option key={x + 1} value={x + 1}>\n//                                             {x + 1}\n//                                         </option>\n//                                     ))}\n//                                 </FormControl>\n//                                 </Col>\n//                                 <Col md={2}>\n//                                     <Button type=\"button\" variant=\"light\" onClick={ () =>\n//                                     removeFromCartHandler(item._id)}>\n//                                         <FaTrash/>\n//                                     </Button>\n//                                 </Col>\n//                             </Row>\n//                         </ListGroup.Item>\n//                     ))}\n//                 </ListGroup>\n//             ) }\n//         </Col>\n//         <Col md={4}>\n//             <Card>\n//                 <ListGroup variant=\"flush\">\n//                     <ListGroup.Item>\n//                         <ListGroup.Item>\n//                             <Form.Control \n//                               type=\"text\"\n//                               placeholder=\"Enter coupon code\"\n//                               value={couponCode}\n//                               onChange={(e) => setCouponCode(e.target.value)}\n//                             />\n//                             <Button onClick={addCouponHandler}>\n//                                 Apply Coupon\n//                             </Button>\n//                         </ListGroup.Item>\n//                         { discountPercentage > 0 && \n//                           <span>Discount applied: {discountPercentage}%</span>\n//                         }\n//                         <h2>\n//                             {/* Subtotal ({ cartItems.reduce((acc, item) => acc + item.qty, 0)}) */}\n//                             Subtotal{subtotal}\n//                             items\n//                         </h2>\n//                         SEK{ discountedTotal.toFixed(2)}\n//                     </ListGroup.Item>\n//                     <ListGroup.Item>\n//                         <Button type=\"button\" className=\"btn-block\"\n//                          disabled={cartItems.length === 0}\n//                          onClick={checkoutHandler}>\n//                             Proceed To CheckOut\n//                         </Button>\n//                     </ListGroup.Item>\n//                 </ListGroup>\n//             </Card>\n//         </Col>\n//     </Row>\n//   )\n// }\n\n// export default CartScreen;\n\n\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row, Col, ListGroup, Image, Form, Button, Card, FormControl } from \"react-bootstrap\";\nimport { FaTrash } from \"react-icons/fa6\";\nimport Message from '../components/Message'\nimport { addToCart, removeFromCart } from \"../slices/cartSlice\";\nimport { resetOrderValues } from \"../slices/orderSlice\";\n\nconst CartScreen = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n\n    const cart = useSelector((state) => state.cart);\n    const { cartItems } = cart;\n\n    const addToCartHandler = async (product, qty) => {\n        dispatch(addToCart({...product, qty}))\n    };\n\n    const removeFromCartHandler = async (id) => {\n        dispatch(removeFromCart(id))\n    };\n\n    const checkoutHandler = () => {\n        dispatch(resetOrderValues())\n        navigate('/login?redirect=/delivery');\n    }\n\n    const maxOrderQuantity = 10; // Adjust qty number as pleased...\n  return (\n    <Row>\n        <Col md={8}>\n            <h1 style={{marginBottom: '20px'}}>Shopping Cart</h1>\n            {cartItems.length === 0 ? (\n                <Message>\n                    Your Cart is empty <Link to='/'>Go Back</Link>\n                </Message>\n            ) : (\n                <ListGroup variant=\"flush\">\n                    {cartItems.map((item) => (\n                        <ListGroup.Item key={item._id}>\n                            <Row>\n                                <Col md={2}>\n                                    <Image src={item.Image} alt={item.name} fluid rounded />\n                                </Col>\n                                <Col md={3}>\n                                    <Link to={`/product/${item._id}`}>{item.name}</Link>\n                                </Col>\n                                <Col>{item.price}</Col>\n                                <Col md={2}>\n                                <FormControl\n                                    as='select'\n                                    value={item.qty}\n                                    onChange={(e) => addToCartHandler(item, Number(e.target.value))}>\n                                    {[...Array(maxOrderQuantity).keys()].map(x => (\n                                        <option key={x + 1} value={x + 1}>\n                                            {x + 1}\n                                        </option>\n                                    ))}\n                                </FormControl>\n                                </Col>\n                                <Col md={2}>\n                                    <Button type=\"button\" variant=\"light\" onClick={ () =>\n                                    removeFromCartHandler(item._id)}>\n                                        <FaTrash/>\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n                    ))}\n                </ListGroup>\n            ) }\n        </Col>\n        <Col md={4}>\n            <Card>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <h2>\n                            Subtotal ({ cartItems.reduce((acc, item) => acc + item.qty, 0)})\n                            items\n                        </h2>\n                        SEK{ cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2) }\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <Button type=\"button\" className=\"btn-block\"\n                         disabled={cartItems.length === 0}\n                         onClick={checkoutHandler}>\n                            Proceed To CheckOut\n                        </Button>\n                    </ListGroup.Item>\n                </ListGroup>\n            </Card>\n        </Col>\n    </Row>\n  )\n}\n\nexport default CartScreen;","/Users/mac/Afriqana/frontend/src/contexts/StripeContext.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/RegisterScreen.js",["368","369"],[],"// import { useState, useEffect } from \"react\";\n// import { Link, useLocation, useNavigate } from \"react-router-dom\";\n// import { Form, Button, Row, Col } from 'react-bootstrap';\n// import { useDispatch, useSelector } from \"react-redux\";\n// import FormContainer from \"../components/FormContainer\";\n// import Loader from \"../components/Loader\";\n// import { useRegisterMutation } from \"../slices/usersApiSlice\";\n// import { setCredentials } from \"../slices/authSlice\";\n// import VerificationModal from \"../components/VerificationModal\";\n// import { toast } from 'react-toastify';\n\n\n// const RegisterScreen = () => {\n//     const [name, setName] = useState('')\n//     const [email, setEmail] = useState('')\n//     const [password, setPassword] = useState('')\n//     const [confirmPassword, setConfirmPassword] = useState('')\n//     const [showModal, setShowModal] = useState(false);\n\n//     // const dispatch = useDispatch();\n//     const navigate = useNavigate();\n\n//     const [register, { isLoading }] = useRegisterMutation();\n\n//     const { userInfo } = useSelector((state) => state.auth);\n\n//     const { search } = useLocation();\n//     const sp = new URLSearchParams(search);\n//     const redirect = sp.get('redirect') || '/';\n\n//     // useEffect(() => {\n//     //     if (userInfo) {\n//     //         navigate(redirect);\n//     //     }\n//     // }, [navigate, redirect, userInfo]);\n\n//     const submitHandler = async(e) => {\n//         e.preventDefault();\n//         if (password !== confirmPassword) {\n//             toast.error('Password do not match');\n//             return;\n//         } else {\n//             try {\n//                 // Call the register mutation\n//                 await register({ name, email, password }).unwrap\n//                 setShowModal(true)\n//                 // const res = await register({ name, email, password }).unwrap();\n//                 // dispatch(setCredentials({...res  })); // { token, user }\n//             } catch (err) {\n//                 console.log(err);\n//                 toast.error(err?.data?.message || err.error)\n//             }\n//         }\n\n//     }\n\n//     const handleGoToLogin = () => {\n//         setShowModal(false); // Close the modal\n//         navigate('/login'); // Navigate to the login page\n//     };    \n\n//   return (\n//     <FormContainer>\n//         <h1>Sign Up</h1>\n\n//         <Form onSubmit={submitHandler}>\n//             <Form.Group controlId=\"name\" className=\"my-3\">\n//                 <Form.Label>Name</Form.Label>\n//                 <Form.Control\n//                     type=\"text\"\n//                     placeholder=\"Enter name\"\n//                     value={name}\n//                     onChange={(e) => setName(e.target.value)}\n//                 ></Form.Control>\n//             </Form.Group>\n\n//             <Form.Group controlId=\"email\" className=\"my-3\">\n//                 <Form.Label>Email</Form.Label>\n//                 <Form.Control\n//                     type=\"email\"\n//                     placeholder=\"Enter email\"\n//                     value={email}\n//                     onChange={(e) => setEmail(e.target.value)}\n//                 ></Form.Control>\n//             </Form.Group>\n\n//             <Form.Group controlId=\"password\" className=\"my-3\">\n//                 <Form.Label>password</Form.Label>\n//                 <Form.Control\n//                     type=\"password\"\n//                     placeholder=\"Enter Password\"\n//                     value={password}\n//                     onChange={(e) => setPassword(e.target.value)}\n//                 ></Form.Control>\n//             </Form.Group>\n\n//             <Form.Group controlId=\"confirmPassword\" className=\"my-3\">\n//                 <Form.Label>Confirm password</Form.Label>\n//                 <Form.Control\n//                     type=\"password\"\n//                     placeholder=\"Confirm Password\"\n//                     value={confirmPassword}\n//                     onChange={(e) => setConfirmPassword(e.target.value)}\n//                 ></Form.Control>\n//             </Form.Group>\n\n//             <Button type=\"submit\" variant=\"primary\" className=\"mt-2\"\n//             disabled={isLoading}>\n//                 Register\n//             </Button>\n\n//             { isLoading && <Loader /> }\n//         </Form>\n\n//         <Row>\n//             <Col>\n//                 Already have an account? <Link to={ redirect ? `/login?redirect=${redirect}` : '/login' }>Login</Link>\n//             </Col>\n//         </Row>\n//         <VerificationModal\n//             show={showModal}\n//             onHide={() => setShowModal(false)}\n//             onGoToLogin={handleGoToLogin}\n//         />        \n//     </FormContainer>\n//   )\n// }\n\n// export default RegisterScreen\n\n\n\n\nimport { useState, useEffect } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { Form, Button, Row, Col, Container, Card } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useRegisterMutation } from \"../slices/usersApiSlice\";\nimport { setCredentials } from \"../slices/authSlice\";\nimport { toast } from \"react-toastify\";\nimport Loader from \"../components/Loader\";\nimport VerificationModal from \"../components/VerificationModal\";\nimport { FcGoogle } from \"react-icons/fc\"; // Google Icon\nimport \"../assets/styles/Register.css\"; // Import CSS\n\nconst RegisterScreen = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n\n  const navigate = useNavigate();\n  const [register, { isLoading }] = useRegisterMutation();\n  const { userInfo } = useSelector((state) => state.auth);\n\n  const { search } = useLocation();\n  const sp = new URLSearchParams(search);\n  const redirect = sp.get(\"redirect\") || \"/\";\n\n  useEffect(() => {\n    if (userInfo) {\n      navigate(redirect);\n    }\n  }, [navigate, redirect, userInfo]);\n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      toast.error(\"Passwords do not match\");\n      return;\n    }\n\n    try {\n      await register({ name, email, password }).unwrap();\n      setShowModal(true);\n    } catch (err) {\n      toast.error(err?.data?.message || err.error);\n    }\n  };\n\n  const handleGoToLogin = () => {\n    setShowModal(false);\n    navigate(\"/login\");\n  };\n\n  return (\n    <Container fluid className=\"register-container\">\n      <Row className=\"register-row\">\n        {/* Left Side (Welcome Section) */}\n        <Col md={6} className=\"welcome-section\">\n          <div className=\"welcome-text\">\n            <h1>Join Us!</h1>\n            <p>Sign up and explore the best of African flavors.</p>\n          </div>\n        </Col>\n\n        {/* Right Side (Register Form) */}\n        <Col md={6} className=\"register-form-container\">\n          <Card className=\"register-card\">\n            <Card.Body>\n              <h2 className=\"text-center mb-4\">Sign Up</h2>\n              <p className=\"text-center text-muted\">Create an account to get started.</p>\n\n              <Form onSubmit={submitHandler}>\n                <Form.Group controlId=\"name\" className=\"mb-3\">\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"email\" className=\"mb-3\">\n                  <Form.Label>Email</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"password\" className=\"mb-3\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Enter password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"confirmPassword\" className=\"mb-3\">\n                  <Form.Label>Confirm Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Confirm password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                  />\n                </Form.Group>\n\n                <Button type=\"submit\" className=\"register-btn mt-3\" disabled={isLoading}>\n                  Register\n                </Button>\n\n                {/* Google Sign-Up Button */}\n                <Button className=\"google-btn mt-2\">\n                  <FcGoogle size={20} className=\"me-2\" /> Sign up with Google\n                </Button>\n\n                {isLoading && <Loader />}\n              </Form>\n\n              <div className=\"text-center mt-3\">\n                <p>\n                  Already have an account?{\" \"}\n                  <Link to={redirect ? `/login?redirect=${redirect}` : \"/login\"} className=\"login-link\">\n                    Login\n                  </Link>\n                </p>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Verification Modal */}\n      <VerificationModal show={showModal} onHide={() => setShowModal(false)} onGoToLogin={handleGoToLogin} />\n    </Container>\n  );\n};\n\nexport default RegisterScreen;\n","/Users/mac/Afriqana/frontend/src/screens/LoginScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/PlaceOrderScreen.jsx",["370","371"],[],"import { useEffect } from \"react\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader'\nimport { useCreateOrderMutation } from '../slices/ordersApiSlice';\nimport { setOrderId, setOrderValues } from \"../slices/orderSlice\";\nimport { clearCartItems } from '../slices/cartSlice';\n\n\nconst PlaceOrderScreens = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const cart = useSelector((state) => state.cart);\n\n  const [createOrder, {isLoading, error}] = useCreateOrderMutation();\n\n  const orderDetails = useSelector((state) => state.order.orderPrices);\n\n\n  // const order = useSelector((state) => state.order); // Get the order state from Redux\n\n\n  useEffect(() => {\n    if (!cart.deliveryAddress.address) {\n      navigate('/delivery');\n    } else if (!cart.paymentMethod) {\n      navigate('/payment')\n    }\n  }, [cart.paymentMethod, cart.deliveryAddress.address, navigate])\n\n\n  const placeOrderHandler = async () => {\n    try {\n\n      console.log(\"Order Details:\", {\n        orderItems: cart.cartItems,\n        deliveryAddress: cart.deliveryAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        deliveryPrice: cart.deliveryPrice,\n        phoneNumber: cart.phoneNumber || \"\",\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice\n    });\n\n\n\n      const res = await createOrder({\n        orderItems: cart.cartItems,\n        deliveryAddress: cart.deliveryAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        deliveryPrice: cart.deliveryPrice,\n        phoneNumber: cart.phoneNumber || \"\",\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice\n      }).unwrap();\n      \n      \n      if (res && res.createdOrder && res.createdOrder._id) {\n\n       // Dispatch order details to Redux\n       dispatch(setOrderValues({\n        itemsPrice: res.createdOrder.itemsPrice,\n        deliveryPrice: res.createdOrder.deliveryPrice,\n        taxPrice: res.createdOrder.taxPrice,\n        totalPrice: res.createdOrder.totalPrice,\n        discountAmount: res.createdOrder.discountAmount || 0, // Assuming this exists\n      }));\n\n         // Dispatch orderId to Redux\n         dispatch(setOrderId(res.createdOrder._id));\n         dispatch(clearCartItems());\n         navigate(`/order/${res.createdOrder._id}`); \n      } else {\n        toast.error(\"Order ID not found in the response\")\n      }\n    } catch (err) {\n        console.log(\"Error objecr\", err);\n        // Checking if error is related to no delivery to the region.\n        if (err.status === 400 && err.data.error == 'Delivery not available for this location') {\n          toast.error('Delivery Not available for this location');\n        } else {\n          toast.error(err?.data?.error || 'Failed to place order. Please try again.')\n      }\n    }\n  }\n\n  return (<>\n    <CheckoutSteps step1 step2 step3 step4 />\n    <Row>\n      <Col md={8}>\n        <ListGroup variant=\"flush\">\n          <ListGroup.Item>\n            <h2>Delivery</h2>\n            <p>\n              <strong>Address</strong>\n              {cart.deliveryAddress.address}, \n            </p>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <h2>Payment Method</h2>\n            <strong>Method: </strong>\n            {cart.paymentMethod}\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <h2>Order Items</h2>\n            {cart.cartItems.length === 0 ? (\n              <Message>Your cart is empty</Message>\n            ) : (\n              <ListGroup variant=\"flush\">\n                {cart.cartItems.map((item, index) =>(\n                  <ListGroup.Item key={index}>\n                    <Row>\n                      <Col md={1}>\n                        <Image \n                          src={item.image}\n                          alt={item.name}\n                          fluid\n                          rounded\n                        />\n                      </Col>\n                      <Col>\n                        <Link to={`/products/${item.product}`}>\n                          {item.name}\n                        </Link>\n                      </Col>\n                      <Col md={4}>\n                        { item.qty } x SEK{ item.price } = SEK{ item.qty * item.price }\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                ) )}\n              </ListGroup>\n            )}\n          </ListGroup.Item>\n        </ListGroup>\n      </Col>\n      <Col md={4}>\n        <Card>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>\n              <h2>Order Summary</h2>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Row>\n                <Col>Items:</Col>\n                <Col>SEK{cart.itemsPrice}</Col>\n              </Row>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Row>\n                <Col>Delivery:</Col>\n                <Col>SEK{cart.deliveryPrice}</Col>\n              </Row>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Row>\n                <Col>Tax:</Col>\n                <Col>SEK{cart.taxPrice}</Col>\n              </Row>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Row>\n                <Col><strong>Total</strong></Col>\n                <Col>SEK{cart.totalPrice}</Col>\n              </Row>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              {error && <Message variant='danger'>{error.data ? error.data.message : \"An error occurred\"}</Message>}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <Button\n                type=\"button\"\n                className=\"btn-block\"\n                disabled={cart.cartItems.length === 0}\n                onClick={placeOrderHandler}\n              >\n                Place Order\n              </Button>\n              {isLoading && <Loader />}\n            </ListGroup.Item>\n          </ListGroup>\n        </Card>\n      </Col>\n    </Row>\n    </>\n  )\n}\n\nexport default PlaceOrderScreens\n\n","/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx",["372","373","374"],[],"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector} from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { toast } from 'react-toastify';\nimport { Elements } from '@stripe/react-stripe-js';\nimport PaymentElementScreen from '../components/PaymentElementScreen';\nimport ApplyCoupon from '../components/ApplyCoupon';\nimport { useStripePromise } from '../contexts/StripeContext';\nimport { useGetOrderDetailsQuery, useCreatePaymentIntentMutation, useDeliverOrderMutation } from '../slices/ordersApiSlice';\nimport RedeemPoints from '../components/RedeemPoints';\nimport { setOrderValues, finalizeOrder, setOrderId } from \"../slices/orderSlice\";\n\n\nconst OrderScreen = () => {\n\n  const [clientSecret, setClientSecret] = useState('');\n  \n  // Selector to get orderId and orderPricesfrom Redux\n  const orderId = useSelector((state) => state.order.orderId);\n  const orderPrices = useSelector((state) => state.order.orderPrices);\n\n  const [hasPaid, setHasPaid] = useState(false);\n  const [paymentDate, setPaymentDate] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  const stripePromise = useStripePromise()\n  const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n  const [createPaymentIntent] = useCreatePaymentIntentMutation();\n  const { userInfo } = useSelector((state) => state.auth);\n  const [deliverOrder, {isLoading: loadingDeliver }] = \n  useDeliverOrderMutation();\n\n  const markAsPaid = () => {\n    setHasPaid(true);\n    setPaymentDate(new Date().toISOString());\n  };\n\n\n  useEffect(() => {\n    if (!orderId) {\n        // If orderId is not in Redux state, retrieve it from localStorage\n        const storedOrderId = localStorage.getItem('orderId');\n        if (storedOrderId) {\n            dispatch(setOrderId(storedOrderId));\n        } else {\n            toast.error('Order ID not found. Redirecting to home.');\n            navigate('/');\n        }\n    }\n  }, [orderId, dispatch, navigate]);\n\n\n  useEffect(() => {\n    console.log(\"my stripe promise is:\", stripePromise)\n    if (order && !order.isPaid) {\n      createPaymentIntent({ amount: order.totalPrice * 100 })\n        .unwrap()\n        .then((data) => {\n          setClientSecret(data.clientSecret);\n        })\n        .catch((err) => {\n          console.error(\"Error fetching client secret:\", err.message);\n        });\n    }\n  }, [order, createPaymentIntent]);\n\n  useEffect(() => {\n    // Set initial values when the component mounts\n    if (order) {\n        dispatch(setOrderValues({\n        itemsPrice: order.itemsPrice,\n        deliveryPrice: order.deliveryPrice,\n        taxPrice: order.taxPrice,\n        totalPrice: order.totalPrice,\n        discountAmount: 0,\n        isFinalized: false,\n        } \n        ));\n    } \n  }, [orderId, dispatch]);\n  \n  \n\n\n  const deliverOrderHandler = async () => {\n    try {\n      await deliverOrder(orderId);\n      refetch();\n      toast.success('Order delivered')\n    } catch (err) {\n      toast.error(err?.data?.message || err?.message)\n    }\n  }\n\n\n  if (isLoading) return <Loader />;\n  if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n  const appearance = {\n    theme: 'stripe',\n  };\n  const options = {\n    clientSecret,\n    appearance,\n  };\n\n\n\n  return (\n    <>\n\n    <h2>Order {order._id}</h2>\n    <Row>\n        <Col md={8}>\n            <ListGroup>\n                <ListGroup.Item>\n                    <h3>Delivery</h3>\n                    <p>\n                        <strong>Name:</strong> {order.user.name}\n                    </p>\n                    <p>\n                        <strong>Email:</strong> {order.user.email}\n                    </p>\n                    <p>\n                        <strong>Address:</strong> {order.deliveryAddress.address}\n                    </p>\n                    {order.isDelivered ? (\n                        <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                    ) : (\n                        <Message variant=\"danger\">Not Delivered </Message>\n                    )}\n                </ListGroup.Item>\n\n                <RedeemPoints />\n\n                <ListGroup.Item>\n                    <h3>Payment Status</h3>\n                    {/* <p>\n                        <strong>Method:</strong>\n                        {order.paymentMethod}\n                    </p> */}\n                    {order.isPaid || hasPaid ? (\n                        <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n                    ) : (\n                        <Message variant=\"danger\">Not Paid </Message>\n                    )}\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                    <h2>Order Items</h2>\n                    <ListGroup variant='flush'>\n                        {order.orderItems.map((item, index) => (\n                            <ListGroup.Item key={index}>\n                                <Row>\n                                    <Col md={1}>\n                                        <Image src={item.image} alt={item.name} fluid rounded />\n                                    </Col>\n                                    <Col>\n                                        <Link to={`/product/${item.product}`}>\n                                            {item.name}\n                                        </Link>\n                                    </Col>\n                                    <Col md={4}>\n                                        {item.qty} x ${item.price} = ${item.qty * item.price}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        ))}\n                    </ListGroup>\n                </ListGroup.Item>\n            </ListGroup>\n        </Col>\n\n        <Col md={4}>\n            <Card>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <h3>Order Summary</h3>\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <Row>\n                            <Col>Items</Col>\n                            <Col>SEK{orderPrices.itemsPrice}</Col>\n                        </Row>\n                        <Row>\n                            <Col>Discount</Col>\n                            <Col>SEK{orderPrices.discountAmount}</Col>\n                        </Row>\n                        <Row>\n                            <Col>Delivery</Col>\n                            <Col>SEK{orderPrices.deliveryPrice}</Col>\n                        </Row>\n                        <Row>\n                            <Col>Tax</Col>\n                            <Col>SEK{orderPrices.taxPrice}</Col>\n                        </Row>\n                        <Row>\n                            <Col><strong>Total</strong></Col>\n                            <Col>SEK{orderPrices.totalPrice}</Col>\n                        </Row>\n                    </ListGroup.Item>\n                    \n                    {(!order.isPaid && !hasPaid && clientSecret && stripePromise ) ? (\n                        <ListGroup.Item>\n                           <Elements options={options} stripe={stripePromise}>\n                            <PaymentElementScreen markAsPaid={markAsPaid} clientSecret={clientSecret}/>\n                            </Elements>\n                        </ListGroup.Item>\n                    ) : (\n                        <p>Payment already made </p>\n                    )}\n\n                    {loadingDeliver && <Loader />}\n\n                    <ListGroup.Item>\n                        <ApplyCoupon />\n                    </ListGroup.Item>\n\n                    {userInfo && userInfo.isAdmin && order.isPaid &&\n                    !order.isDelivered && (\n                      <ListGroup.Item>\n                        <Button \n                         type='button'\n                         className='btn btn-block'\n                         onClick={deliverOrderHandler}\n                        >\n                            Mark as Delivered\n                        </Button>\n                      </ListGroup.Item>\n                    )}\n\n                    \n                </ListGroup>\n            </Card>\n        </Col>\n    </Row>\n</>\n\n  );\n};\n\nexport default OrderScreen;","/Users/mac/Afriqana/frontend/src/screens/PaymentSuccess.jsx",["375","376","377","378","379","380"],[],"import React, { useEffect } from 'react';\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport { updateUserInfoAfterPayment } from '../slices/authSlice';\nimport { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\nimport { resetOrderValues } from '../slices/orderSlice';\nimport { toast } from 'react-toastify';\nimport { useStripePromise } from '../contexts/StripeContext';\n\nconst PaymentSuccess = () => {\n\n    const orderId = useSelector((state) => state.order.orderId);  // Use Redux state for orderId\n    const dispatch = useDispatch();\n    \n    const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n    const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\n    const stripe = useStripePromise()\n\n    useEffect(() => {\n        \n        if (!stripe) return;\n\n        const url = new URL(window.location);\n        const clientSecret = url.searchParams.get('payment_intent_client_secret');\n        const fetchPaymentIntent = async () => {\n          const { paymentIntent, error: retrieveError } = await stripe.retrievePaymentIntent(clientSecret);\n            \n          if (retrieveError) {\n              toast.error(`Error retrieving payment details: ${retrieveError.message}`);\n              return;\n            };   \n          \n              const details = {\n                  id: paymentIntent.id,\n                  status: paymentIntent.status,\n                  update_time: new Date().toISOString(),\n                  email_address: paymentIntent.receipt_email,\n              };\n              \n              await payOrder({ orderId, details});\n              // markAsPaid(orderId)\n              toast.success('Order is Paid')\n\n              // Reset orderId after successful payment\n              dispatch(resetOrderValues());\n              // dispatch(resetOrderId())\n          } \n          refetch()\n    \n        fetchPaymentIntent();\n        \n    }, [stripe, payOrder, refetch, orderId, dispatch]);\n\n      \n\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col xs={12} md={6}>\n          <Card>\n            <Card.Body>\n              <Card.Title className=\"text-center\">\n                <h2>Payment Successful!</h2>\n              </Card.Title>\n              <Card.Text className=\"text-center\">\n                Your payment has been successfully processed.\n              </Card.Text>\n              <div className=\"d-flex justify-content-center\">\n                <Link to=\"/\">\n                  <Button variant=\"primary\">Go to Home</Button>\n                </Link>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default PaymentSuccess;\n","/Users/mac/Afriqana/frontend/src/screens/ProfileScreen.jsx",["381","382"],[],"import React, { useEffect, useState } from 'react';\nimport { Table, Form, Button, Row, Col } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaTimes } from 'react-icons/fa';\n\nimport { toast } from 'react-toastify';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { useProfileMutation, useCurrentUserDetailsQuery } from '../slices/usersApiSlice';\nimport { useGetMyOrdersQuery } from '../slices/ordersApiSlice';\nimport { setCredentials } from '../slices/authSlice';\n\n\n\nconst ProfileScreen = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(userInfo?.phoneNumber || \"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [updateProfile, {isLoading: loadingUpdateProfile}] = useProfileMutation();\n  const { refetch: refetchUser } = useCurrentUserDetailsQuery();\n\n  const dispatch = useDispatch();\n\n  const { userInfo } = useSelector((state) => state.auth)\n\n  const { data: orders, isLoading, error } = useGetMyOrdersQuery();\n\n  useEffect(() => {\n    if (userInfo) { \n      setName(userInfo.name)\n      setEmail(userInfo.email)\n      setPhoneNumber(userInfo.phoneNumber || \"\");\n    }\n  }, [userInfo, userInfo.name, userInfo.email])\n\n  useEffect(() => {\n    // Call refetchUser when the component mounts\n    refetchUser();\n  }, []);  \n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword)  {\n      toast.error('Password do not match')\n    } else {\n      try {\n        const res = await updateProfile({ _id:userInfo._id, \n          name, email, password, phoneNumber }).unwrap();\n          dispatch(setCredentials(res))\n          toast.success('Profile updated successfully')\n      } catch (err) {\n        toast.error(err?.data.message || err?.error );\n      }\n    }\n  }\n\n\n  return (\n    <Row>\n      <Col md={3}>\n        <h2>User Profile</h2>\n        <p className='text-primary'><strong>Qana Points:</strong> {userInfo.qanaPoints}</p>\n        <Form onSubmit={submitHandler}>\n          <Form.Group className='my-2' controlId='name'>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter name'\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='email'>\n            <Form.Label>Email Address</Form.Label>\n            <Form.Control\n              type='email'\n              placeholder='Enter email'\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='phoneNumber'>\n            <Form.Label>Phone Number</Form.Label>\n            <Form.Control\n                type='text'\n                placeholder='Enter phone number'\n                value={phoneNumber}\n                onChange={(e) => setPhoneNumber(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='password'>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type='password'\n              placeholder='Enter password'\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='confirmPassword'>\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type='password'\n              placeholder='Confirm password'\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Button type='submit' variant='primary'>\n            Update\n          </Button>\n          {loadingUpdateProfile && <Loader />}\n        </Form>\n\n      </Col>\n\n      <Col md={9}>\n        <h2>My Orders</h2>\n        {isLoading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant='danger'>\n            {error?.data?.message || error.error}\n          </Message>\n        ) : (\n          <Table striped hover responsive className='table-sm'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>{order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt.substring(0, 10)\n                    ) : (\n                      <FaTimes style={{ color: 'red' }} />\n                    )}\n                  </td>\n                  <td>\n                    {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                    ) : (\n                      <FaTimes style={{ color: 'red' }} />\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button className='btn-sm' variant='light'>\n                        Details\n                      </Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Col>\n    </Row>\n  )\n}\n\nexport default ProfileScreen","/Users/mac/Afriqana/frontend/src/components/AdminRoute.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/PrivateRoute.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/OrderListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/ProductListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/ProductEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/UserListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/CouponEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/CouponListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Header.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/apiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/authSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/components/Footer.js",["383"],[],"import React from 'react'\nimport { Container, Row, Col, Nav } from 'react-bootstrap';\nimport { FaFacebook, FaInstagram, FaTwitter, FaCcVisa, FaCcMastercard,  } from \"react-icons/fa\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { SiKlarna } from \"react-icons/si\";\nimport { TbCurrencySwedishKrona } from \"react-icons/tb\"; // Swish (represented by SEK icon)\nimport \"../assets/styles/Footer.css\"; \n\nconst Footer = () => {\n    const currentYear = new Date().getFullYear()\n  return (\n    <footer style={{ backgroundColor: '#352923' }}>\n        <Container>\n            <div style={{height: '5vh' }}></div>\n            <Row className=\"footer-top\">\n                {/* Logo & Description */}\n                <Col md={4} className=\"text-center text-md-start\">\n                    <img src={`${process.env.PUBLIC_URL}/images/qave-logo.png`} alt=\"The Qave Logo\" className=\"footer-logo\" />\n                    <p className=\"footer-description\">\n                        Taste Africa in Stockholm. Enjoy authentic West African flavors in a modern, cozy atmosphere.\n                    </p>\n\n                    {/* ✅ Payment Section Under Logo */}\n                    <h5  style={{color : 'white'}}>We Accept</h5>\n                        <FaCcVisa size={32} />\n                        <FaCcMastercard size={32} />\n                        <SiKlarna size={32} color=\"#ff3399\" /> {/* Klarna - Pink color */}\n                    \n                </Col>\n\n                {/* Quick Links */}\n                <Col md={4} className=\"text-center\">\n                    <h5  style={{color : 'white'}}>Quick Links</h5>\n                    <Nav className=\"flex-column footer-links\">\n                        <LinkContainer to=\"/menu\">\n                            <Nav.Link>View Menu</Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to=\"/order\">\n                            <Nav.Link>Order Online</Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to=\"/reserve\">\n                            <Nav.Link>Reserve a Table</Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to=\"/experience\">\n                            <Nav.Link>Experience</Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to=\"/loyalty\">\n                            <Nav.Link>Qana Points</Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to=\"/contact-us\">\n                            <Nav.Link>Contact Us</Nav.Link>\n                        </LinkContainer>\n                        <LinkContainer to=\"/about-us\">\n                            <Nav.Link>About Us</Nav.Link>\n                        </LinkContainer>\n                    </Nav>\n                </Col>\n\n                {/* Contact Info & Social Media */}\n                <Col md={4} className=\"text-center text-md-end\">\n                    <h5 style={{color : 'white'}}>Contact Us</h5>\n                    <p>📍 Stockholm, Sweden</p>\n                    <p>📞 +46 123 456 789</p>\n                    <p>✉️ info@theqave.com</p>\n                    <div className=\"social-icons\">\n                        <a style={{color: \"#1877F2\"}} href=\"https://facebook.com\" target=\"_blank\" rel=\"noopener noreferrer\"><FaFacebook /></a>\n                        <a style={{color: \"#E4405F\"}} href=\"https://instagram.com\" target=\"_blank\" rel=\"noopener noreferrer\"><FaInstagram /></a>\n                        <a style={{color: \"#1DA1F2\"}} href=\"https://twitter.com\" target=\"_blank\" rel=\"noopener noreferrer\"><FaTwitter /></a>\n                    </div>\n                    <p></p>\n\n                    {/* ✅ Opening Hours Under Contact Section */}\n                    <h5  style={{color : 'white'}}>Opening Hours</h5>\n                    <p>Monday – Friday: 11:00 AM – 10:00 PM</p>\n                    <p>Saturday – Sunday: 10:00 AM – 11:00 PM</p>\n                </Col>\n            </Row>\n\n            {/* Copyright */}\n            <Row>\n                <Col className='text-center py-3 text-light'>\n                    <p>Afriqana &copy; {currentYear}</p>\n                </Col>\n            </Row>\n        </Container>\n    </footer>\n  )\n}\n\nexport default Footer;\n","/Users/mac/Afriqana/frontend/src/slices/stripeSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/orderSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/productsApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/cartSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/ordersApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/usersApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/components/Product.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Loader.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Message.jsx",["384"],[],"import { Alert } from \"react-bootstrap\";\n\nconst Message = ({ variant, children}) => {\n  return (\n    <Alert variant={variant}>{children}</Alert>\n  );\n\n  Message.defaultProps = {\n    variant: 'info',\n  }\n}\n\nexport default Message","/Users/mac/Afriqana/frontend/src/components/CheckoutSteps.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/FormContainer.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/RedeemPoints.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/PaymentElementScreen.jsx",["385","386","387","388","389"],[],"import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { Button } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { updateUserInfoAfterPayment } from '../slices/authSlice';\nimport { useStripePromise } from '../contexts/StripeContext';\nimport { usePayOrderMutation, useGetOrderDetailsQuery } from '../slices/ordersApiSlice';\nimport { useCurrentUserDetailsQuery } from '../slices/usersApiSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nconst PaymentElementScreen = ({ clientSecret ,markAsPaid }) => {\n  const { id: orderId } = useParams();\n  const  stripe  = useStripePromise();\n  const elements = useElements();\n  const dispatch = useDispatch();\n\n  // Extract couponCode from redux\n  const couponCode = useSelector((state) => state.order.couponCode); \n\n  const { data: order, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n  const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\n\n  // Destructure the refetch function for the user's details\n  const { data: currentUser, refetch: refetchUser } = useCurrentUserDetailsQuery();\n\n\n  const [processing, setProcessing] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n\n  // const [showModal, setShowModal] = useState(false);\n  const [refetchResult, setRefetchResult] = useState(null);\n\n\n  useEffect(() => {\n    if (refetchResult?.isSuccess === true) {\n      toast.success('User details updated!');\n    } else if (refetchResult?.isError === true) {\n      toast.error('Failed to update user details.');\n    }\n  }, [refetchResult, currentUser]);\n  \n\n  const handleChange = async (event) => {\n    setDisabled(event.empty);\n    if (event.error) {\n        toast.error(event.error.message);\n    }\n    if (!stripe || !elements) {\n        // Stripe.js hasn't yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n};\n\n  const handlePayment = async (event) => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n  setProcessing(true);\n\n  // Trigger form validation and wallet collection\n  const { error: submitError } = await elements.submit();\n  if (submitError) {\n    toast.error(`Payment failed: ${submitError.message}`);\n    setProcessing(false);\n    return;\n  }\n\n    // Confirm the PaymentIntent\n    const { error } = await stripe.confirmPayment({\n      elements,\n      clientSecret,\n      confirmParams: {\n        return_url: `${window.location.origin}/payment-success/${orderId}`,\n      },\n      redirect: 'if_required'\n    });\n\n    if (error) {\n      toast.error(`Payment failed: ${error.message}`);\n      setProcessing(false);\n      return;\n    }\n\n    // Retrieve PaymentIntent to get detailed info\n    const { paymentIntent, error: retrieveError } = await stripe.retrievePaymentIntent(clientSecret);\n\n    if (retrieveError) {\n      toast.error(`Payment failed: ${retrieveError.message}`);\n      setProcessing(false);\n      return;\n    }\n\n\n    // Assuming paymentIntent.status === 'succeeded'\n    const details = {\n      id: paymentIntent.id,\n      status: paymentIntent.status,\n      update_time: new Date().toISOString(),\n      email_address: paymentIntent.receipt_email || 'default_email@example.com', // replace with actual email\n      couponCode // Pass couponCode here\n    };\n  \n    // Include couponCode in the payment payload\n    const response = await payOrder({ orderId, details });\n    if (response.data.updatedUser) {\n      dispatch(updateUserInfoAfterPayment(response.data.updatedUser))\n    }\n    markAsPaid(orderId);\n    await refetchUser();\n    toast.success('Order is Paid');\n    setProcessing(false);\n\n    \n\n    console.log(\"refetched user data is:\", currentUser)\n};\n\n\n  return (\n    <>\n      <form onSubmit={handlePayment}>\n      <div style={{ marginBottom: \"20px\" }}>\n          <PaymentElement onChange={handleChange} />\n      <Button type='submit' disabled={!stripe || processing || disabled } style={{ marginTop: \"10px\" }}>\n          {processing ? \"Processing...\":\"Pay Now\"}\n      </Button>\n          </div>\n      </form>\n\n    </>\n  );\n};\n\nexport default PaymentElementScreen;\n","/Users/mac/Afriqana/frontend/src/components/ApplyCoupon.jsx",["390","391","392","393"],[],"import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport Message from '../components/Message';\nimport { useApplyCouponMutation } from \"../slices/couponApiSlice\";\nimport { setOrderValues, putCouponCode } from \"../slices/orderSlice\";\nimport { useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\nconst ApplyCoupon = () => {\n    \n    const dispatch = useDispatch()\n    const [couponCode, setCouponCode] = useState('');\n    const [applyCoupon, {isLoading, refetch, error}] = useApplyCouponMutation()\n    \n    // Selector to get orderId from Redux\n    const orderId = useSelector((state) => state.order.orderId);\n\n\n    const submitHandler = async (e) => {\n      e.preventDefault();\n\n      try {\n          const res = await applyCoupon({ couponCode, orderId }).unwrap();\n\n          if (res && res.orderPrices) {\n              toast.success(\"Coupon successfully applied\");\n              dispatch(setOrderValues(res.orderPrices)); // Update the order prices in the state\n              dispatch(putCouponCode(couponCode)); // save coupon code\n              refetch();\n          } else {\n              toast.error(\"Failed to apply the coupon\");\n          }\n      } catch (err) {\n          console.error(\"Coupon Error:\", err);\n          toast.error(err?.data?.message || err?.error);\n      }\n  };\n\n\n\n\n  return (\n    <>\n    <Form onSubmit={submitHandler}>\n        <InputGroup className=\"mb-3\">\n            <Form.Control\n            placeholder=\"Coupon code\"\n            aria-describedby=\"basic-addon2\"\n            value={couponCode}\n            onChange={(e) => setCouponCode(e.target.value)}\n\n            />\n            <Button type=\"submit\"  variant=\"outline-secondary\" id=\"button-addon2\">\n            Apply Coupon\n            </Button>\n        </InputGroup>     \n      </Form>\n    </>\n  )\n}\n\nexport default ApplyCoupon\n\n\n\n\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { useState } from \"react\";\n// import { Button, Form, InputGroup } from 'react-bootstrap';\n// import { toast } from 'react-toastify';\n// import { useParams } from 'react-router-dom';\n// import { useApplyCouponMutation } from \"../slices/couponApiSlice\";\n// import { setOrderValues } from \"../slices/orderSlice\";\n\n// const ApplyCoupon = () => {\n//   const dispatch = useDispatch();\n//   const { id: orderId } = useParams(); // Get orderId from the URL params\n//   const [couponCode, setCouponCode] = useState('');\n//   const orderId = useSelector((state) => state.order.orderId);\n//   const [applyCoupon, { isLoading, refetch, error }] = useApplyCouponMutation();\n\n//   const submitHandler = async (e) => {\n//     e.preventDefault();\n\n//     const payload = { couponCode, orderId };\n\n\n//     try {\n//       const res = await applyCoupon(payload).unwrap();\n\n//       if (res && res.orderPrices) {\n//         toast.success(\"Coupon successfully applied\");\n//         dispatch(setOrderValues(res.orderPrices)); // Update the order prices in the state\n//         refetch();\n//       } else {\n//         toast.error(\"Failed to apply the coupon\");\n//       }\n//     } catch (err) {\n//       console.error(\"Coupon Error:\", err);\n//       toast.error(err?.data?.message || err?.error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Form onSubmit={submitHandler}>\n//         <InputGroup className=\"mb-3\">\n//           <Form.Control\n//             placeholder=\"Coupon code\"\n//             aria-describedby=\"basic-addon2\"\n//             value={couponCode}\n//             onChange={(e) => setCouponCode(e.target.value)}\n//           />\n//           <Button type=\"submit\" variant=\"outline-secondary\" id=\"button-addon2\">\n//             Apply Coupon\n//           </Button>\n//         </InputGroup>\n//       </Form>\n//     </>\n//   );\n// };\n\n// export default ApplyCoupon;","/Users/mac/Afriqana/frontend/src/slices/couponApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/constants.js",[],[],"/Users/mac/Afriqana/frontend/src/utils/cartUtils.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/RegionListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/slices/regionApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/RegionPriceEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/UserEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Paginate.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/ProductCarousel.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Meta.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/FoodAnimation.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/HorizontalTransition.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/SlideTransition.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/FoodSwiper.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/SlowTransition.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/ModernCards.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/WhyChooseUs.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/VeryEmailScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/VerificationModal.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/HomeHeroSection.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/QanaPoints.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/ExperienceSection.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/ContactScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/AboutScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/ForgotPasswordScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/ResetPasswordScreen.jsx",[],[],{"ruleId":"394","severity":1,"message":"395","line":1,"column":26,"nodeType":"396","messageId":"397","endLine":1,"endColumn":46},{"ruleId":"394","severity":1,"message":"398","line":3,"column":21,"nodeType":"396","messageId":"397","endLine":3,"endColumn":24},{"ruleId":"394","severity":1,"message":"399","line":3,"column":26,"nodeType":"396","messageId":"397","endLine":3,"endColumn":29},{"ruleId":"394","severity":1,"message":"400","line":3,"column":31,"nodeType":"396","messageId":"397","endLine":3,"endColumn":35},{"ruleId":"394","severity":1,"message":"401","line":3,"column":37,"nodeType":"396","messageId":"397","endLine":3,"endColumn":43},{"ruleId":"394","severity":1,"message":"402","line":4,"column":10,"nodeType":"396","messageId":"397","endLine":4,"endColumn":23},{"ruleId":"394","severity":1,"message":"403","line":12,"column":10,"nodeType":"396","messageId":"397","endLine":12,"endColumn":25},{"ruleId":"394","severity":1,"message":"404","line":1,"column":28,"nodeType":"396","messageId":"397","endLine":1,"endColumn":37},{"ruleId":"394","severity":1,"message":"405","line":4,"column":10,"nodeType":"396","messageId":"397","endLine":4,"endColumn":31},{"ruleId":"394","severity":1,"message":"406","line":10,"column":8,"nodeType":"396","messageId":"397","endLine":10,"endColumn":29},{"ruleId":"394","severity":1,"message":"407","line":17,"column":23,"nodeType":"396","messageId":"397","endLine":17,"endColumn":32},{"ruleId":"394","severity":1,"message":"408","line":146,"column":38,"nodeType":"396","messageId":"397","endLine":146,"endColumn":42},{"ruleId":"394","severity":1,"message":"409","line":137,"column":10,"nodeType":"396","messageId":"397","endLine":137,"endColumn":21},{"ruleId":"394","severity":1,"message":"410","line":139,"column":10,"nodeType":"396","messageId":"397","endLine":139,"endColumn":24},{"ruleId":"394","severity":1,"message":"411","line":21,"column":9,"nodeType":"396","messageId":"397","endLine":21,"endColumn":21},{"ruleId":"412","severity":1,"message":"413","line":85,"column":50,"nodeType":"414","messageId":"415","endLine":85,"endColumn":52},{"ruleId":"394","severity":1,"message":"416","line":14,"column":26,"nodeType":"396","messageId":"397","endLine":14,"endColumn":39},{"ruleId":"417","severity":1,"message":"418","line":70,"column":6,"nodeType":"419","endLine":70,"endColumn":34,"suggestions":"420"},{"ruleId":"417","severity":1,"message":"421","line":85,"column":6,"nodeType":"419","endLine":85,"endColumn":25,"suggestions":"422"},{"ruleId":"394","severity":1,"message":"423","line":4,"column":16,"nodeType":"396","messageId":"397","endLine":4,"endColumn":25},{"ruleId":"394","severity":1,"message":"424","line":5,"column":10,"nodeType":"396","messageId":"397","endLine":5,"endColumn":36},{"ruleId":"394","severity":1,"message":"425","line":16,"column":19,"nodeType":"396","messageId":"397","endLine":16,"endColumn":24},{"ruleId":"394","severity":1,"message":"426","line":16,"column":35,"nodeType":"396","messageId":"397","endLine":16,"endColumn":42},{"ruleId":"394","severity":1,"message":"427","line":16,"column":44,"nodeType":"396","messageId":"397","endLine":16,"endColumn":53},{"ruleId":"394","severity":1,"message":"428","line":17,"column":35,"nodeType":"396","messageId":"397","endLine":17,"endColumn":45},{"ruleId":"429","severity":1,"message":"430","line":19,"column":50,"nodeType":"396","messageId":"431","endLine":19,"endColumn":58},{"ruleId":"417","severity":1,"message":"432","line":42,"column":6,"nodeType":"419","endLine":42,"endColumn":8,"suggestions":"433"},{"ruleId":"394","severity":1,"message":"434","line":6,"column":10,"nodeType":"396","messageId":"397","endLine":6,"endColumn":32},{"ruleId":"435","severity":1,"message":"436","line":8,"column":3,"nodeType":"437","messageId":"438","endLine":10,"endColumn":4},{"ruleId":"394","severity":1,"message":"425","line":23,"column":17,"nodeType":"396","messageId":"397","endLine":23,"endColumn":22},{"ruleId":"394","severity":1,"message":"426","line":23,"column":24,"nodeType":"396","messageId":"397","endLine":23,"endColumn":31},{"ruleId":"394","severity":1,"message":"427","line":23,"column":33,"nodeType":"396","messageId":"397","endLine":23,"endColumn":42},{"ruleId":"394","severity":1,"message":"428","line":24,"column":33,"nodeType":"396","messageId":"397","endLine":24,"endColumn":43},{"ruleId":"394","severity":1,"message":"439","line":34,"column":25,"nodeType":"396","messageId":"397","endLine":34,"endColumn":41},{"ruleId":"394","severity":1,"message":"404","line":2,"column":10,"nodeType":"396","messageId":"397","endLine":2,"endColumn":19},{"ruleId":"394","severity":1,"message":"440","line":5,"column":8,"nodeType":"396","messageId":"397","endLine":5,"endColumn":15},{"ruleId":"394","severity":1,"message":"427","line":15,"column":26,"nodeType":"396","messageId":"397","endLine":15,"endColumn":35},{"ruleId":"394","severity":1,"message":"441","line":15,"column":46,"nodeType":"396","messageId":"397","endLine":15,"endColumn":51},"no-unused-vars","'getDefaultMiddleware' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'Button' is defined but never used.","'LinkContainer' is defined but never used.","'backgroundImage' is assigned a value but never used.","'useEffect' is defined but never used.","'useUpdateUserMutation' is defined but never used.","'usePlacesAutocomplete' is defined but never used.","'loadError' is assigned a value but never used.","'Form' is defined but never used.","'useDispatch' is defined but never used.","'setCredentials' is defined but never used.","'orderDetails' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'finalizeOrder' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stripePromise'. Either include it or remove the dependency array.","ArrayExpression",["442"],"React Hook useEffect has a missing dependency: 'order'. Either include it or remove the dependency array.",["443"],"'useParams' is defined but never used.","'updateUserInfoAfterPayment' is defined but never used.","'order' is assigned a value but never used.","'isError' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","no-use-before-define","'userInfo' was used before it was defined.","usedBeforeDefined","React Hook useEffect has a missing dependency: 'refetchUser'. Either include it or remove the dependency array.",["444"],"'TbCurrencySwedishKrona' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'setRefetchResult' is assigned a value but never used.","'Message' is defined but never used.","'error' is assigned a value but never used.",{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},"Update the dependencies array to be: [order, createPaymentIntent, stripePromise]",{"range":"451","text":"452"},"Update the dependencies array to be: [orderId, dispatch, order]",{"range":"453","text":"454"},"Update the dependencies array to be: [refetchUser]",{"range":"455","text":"456"},[2584,2612],"[order, createPaymentIntent, stripePromise]",[2983,3002],"[orderId, dispatch, order]",[1524,1526],"[refetchUser]"]