[{"/Users/mac/Afriqana/frontend/src/index.js":"1","/Users/mac/Afriqana/frontend/src/reportWebVitals.js":"2","/Users/mac/Afriqana/frontend/src/App.js":"3","/Users/mac/Afriqana/frontend/src/store.js":"4","/Users/mac/Afriqana/frontend/src/screens/ProductCatalogScreen.jsx":"5","/Users/mac/Afriqana/frontend/src/screens/HomeScreen.jsx":"6","/Users/mac/Afriqana/frontend/src/screens/ProductScreen.jsx":"7","/Users/mac/Afriqana/frontend/src/screens/DeliveryScreen.jsx":"8","/Users/mac/Afriqana/frontend/src/screens/CartScreen.jsx":"9","/Users/mac/Afriqana/frontend/src/contexts/StripeContext.js":"10","/Users/mac/Afriqana/frontend/src/screens/RegisterScreen.js":"11","/Users/mac/Afriqana/frontend/src/screens/LoginScreen.jsx":"12","/Users/mac/Afriqana/frontend/src/screens/PlaceOrderScreen.jsx":"13","/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx":"14","/Users/mac/Afriqana/frontend/src/screens/PaymentSuccess.jsx":"15","/Users/mac/Afriqana/frontend/src/screens/ProfileScreen.jsx":"16","/Users/mac/Afriqana/frontend/src/components/AdminRoute.jsx":"17","/Users/mac/Afriqana/frontend/src/components/PrivateRoute.jsx":"18","/Users/mac/Afriqana/frontend/src/screens/admin/OrderListScreen.jsx":"19","/Users/mac/Afriqana/frontend/src/screens/admin/ProductListScreen.jsx":"20","/Users/mac/Afriqana/frontend/src/screens/admin/ProductEditScreen.jsx":"21","/Users/mac/Afriqana/frontend/src/screens/admin/UserListScreen.jsx":"22","/Users/mac/Afriqana/frontend/src/screens/admin/CouponEditScreen.jsx":"23","/Users/mac/Afriqana/frontend/src/screens/admin/CouponListScreen.jsx":"24","/Users/mac/Afriqana/frontend/src/components/Header.js":"25","/Users/mac/Afriqana/frontend/src/slices/apiSlice.js":"26","/Users/mac/Afriqana/frontend/src/slices/authSlice.js":"27","/Users/mac/Afriqana/frontend/src/components/Footer.js":"28","/Users/mac/Afriqana/frontend/src/slices/stripeSlice.js":"29","/Users/mac/Afriqana/frontend/src/slices/orderSlice.js":"30","/Users/mac/Afriqana/frontend/src/slices/productsApiSlice.js":"31","/Users/mac/Afriqana/frontend/src/slices/cartSlice.js":"32","/Users/mac/Afriqana/frontend/src/slices/ordersApiSlice.js":"33","/Users/mac/Afriqana/frontend/src/slices/usersApiSlice.js":"34","/Users/mac/Afriqana/frontend/src/components/Product.jsx":"35","/Users/mac/Afriqana/frontend/src/components/Loader.jsx":"36","/Users/mac/Afriqana/frontend/src/components/Message.jsx":"37","/Users/mac/Afriqana/frontend/src/components/CheckoutSteps.jsx":"38","/Users/mac/Afriqana/frontend/src/components/FormContainer.jsx":"39","/Users/mac/Afriqana/frontend/src/components/RedeemPoints.jsx":"40","/Users/mac/Afriqana/frontend/src/components/PaymentElementScreen.jsx":"41","/Users/mac/Afriqana/frontend/src/components/ApplyCoupon.jsx":"42","/Users/mac/Afriqana/frontend/src/slices/couponApiSlice.js":"43","/Users/mac/Afriqana/frontend/src/constants.js":"44","/Users/mac/Afriqana/frontend/src/utils/cartUtils.js":"45","/Users/mac/Afriqana/frontend/src/screens/admin/RegionListScreen.jsx":"46","/Users/mac/Afriqana/frontend/src/slices/regionApiSlice.js":"47","/Users/mac/Afriqana/frontend/src/screens/admin/RegionPriceEditScreen.jsx":"48","/Users/mac/Afriqana/frontend/src/screens/admin/UserEditScreen.jsx":"49"},{"size":3757,"mtime":1727827430474,"results":"50","hashOfConfig":"51"},{"size":362,"mtime":1691189867573,"results":"52","hashOfConfig":"51"},{"size":505,"mtime":1695982954577,"results":"53","hashOfConfig":"51"},{"size":700,"mtime":1698972039860,"results":"54","hashOfConfig":"51"},{"size":887,"mtime":1693906581752,"results":"55","hashOfConfig":"51"},{"size":415,"mtime":1691701135302,"results":"56","hashOfConfig":"51"},{"size":4297,"mtime":1693009532234,"results":"57","hashOfConfig":"51"},{"size":3450,"mtime":1725526275756,"results":"58","hashOfConfig":"51"},{"size":10225,"mtime":1699330102181,"results":"59","hashOfConfig":"51"},{"size":683,"mtime":1696633082497,"results":"60","hashOfConfig":"51"},{"size":3830,"mtime":1693609129949,"results":"61","hashOfConfig":"51"},{"size":2783,"mtime":1697836845970,"results":"62","hashOfConfig":"51"},{"size":12012,"mtime":1727795408420,"results":"63","hashOfConfig":"51"},{"size":8508,"mtime":1724147307451,"results":"64","hashOfConfig":"51"},{"size":2871,"mtime":1723854701347,"results":"65","hashOfConfig":"51"},{"size":5373,"mtime":1698149638485,"results":"66","hashOfConfig":"51"},{"size":303,"mtime":1696855510372,"results":"67","hashOfConfig":"51"},{"size":287,"mtime":1693614346050,"results":"68","hashOfConfig":"51"},{"size":2131,"mtime":1696859762348,"results":"69","hashOfConfig":"51"},{"size":3550,"mtime":1697023069575,"results":"70","hashOfConfig":"51"},{"size":5378,"mtime":1727693024018,"results":"71","hashOfConfig":"51"},{"size":2566,"mtime":1727828149685,"results":"72","hashOfConfig":"51"},{"size":3704,"mtime":1698841560744,"results":"73","hashOfConfig":"51"},{"size":4073,"mtime":1698841212474,"results":"74","hashOfConfig":"51"},{"size":3904,"mtime":1727696746293,"results":"75","hashOfConfig":"51"},{"size":322,"mtime":1727686748367,"results":"76","hashOfConfig":"51"},{"size":1297,"mtime":1698169409065,"results":"77","hashOfConfig":"51"},{"size":429,"mtime":1691203782870,"results":"78","hashOfConfig":"51"},{"size":374,"mtime":1695978780714,"results":"79","hashOfConfig":"51"},{"size":6058,"mtime":1724145972747,"results":"80","hashOfConfig":"51"},{"size":1961,"mtime":1697060084386,"results":"81","hashOfConfig":"51"},{"size":1963,"mtime":1725528323790,"results":"82","hashOfConfig":"51"},{"size":2414,"mtime":1699609977241,"results":"83","hashOfConfig":"51"},{"size":3058,"mtime":1727829188473,"results":"84","hashOfConfig":"51"},{"size":595,"mtime":1691410613223,"results":"85","hashOfConfig":"51"},{"size":371,"mtime":1692927128134,"results":"86","hashOfConfig":"51"},{"size":228,"mtime":1692927659429,"results":"87","hashOfConfig":"51"},{"size":1379,"mtime":1693616319641,"results":"88","hashOfConfig":"51"},{"size":321,"mtime":1693316315596,"results":"89","hashOfConfig":"51"},{"size":1616,"mtime":1723737910941,"results":"90","hashOfConfig":"51"},{"size":4368,"mtime":1724151098750,"results":"91","hashOfConfig":"51"},{"size":3904,"mtime":1724146302040,"results":"92","hashOfConfig":"51"},{"size":2659,"mtime":1723564130018,"results":"93","hashOfConfig":"51"},{"size":446,"mtime":1727686896446,"results":"94","hashOfConfig":"51"},{"size":710,"mtime":1725405967970,"results":"95","hashOfConfig":"51"},{"size":3772,"mtime":1727775645808,"results":"96","hashOfConfig":"51"},{"size":1636,"mtime":1727692111369,"results":"97","hashOfConfig":"51"},{"size":5635,"mtime":1727806110913,"results":"98","hashOfConfig":"51"},{"size":3005,"mtime":1727826988054,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"938ql0",{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"106"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"106"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"106"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"106"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"106"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"106"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"106"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"106"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Afriqana/frontend/src/index.js",[],[],"/Users/mac/Afriqana/frontend/src/reportWebVitals.js",[],[],[],"/Users/mac/Afriqana/frontend/src/App.js",[],[],"/Users/mac/Afriqana/frontend/src/store.js",["256"],[],"import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"./slices/apiSlice\";\nimport  cartSliceReducer  from './slices/cartSlice';\nimport authSliceReducer from \"./slices/authSlice\";\nimport stripeReducer from \"./slices/stripeSlice\";\nimport orderSliceReducer from \"./slices/orderSlice\";\n\nconst  store = configureStore({\n    reducer: {\n        [apiSlice.reducerPath]: apiSlice.reducer,\n        cart: cartSliceReducer,\n        auth: authSliceReducer,\n        order: orderSliceReducer,\n        stripe: stripeReducer,\n    },\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(apiSlice.middleware),\n    devTools: true,\n});\n\nexport default store;","/Users/mac/Afriqana/frontend/src/screens/ProductCatalogScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/HomeScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/ProductScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/DeliveryScreen.jsx",["257","258","259","260"],[],"/Users/mac/Afriqana/frontend/src/screens/CartScreen.jsx",["261"],[],"// import { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card, FormControl } from \"react-bootstrap\";\n// import { FaTrash } from \"react-icons/fa6\";\n// import Message from '../components/Message';\n// import { toast } from 'react-toastify';\n// import { useApplyCouponMutation } from \"../slices/couponApiSlice\";\n// import { addToCart, removeFromCart, applyCouponDiscount } from \"../slices/cartSlice\";\n\n\n// const CartScreen = () => {\n//     const navigate = useNavigate();\n//     const dispatch = useDispatch();\n//     const [couponCode, setCouponCode] = useState('')\n\n\n//     const cart = useSelector((state) => state.cart);\n//     const { cartItems, discountPercentage } = cart; // added the discountPercentage from state;\n\n//     const [applyCoupon] = useApplyCouponMutation();\n\n//     const addToCartHandler = async (product, qty) => {\n//         dispatch(addToCart({...product, qty}))\n//     };\n\n//     const removeFromCartHandler = async (id) => {\n//         dispatch(removeFromCart(id))\n//     };\n\n//     const addCouponHandler = async () => {\n//         try {\n//             await applyCoupon(couponCode);\n//             toast.success(`Coupon applied successfully! ${discountPercentage}% off your total!`);\n//             dispatch(applyCouponDiscount(discountPercentage))\n//         } catch (error) {\n//             if (error.data && error.data.message) {\n//                 toast.error(`Coupon Error: ${error.data.message}`);\n//             } else {\n//                 toast.error('Coupon Error: Unexpected error occurred.');\n//             }\n//         }\n//     }\n\n//     const checkoutHandler = () => {\n//         navigate('/login?redirect=/delivery'); \n//     }\n\n//     const maxOrderQuantity = 10; // Adjust qty number as pleased...\n\n\n//     const subtotal = cartItems.reduce((acc, item) => acc + Number(item.qty) * Number(item.price), 0);\n//     const discountedTotal = subtotal * ((100 - Number(discountPercentage)) / 100); // Calculate the new total after applying discount\n\n//     console.log(\"Discount Percentage:\", discountPercentage);\n//     console.log(\"Raw Items Price:\", subtotal); // renamed from rawItemsPrice to subtotal for clarity\n//     console.log(\"Discount Amount:\", subtotal - discountedTotal);\n//   return (\n//     <Row>\n//         <Col md={8}>\n//             <h1 style={{marginBottom: '20px'}}>Shopping Cart</h1>\n//             {cartItems.length === 0 ? (\n//                 <Message>\n//                     Your Cart is empty <Link to='/'>Go Back</Link>\n//                 </Message>\n//             ) : (\n//                 <ListGroup variant=\"flush\">\n//                     {cartItems.map((item) => (\n//                         <ListGroup.Item key={item._id}>\n//                             <Row>\n//                                 <Col md={2}>\n//                                     <Image src={item.Image} alt={item.name} fluid rounded />\n//                                 </Col>\n//                                 <Col md={3}>\n//                                     <Link to={`/product/${item._id}`}>{item.name}</Link>\n//                                 </Col>\n//                                 <Col>{item.price}</Col>\n//                                 <Col md={2}>\n//                                 <FormControl\n//                                     as='select'\n//                                     value={item.qty}\n//                                     onChange={(e) => addToCartHandler(item, Number(e.target.value))}>\n//                                     {[...Array(maxOrderQuantity).keys()].map(x => (\n//                                         <option key={x + 1} value={x + 1}>\n//                                             {x + 1}\n//                                         </option>\n//                                     ))}\n//                                 </FormControl>\n//                                 </Col>\n//                                 <Col md={2}>\n//                                     <Button type=\"button\" variant=\"light\" onClick={ () =>\n//                                     removeFromCartHandler(item._id)}>\n//                                         <FaTrash/>\n//                                     </Button>\n//                                 </Col>\n//                             </Row>\n//                         </ListGroup.Item>\n//                     ))}\n//                 </ListGroup>\n//             ) }\n//         </Col>\n//         <Col md={4}>\n//             <Card>\n//                 <ListGroup variant=\"flush\">\n//                     <ListGroup.Item>\n//                         <ListGroup.Item>\n//                             <Form.Control \n//                               type=\"text\"\n//                               placeholder=\"Enter coupon code\"\n//                               value={couponCode}\n//                               onChange={(e) => setCouponCode(e.target.value)}\n//                             />\n//                             <Button onClick={addCouponHandler}>\n//                                 Apply Coupon\n//                             </Button>\n//                         </ListGroup.Item>\n//                         { discountPercentage > 0 && \n//                           <span>Discount applied: {discountPercentage}%</span>\n//                         }\n//                         <h2>\n//                             {/* Subtotal ({ cartItems.reduce((acc, item) => acc + item.qty, 0)}) */}\n//                             Subtotal{subtotal}\n//                             items\n//                         </h2>\n//                         SEK{ discountedTotal.toFixed(2)}\n//                     </ListGroup.Item>\n//                     <ListGroup.Item>\n//                         <Button type=\"button\" className=\"btn-block\"\n//                          disabled={cartItems.length === 0}\n//                          onClick={checkoutHandler}>\n//                             Proceed To CheckOut\n//                         </Button>\n//                     </ListGroup.Item>\n//                 </ListGroup>\n//             </Card>\n//         </Col>\n//     </Row>\n//   )\n// }\n\n// export default CartScreen;\n\n\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row, Col, ListGroup, Image, Form, Button, Card, FormControl } from \"react-bootstrap\";\nimport { FaTrash } from \"react-icons/fa6\";\nimport Message from '../components/Message'\nimport { addToCart, removeFromCart } from \"../slices/cartSlice\";\nimport { resetOrderValues } from \"../slices/orderSlice\";\n\nconst CartScreen = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n\n    const cart = useSelector((state) => state.cart);\n    const { cartItems } = cart;\n\n    const addToCartHandler = async (product, qty) => {\n        dispatch(addToCart({...product, qty}))\n    };\n\n    const removeFromCartHandler = async (id) => {\n        dispatch(removeFromCart(id))\n    };\n\n    const checkoutHandler = () => {\n        dispatch(resetOrderValues())\n        navigate('/login?redirect=/delivery');\n    }\n\n    const maxOrderQuantity = 10; // Adjust qty number as pleased...\n  return (\n    <Row>\n        <Col md={8}>\n            <h1 style={{marginBottom: '20px'}}>Shopping Cart</h1>\n            {cartItems.length === 0 ? (\n                <Message>\n                    Your Cart is empty <Link to='/'>Go Back</Link>\n                </Message>\n            ) : (\n                <ListGroup variant=\"flush\">\n                    {cartItems.map((item) => (\n                        <ListGroup.Item key={item._id}>\n                            <Row>\n                                <Col md={2}>\n                                    <Image src={item.Image} alt={item.name} fluid rounded />\n                                </Col>\n                                <Col md={3}>\n                                    <Link to={`/product/${item._id}`}>{item.name}</Link>\n                                </Col>\n                                <Col>{item.price}</Col>\n                                <Col md={2}>\n                                <FormControl\n                                    as='select'\n                                    value={item.qty}\n                                    onChange={(e) => addToCartHandler(item, Number(e.target.value))}>\n                                    {[...Array(maxOrderQuantity).keys()].map(x => (\n                                        <option key={x + 1} value={x + 1}>\n                                            {x + 1}\n                                        </option>\n                                    ))}\n                                </FormControl>\n                                </Col>\n                                <Col md={2}>\n                                    <Button type=\"button\" variant=\"light\" onClick={ () =>\n                                    removeFromCartHandler(item._id)}>\n                                        <FaTrash/>\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n                    ))}\n                </ListGroup>\n            ) }\n        </Col>\n        <Col md={4}>\n            <Card>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <h2>\n                            Subtotal ({ cartItems.reduce((acc, item) => acc + item.qty, 0)})\n                            items\n                        </h2>\n                        SEK{ cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2) }\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <Button type=\"button\" className=\"btn-block\"\n                         disabled={cartItems.length === 0}\n                         onClick={checkoutHandler}>\n                            Proceed To CheckOut\n                        </Button>\n                    </ListGroup.Item>\n                </ListGroup>\n            </Card>\n        </Col>\n    </Row>\n  )\n}\n\nexport default CartScreen;","/Users/mac/Afriqana/frontend/src/contexts/StripeContext.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/RegisterScreen.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/LoginScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/PlaceOrderScreen.jsx",["262","263"],[],"/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx",["264","265","266"],[],"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector} from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { toast } from 'react-toastify';\nimport { Elements } from '@stripe/react-stripe-js';\nimport PaymentElementScreen from '../components/PaymentElementScreen';\nimport ApplyCoupon from '../components/ApplyCoupon';\nimport { useStripePromise } from '../contexts/StripeContext';\nimport { useGetOrderDetailsQuery, useCreatePaymentIntentMutation, useDeliverOrderMutation } from '../slices/ordersApiSlice';\nimport RedeemPoints from '../components/RedeemPoints';\nimport { setOrderValues, finalizeOrder, setOrderId } from \"../slices/orderSlice\";\n\n\nconst OrderScreen = () => {\n\n  const [clientSecret, setClientSecret] = useState('');\n  \n  // Selector to get orderId and orderPricesfrom Redux\n  const orderId = useSelector((state) => state.order.orderId);\n  const orderPrices = useSelector((state) => state.order.orderPrices);\n\n  const [hasPaid, setHasPaid] = useState(false);\n  const [paymentDate, setPaymentDate] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  const stripePromise = useStripePromise()\n  const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n  const [createPaymentIntent] = useCreatePaymentIntentMutation();\n  const { userInfo } = useSelector((state) => state.auth);\n  const [deliverOrder, {isLoading: loadingDeliver }] = \n  useDeliverOrderMutation();\n\n  const markAsPaid = () => {\n    setHasPaid(true);\n    setPaymentDate(new Date().toISOString());\n  };\n\n\n  useEffect(() => {\n    if (!orderId) {\n        // If orderId is not in Redux state, retrieve it from localStorage\n        const storedOrderId = localStorage.getItem('orderId');\n        if (storedOrderId) {\n            dispatch(setOrderId(storedOrderId));\n        } else {\n            toast.error('Order ID not found. Redirecting to home.');\n            navigate('/');\n        }\n    }\n  }, [orderId, dispatch, navigate]);\n\n\n  useEffect(() => {\n    console.log(\"my stripe promise is:\", stripePromise)\n    if (order && !order.isPaid) {\n      createPaymentIntent({ amount: order.totalPrice * 100 })\n        .unwrap()\n        .then((data) => {\n          setClientSecret(data.clientSecret);\n        })\n        .catch((err) => {\n          console.error(\"Error fetching client secret:\", err.message);\n        });\n    }\n  }, [order, createPaymentIntent]);\n\n  useEffect(() => {\n    // Set initial values when the component mounts\n    if (order) {\n        dispatch(setOrderValues({\n        itemsPrice: order.itemsPrice,\n        deliveryPrice: order.deliveryPrice,\n        taxPrice: order.taxPrice,\n        totalPrice: order.totalPrice,\n        discountAmount: 0,\n        isFinalized: false,\n        } \n        ));\n    } \n  }, [orderId, dispatch]);\n  \n  \n\n\n  const deliverOrderHandler = async () => {\n    try {\n      await deliverOrder(orderId);\n      refetch();\n      toast.success('Order delivered')\n    } catch (err) {\n      toast.error(err?.data?.message || err?.message)\n    }\n  }\n\n\n  if (isLoading) return <Loader />;\n  if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n  const appearance = {\n    theme: 'stripe',\n  };\n  const options = {\n    clientSecret,\n    appearance,\n  };\n\n\n\n  return (\n    <>\n\n    <h2>Order {order._id}</h2>\n    <Row>\n        <Col md={8}>\n            <ListGroup>\n                <ListGroup.Item>\n                    <h3>Delivery</h3>\n                    <p>\n                        <strong>Name:</strong> {order.user.name}\n                    </p>\n                    <p>\n                        <strong>Email:</strong> {order.user.email}\n                    </p>\n                    <p>\n                        <strong>Address:</strong> {order.deliveryAddress.address}\n                    </p>\n                    {order.isDelivered ? (\n                        <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                    ) : (\n                        <Message variant=\"danger\">Not Delivered </Message>\n                    )}\n                </ListGroup.Item>\n\n                <RedeemPoints />\n\n                <ListGroup.Item>\n                    <h3>Payment Status</h3>\n                    {/* <p>\n                        <strong>Method:</strong>\n                        {order.paymentMethod}\n                    </p> */}\n                    {order.isPaid || hasPaid ? (\n                        <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n                    ) : (\n                        <Message variant=\"danger\">Not Paid </Message>\n                    )}\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                    <h2>Order Items</h2>\n                    <ListGroup variant='flush'>\n                        {order.orderItems.map((item, index) => (\n                            <ListGroup.Item key={index}>\n                                <Row>\n                                    <Col md={1}>\n                                        <Image src={item.image} alt={item.name} fluid rounded />\n                                    </Col>\n                                    <Col>\n                                        <Link to={`/product/${item.product}`}>\n                                            {item.name}\n                                        </Link>\n                                    </Col>\n                                    <Col md={4}>\n                                        {item.qty} x ${item.price} = ${item.qty * item.price}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        ))}\n                    </ListGroup>\n                </ListGroup.Item>\n            </ListGroup>\n        </Col>\n\n        <Col md={4}>\n            <Card>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <h3>Order Summary</h3>\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <Row>\n                            <Col>Items</Col>\n                            <Col>SEK{orderPrices.itemsPrice}</Col>\n                        </Row>\n                        <Row>\n                            <Col>Discount</Col>\n                            <Col>SEK{orderPrices.discountAmount}</Col>\n                        </Row>\n                        <Row>\n                            <Col>Delivery</Col>\n                            <Col>SEK{orderPrices.deliveryPrice}</Col>\n                        </Row>\n                        <Row>\n                            <Col>Tax</Col>\n                            <Col>SEK{orderPrices.taxPrice}</Col>\n                        </Row>\n                        <Row>\n                            <Col><strong>Total</strong></Col>\n                            <Col>SEK{orderPrices.totalPrice}</Col>\n                        </Row>\n                    </ListGroup.Item>\n                    \n                    {(!order.isPaid && !hasPaid && clientSecret && stripePromise ) ? (\n                        <ListGroup.Item>\n                           <Elements options={options} stripe={stripePromise}>\n                            <PaymentElementScreen markAsPaid={markAsPaid} clientSecret={clientSecret}/>\n                            </Elements>\n                        </ListGroup.Item>\n                    ) : (\n                        <p>Payment already made </p>\n                    )}\n\n                    {loadingDeliver && <Loader />}\n\n                    <ListGroup.Item>\n                        <ApplyCoupon />\n                    </ListGroup.Item>\n\n                    {userInfo && userInfo.isAdmin && order.isPaid &&\n                    !order.isDelivered && (\n                      <ListGroup.Item>\n                        <Button \n                         type='button'\n                         className='btn btn-block'\n                         onClick={deliverOrderHandler}\n                        >\n                            Mark as Delivered\n                        </Button>\n                      </ListGroup.Item>\n                    )}\n\n                    \n                </ListGroup>\n            </Card>\n        </Col>\n    </Row>\n</>\n\n  );\n};\n\nexport default OrderScreen;","/Users/mac/Afriqana/frontend/src/screens/PaymentSuccess.jsx",["267","268","269","270","271","272"],[],"import React, { useEffect } from 'react';\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport { updateUserInfoAfterPayment } from '../slices/authSlice';\nimport { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\nimport { resetOrderValues } from '../slices/orderSlice';\nimport { toast } from 'react-toastify';\nimport { useStripePromise } from '../contexts/StripeContext';\n\nconst PaymentSuccess = () => {\n\n    const orderId = useSelector((state) => state.order.orderId);  // Use Redux state for orderId\n    const dispatch = useDispatch();\n    \n    const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n    const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\n    const stripe = useStripePromise()\n\n    useEffect(() => {\n        \n        if (!stripe) return;\n\n        const url = new URL(window.location);\n        const clientSecret = url.searchParams.get('payment_intent_client_secret');\n        const fetchPaymentIntent = async () => {\n          const { paymentIntent, error: retrieveError } = await stripe.retrievePaymentIntent(clientSecret);\n            \n          if (retrieveError) {\n              toast.error(`Error retrieving payment details: ${retrieveError.message}`);\n              return;\n            };   \n          \n              const details = {\n                  id: paymentIntent.id,\n                  status: paymentIntent.status,\n                  update_time: new Date().toISOString(),\n                  email_address: paymentIntent.receipt_email,\n              };\n              \n              await payOrder({ orderId, details});\n              // markAsPaid(orderId)\n              toast.success('Order is Paid')\n\n              // Reset orderId after successful payment\n              dispatch(resetOrderValues());\n              // dispatch(resetOrderId())\n          } \n          refetch()\n    \n        fetchPaymentIntent();\n        \n    }, [stripe, payOrder, refetch, orderId, dispatch]);\n\n      \n\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col xs={12} md={6}>\n          <Card>\n            <Card.Body>\n              <Card.Title className=\"text-center\">\n                <h2>Payment Successful!</h2>\n              </Card.Title>\n              <Card.Text className=\"text-center\">\n                Your payment has been successfully processed.\n              </Card.Text>\n              <div className=\"d-flex justify-content-center\">\n                <Link to=\"/\">\n                  <Button variant=\"primary\">Go to Home</Button>\n                </Link>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default PaymentSuccess;\n","/Users/mac/Afriqana/frontend/src/screens/ProfileScreen.jsx",["273"],[],"import React, { useEffect, useState } from 'react';\nimport { Table, Form, Button, Row, Col } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaTimes } from 'react-icons/fa';\n\nimport { toast } from 'react-toastify';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { useProfileMutation, useCurrentUserDetailsQuery } from '../slices/usersApiSlice';\nimport { useGetMyOrdersQuery } from '../slices/ordersApiSlice';\nimport { setCredentials } from '../slices/authSlice';\n\n\n\nconst ProfileScreen = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [updateProfile, {isLoading: loadingUpdateProfile}] = useProfileMutation();\n  const { refetch: refetchUser } = useCurrentUserDetailsQuery();\n\n  const dispatch = useDispatch();\n\n  const { userInfo } = useSelector((state) => state.auth)\n\n  const { data: orders, isLoading, error } = useGetMyOrdersQuery();\n\n  useEffect(() => {\n    if (userInfo) { \n      setName(userInfo.name)\n      setEmail(userInfo.email)\n    }\n  }, [userInfo, userInfo.name, userInfo.email])\n\n  useEffect(() => {\n    // Call refetchUser when the component mounts\n    refetchUser();\n  }, []);  \n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword)  {\n      toast.error('Password do not match')\n    } else {\n      try {\n        const res = await updateProfile({ _id:userInfo._id, \n          name, email, password }).unwrap();\n          dispatch(setCredentials(res))\n          toast.success('Profile updated successfully')\n      } catch (err) {\n        toast.error(err?.data.message || err?.error );\n      }\n    }\n  }\n\n\n  return (\n    <Row>\n      <Col md={3}>\n        <h2>User Profile</h2>\n        <p className='text-primary'><strong>Qana Points:</strong> {userInfo.qanaPoints}</p>\n        <Form onSubmit={submitHandler}>\n          <Form.Group className='my-2' controlId='name'>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter name'\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='email'>\n            <Form.Label>Email Address</Form.Label>\n            <Form.Control\n              type='email'\n              placeholder='Enter email'\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='password'>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type='password'\n              placeholder='Enter password'\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='confirmPassword'>\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type='password'\n              placeholder='Confirm password'\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Button type='submit' variant='primary'>\n            Update\n          </Button>\n          {loadingUpdateProfile && <Loader />}\n        </Form>\n\n      </Col>\n\n      <Col md={9}>\n        <h2>My Orders</h2>\n        {isLoading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant='danger'>\n            {error?.data?.message || error.error}\n          </Message>\n        ) : (\n          <Table striped hover responsive className='table-sm'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>{order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt.substring(0, 10)\n                    ) : (\n                      <FaTimes style={{ color: 'red' }} />\n                    )}\n                  </td>\n                  <td>\n                    {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                    ) : (\n                      <FaTimes style={{ color: 'red' }} />\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button className='btn-sm' variant='light'>\n                        Details\n                      </Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Col>\n    </Row>\n  )\n}\n\nexport default ProfileScreen","/Users/mac/Afriqana/frontend/src/components/AdminRoute.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/PrivateRoute.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/OrderListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/ProductListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/ProductEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/UserListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/CouponEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/CouponListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Header.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/apiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/authSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/components/Footer.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/stripeSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/orderSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/productsApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/cartSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/ordersApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/usersApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/components/Product.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Loader.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Message.jsx",["274"],[],"import { Alert } from \"react-bootstrap\";\n\nconst Message = ({ variant, children}) => {\n  return (\n    <Alert variant={variant}>{children}</Alert>\n  );\n\n  Message.defaultProps = {\n    variant: 'info',\n  }\n}\n\nexport default Message","/Users/mac/Afriqana/frontend/src/components/CheckoutSteps.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/FormContainer.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/RedeemPoints.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/PaymentElementScreen.jsx",["275","276","277","278","279"],[],"import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { Button } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { updateUserInfoAfterPayment } from '../slices/authSlice';\nimport { useStripePromise } from '../contexts/StripeContext';\nimport { usePayOrderMutation, useGetOrderDetailsQuery } from '../slices/ordersApiSlice';\nimport { useCurrentUserDetailsQuery } from '../slices/usersApiSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nconst PaymentElementScreen = ({ clientSecret ,markAsPaid }) => {\n  const { id: orderId } = useParams();\n  const  stripe  = useStripePromise();\n  const elements = useElements();\n  const dispatch = useDispatch();\n\n  // Extract couponCode from redux\n  const couponCode = useSelector((state) => state.order.couponCode); \n\n  const { data: order, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n  const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\n\n  // Destructure the refetch function for the user's details\n  const { data: currentUser, refetch: refetchUser } = useCurrentUserDetailsQuery();\n\n\n  const [processing, setProcessing] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n\n  // const [showModal, setShowModal] = useState(false);\n  const [refetchResult, setRefetchResult] = useState(null);\n\n\n  useEffect(() => {\n    if (refetchResult?.isSuccess === true) {\n      toast.success('User details updated!');\n    } else if (refetchResult?.isError === true) {\n      toast.error('Failed to update user details.');\n    }\n  }, [refetchResult, currentUser]);\n  \n\n  const handleChange = async (event) => {\n    setDisabled(event.empty);\n    if (event.error) {\n        toast.error(event.error.message);\n    }\n    if (!stripe || !elements) {\n        // Stripe.js hasn't yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n};\n\n  const handlePayment = async (event) => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n  setProcessing(true);\n\n  // Trigger form validation and wallet collection\n  const { error: submitError } = await elements.submit();\n  if (submitError) {\n    toast.error(`Payment failed: ${submitError.message}`);\n    setProcessing(false);\n    return;\n  }\n\n    // Confirm the PaymentIntent\n    const { error } = await stripe.confirmPayment({\n      elements,\n      clientSecret,\n      confirmParams: {\n        return_url: `${window.location.origin}/payment-success/${orderId}`,\n      },\n      redirect: 'if_required'\n    });\n\n    if (error) {\n      toast.error(`Payment failed: ${error.message}`);\n      setProcessing(false);\n      return;\n    }\n\n    // Retrieve PaymentIntent to get detailed info\n    const { paymentIntent, error: retrieveError } = await stripe.retrievePaymentIntent(clientSecret);\n\n    if (retrieveError) {\n      toast.error(`Payment failed: ${retrieveError.message}`);\n      setProcessing(false);\n      return;\n    }\n\n\n    // Assuming paymentIntent.status === 'succeeded'\n    const details = {\n      id: paymentIntent.id,\n      status: paymentIntent.status,\n      update_time: new Date().toISOString(),\n      email_address: paymentIntent.receipt_email || 'default_email@example.com', // replace with actual email\n      couponCode // Pass couponCode here\n    };\n  \n    // Include couponCode in the payment payload\n    const response = await payOrder({ orderId, details });\n    if (response.data.updatedUser) {\n      dispatch(updateUserInfoAfterPayment(response.data.updatedUser))\n    }\n    markAsPaid(orderId);\n    await refetchUser();\n    toast.success('Order is Paid');\n    setProcessing(false);\n\n    \n\n    console.log(\"refetched user data is:\", currentUser)\n};\n\n\n  return (\n    <>\n      <form onSubmit={handlePayment}>\n      <div style={{ marginBottom: \"20px\" }}>\n          <PaymentElement onChange={handleChange} />\n      <Button type='submit' disabled={!stripe || processing || disabled } style={{ marginTop: \"10px\" }}>\n          {processing ? \"Processing...\":\"Pay Now\"}\n      </Button>\n          </div>\n      </form>\n\n    </>\n  );\n};\n\nexport default PaymentElementScreen;\n","/Users/mac/Afriqana/frontend/src/components/ApplyCoupon.jsx",["280","281","282","283"],[],"import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport Message from '../components/Message';\nimport { useApplyCouponMutation } from \"../slices/couponApiSlice\";\nimport { setOrderValues, putCouponCode } from \"../slices/orderSlice\";\nimport { useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\nconst ApplyCoupon = () => {\n    \n    const dispatch = useDispatch()\n    const [couponCode, setCouponCode] = useState('');\n    const [applyCoupon, {isLoading, refetch, error}] = useApplyCouponMutation()\n    \n    // Selector to get orderId from Redux\n    const orderId = useSelector((state) => state.order.orderId);\n\n\n    const submitHandler = async (e) => {\n      e.preventDefault();\n\n      try {\n          const res = await applyCoupon({ couponCode, orderId }).unwrap();\n\n          if (res && res.orderPrices) {\n              toast.success(\"Coupon successfully applied\");\n              dispatch(setOrderValues(res.orderPrices)); // Update the order prices in the state\n              dispatch(putCouponCode(couponCode)); // save coupon code\n              refetch();\n          } else {\n              toast.error(\"Failed to apply the coupon\");\n          }\n      } catch (err) {\n          console.error(\"Coupon Error:\", err);\n          toast.error(err?.data?.message || err?.error);\n      }\n  };\n\n\n\n\n  return (\n    <>\n    <Form onSubmit={submitHandler}>\n        <InputGroup className=\"mb-3\">\n            <Form.Control\n            placeholder=\"Coupon code\"\n            aria-describedby=\"basic-addon2\"\n            value={couponCode}\n            onChange={(e) => setCouponCode(e.target.value)}\n\n            />\n            <Button type=\"submit\"  variant=\"outline-secondary\" id=\"button-addon2\">\n            Apply Coupon\n            </Button>\n        </InputGroup>     \n      </Form>\n    </>\n  )\n}\n\nexport default ApplyCoupon\n\n\n\n\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { useState } from \"react\";\n// import { Button, Form, InputGroup } from 'react-bootstrap';\n// import { toast } from 'react-toastify';\n// import { useParams } from 'react-router-dom';\n// import { useApplyCouponMutation } from \"../slices/couponApiSlice\";\n// import { setOrderValues } from \"../slices/orderSlice\";\n\n// const ApplyCoupon = () => {\n//   const dispatch = useDispatch();\n//   const { id: orderId } = useParams(); // Get orderId from the URL params\n//   const [couponCode, setCouponCode] = useState('');\n//   const orderId = useSelector((state) => state.order.orderId);\n//   const [applyCoupon, { isLoading, refetch, error }] = useApplyCouponMutation();\n\n//   const submitHandler = async (e) => {\n//     e.preventDefault();\n\n//     const payload = { couponCode, orderId };\n\n\n//     try {\n//       const res = await applyCoupon(payload).unwrap();\n\n//       if (res && res.orderPrices) {\n//         toast.success(\"Coupon successfully applied\");\n//         dispatch(setOrderValues(res.orderPrices)); // Update the order prices in the state\n//         refetch();\n//       } else {\n//         toast.error(\"Failed to apply the coupon\");\n//       }\n//     } catch (err) {\n//       console.error(\"Coupon Error:\", err);\n//       toast.error(err?.data?.message || err?.error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Form onSubmit={submitHandler}>\n//         <InputGroup className=\"mb-3\">\n//           <Form.Control\n//             placeholder=\"Coupon code\"\n//             aria-describedby=\"basic-addon2\"\n//             value={couponCode}\n//             onChange={(e) => setCouponCode(e.target.value)}\n//           />\n//           <Button type=\"submit\" variant=\"outline-secondary\" id=\"button-addon2\">\n//             Apply Coupon\n//           </Button>\n//         </InputGroup>\n//       </Form>\n//     </>\n//   );\n// };\n\n// export default ApplyCoupon;","/Users/mac/Afriqana/frontend/src/slices/couponApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/constants.js",[],[],"/Users/mac/Afriqana/frontend/src/utils/cartUtils.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/RegionListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/slices/regionApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/RegionPriceEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/UserEditScreen.jsx",[],[],{"ruleId":"284","severity":1,"message":"285","line":1,"column":26,"nodeType":"286","messageId":"287","endLine":1,"endColumn":46},{"ruleId":"284","severity":1,"message":"288","line":3,"column":28,"nodeType":"286","messageId":"287","endLine":3,"endColumn":37},{"ruleId":"284","severity":1,"message":"289","line":10,"column":8,"nodeType":"286","messageId":"287","endLine":10,"endColumn":29},{"ruleId":"284","severity":1,"message":"290","line":13,"column":7,"nodeType":"286","messageId":"287","endLine":13,"endColumn":16},{"ruleId":"284","severity":1,"message":"291","line":17,"column":23,"nodeType":"286","messageId":"287","endLine":17,"endColumn":32},{"ruleId":"284","severity":1,"message":"292","line":146,"column":38,"nodeType":"286","messageId":"287","endLine":146,"endColumn":42},{"ruleId":"284","severity":1,"message":"293","line":21,"column":9,"nodeType":"286","messageId":"287","endLine":21,"endColumn":21},{"ruleId":"294","severity":1,"message":"295","line":85,"column":50,"nodeType":"296","messageId":"297","endLine":85,"endColumn":52},{"ruleId":"284","severity":1,"message":"298","line":14,"column":26,"nodeType":"286","messageId":"287","endLine":14,"endColumn":39},{"ruleId":"299","severity":1,"message":"300","line":70,"column":6,"nodeType":"301","endLine":70,"endColumn":34,"suggestions":"302"},{"ruleId":"299","severity":1,"message":"303","line":85,"column":6,"nodeType":"301","endLine":85,"endColumn":25,"suggestions":"304"},{"ruleId":"284","severity":1,"message":"305","line":4,"column":16,"nodeType":"286","messageId":"287","endLine":4,"endColumn":25},{"ruleId":"284","severity":1,"message":"306","line":5,"column":10,"nodeType":"286","messageId":"287","endLine":5,"endColumn":36},{"ruleId":"284","severity":1,"message":"307","line":16,"column":19,"nodeType":"286","messageId":"287","endLine":16,"endColumn":24},{"ruleId":"284","severity":1,"message":"308","line":16,"column":35,"nodeType":"286","messageId":"287","endLine":16,"endColumn":42},{"ruleId":"284","severity":1,"message":"309","line":16,"column":44,"nodeType":"286","messageId":"287","endLine":16,"endColumn":53},{"ruleId":"284","severity":1,"message":"310","line":17,"column":35,"nodeType":"286","messageId":"287","endLine":17,"endColumn":45},{"ruleId":"299","severity":1,"message":"311","line":40,"column":6,"nodeType":"301","endLine":40,"endColumn":8,"suggestions":"312"},{"ruleId":"313","severity":1,"message":"314","line":8,"column":3,"nodeType":"315","messageId":"316","endLine":10,"endColumn":4},{"ruleId":"284","severity":1,"message":"307","line":23,"column":17,"nodeType":"286","messageId":"287","endLine":23,"endColumn":22},{"ruleId":"284","severity":1,"message":"308","line":23,"column":24,"nodeType":"286","messageId":"287","endLine":23,"endColumn":31},{"ruleId":"284","severity":1,"message":"309","line":23,"column":33,"nodeType":"286","messageId":"287","endLine":23,"endColumn":42},{"ruleId":"284","severity":1,"message":"310","line":24,"column":33,"nodeType":"286","messageId":"287","endLine":24,"endColumn":43},{"ruleId":"284","severity":1,"message":"317","line":34,"column":25,"nodeType":"286","messageId":"287","endLine":34,"endColumn":41},{"ruleId":"284","severity":1,"message":"288","line":2,"column":10,"nodeType":"286","messageId":"287","endLine":2,"endColumn":19},{"ruleId":"284","severity":1,"message":"318","line":5,"column":8,"nodeType":"286","messageId":"287","endLine":5,"endColumn":15},{"ruleId":"284","severity":1,"message":"309","line":15,"column":26,"nodeType":"286","messageId":"287","endLine":15,"endColumn":35},{"ruleId":"284","severity":1,"message":"319","line":15,"column":46,"nodeType":"286","messageId":"287","endLine":15,"endColumn":51},"no-unused-vars","'getDefaultMiddleware' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'usePlacesAutocomplete' is defined but never used.","'libraries' is assigned a value but never used.","'loadError' is assigned a value but never used.","'Form' is defined but never used.","'orderDetails' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'finalizeOrder' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stripePromise'. Either include it or remove the dependency array.","ArrayExpression",["320"],"React Hook useEffect has a missing dependency: 'order'. Either include it or remove the dependency array.",["321"],"'useParams' is defined but never used.","'updateUserInfoAfterPayment' is defined but never used.","'order' is assigned a value but never used.","'isError' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refetchUser'. Either include it or remove the dependency array.",["322"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'setRefetchResult' is assigned a value but never used.","'Message' is defined but never used.","'error' is assigned a value but never used.",{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},"Update the dependencies array to be: [order, createPaymentIntent, stripePromise]",{"range":"329","text":"330"},"Update the dependencies array to be: [orderId, dispatch, order]",{"range":"331","text":"332"},"Update the dependencies array to be: [refetchUser]",{"range":"333","text":"334"},[2584,2612],"[order, createPaymentIntent, stripePromise]",[2983,3002],"[orderId, dispatch, order]",[1395,1397],"[refetchUser]"]