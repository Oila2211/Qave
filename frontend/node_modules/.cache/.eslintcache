[{"/Users/mac/Afriqana/frontend/src/index.js":"1","/Users/mac/Afriqana/frontend/src/reportWebVitals.js":"2","/Users/mac/Afriqana/frontend/src/App.js":"3","/Users/mac/Afriqana/frontend/src/store.js":"4","/Users/mac/Afriqana/frontend/src/screens/ProductCatalogScreen.jsx":"5","/Users/mac/Afriqana/frontend/src/screens/HomeScreen.jsx":"6","/Users/mac/Afriqana/frontend/src/screens/ProductScreen.jsx":"7","/Users/mac/Afriqana/frontend/src/screens/DeliveryScreen.jsx":"8","/Users/mac/Afriqana/frontend/src/screens/CartScreen.jsx":"9","/Users/mac/Afriqana/frontend/src/contexts/StripeContext.js":"10","/Users/mac/Afriqana/frontend/src/screens/RegisterScreen.js":"11","/Users/mac/Afriqana/frontend/src/screens/LoginScreen.jsx":"12","/Users/mac/Afriqana/frontend/src/screens/PlaceOrderScreen.jsx":"13","/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx":"14","/Users/mac/Afriqana/frontend/src/screens/PaymentSuccess.jsx":"15","/Users/mac/Afriqana/frontend/src/screens/ProfileScreen.jsx":"16","/Users/mac/Afriqana/frontend/src/components/AdminRoute.jsx":"17","/Users/mac/Afriqana/frontend/src/components/PrivateRoute.jsx":"18","/Users/mac/Afriqana/frontend/src/screens/admin/OrderListScreen.jsx":"19","/Users/mac/Afriqana/frontend/src/screens/admin/ProductListScreen.jsx":"20","/Users/mac/Afriqana/frontend/src/screens/admin/ProductEditScreen.jsx":"21","/Users/mac/Afriqana/frontend/src/screens/admin/UserListScreen.jsx":"22","/Users/mac/Afriqana/frontend/src/screens/admin/CouponEditScreen.jsx":"23","/Users/mac/Afriqana/frontend/src/screens/admin/CouponListScreen.jsx":"24","/Users/mac/Afriqana/frontend/src/components/Header.js":"25","/Users/mac/Afriqana/frontend/src/slices/apiSlice.js":"26","/Users/mac/Afriqana/frontend/src/slices/authSlice.js":"27","/Users/mac/Afriqana/frontend/src/components/Footer.js":"28","/Users/mac/Afriqana/frontend/src/slices/stripeSlice.js":"29","/Users/mac/Afriqana/frontend/src/slices/orderSlice.js":"30","/Users/mac/Afriqana/frontend/src/slices/productsApiSlice.js":"31","/Users/mac/Afriqana/frontend/src/slices/cartSlice.js":"32","/Users/mac/Afriqana/frontend/src/slices/ordersApiSlice.js":"33","/Users/mac/Afriqana/frontend/src/slices/usersApiSlice.js":"34","/Users/mac/Afriqana/frontend/src/components/Product.jsx":"35","/Users/mac/Afriqana/frontend/src/components/Loader.jsx":"36","/Users/mac/Afriqana/frontend/src/components/Message.jsx":"37","/Users/mac/Afriqana/frontend/src/components/CheckoutSteps.jsx":"38","/Users/mac/Afriqana/frontend/src/components/FormContainer.jsx":"39","/Users/mac/Afriqana/frontend/src/components/RedeemPoints.jsx":"40","/Users/mac/Afriqana/frontend/src/components/PaymentElementScreen.jsx":"41","/Users/mac/Afriqana/frontend/src/components/ApplyCoupon.jsx":"42","/Users/mac/Afriqana/frontend/src/slices/couponApiSlice.js":"43","/Users/mac/Afriqana/frontend/src/constants.js":"44","/Users/mac/Afriqana/frontend/src/utils/cartUtils.js":"45","/Users/mac/Afriqana/frontend/src/screens/admin/RegionListScreen.jsx":"46","/Users/mac/Afriqana/frontend/src/slices/regionApiSlice.js":"47","/Users/mac/Afriqana/frontend/src/screens/admin/RegionPriceEditScreen.jsx":"48","/Users/mac/Afriqana/frontend/src/screens/admin/UserEditScreen.jsx":"49","/Users/mac/Afriqana/frontend/src/components/Paginate.jsx":"50","/Users/mac/Afriqana/frontend/src/components/ProductCarousel.jsx":"51","/Users/mac/Afriqana/frontend/src/components/Meta.jsx":"52","/Users/mac/Afriqana/frontend/src/components/FoodAnimation.jsx":"53","/Users/mac/Afriqana/frontend/src/components/HorizontalTransition.jsx":"54","/Users/mac/Afriqana/frontend/src/components/SlideTransition.jsx":"55","/Users/mac/Afriqana/frontend/src/components/FoodSwiper.jsx":"56","/Users/mac/Afriqana/frontend/src/components/SlowTransition.jsx":"57","/Users/mac/Afriqana/frontend/src/components/ModernCards.jsx":"58","/Users/mac/Afriqana/frontend/src/components/WhyChooseUs.jsx":"59"},{"size":3757,"mtime":1729165572757,"results":"60","hashOfConfig":"61"},{"size":362,"mtime":1691189867573,"results":"62","hashOfConfig":"61"},{"size":958,"mtime":1739891800864,"results":"63","hashOfConfig":"61"},{"size":700,"mtime":1698972039860,"results":"64","hashOfConfig":"61"},{"size":2279,"mtime":1729166251343,"results":"65","hashOfConfig":"61"},{"size":13870,"mtime":1739905422516,"results":"66","hashOfConfig":"61"},{"size":4297,"mtime":1693009532234,"results":"67","hashOfConfig":"61"},{"size":3450,"mtime":1725526275756,"results":"68","hashOfConfig":"61"},{"size":10225,"mtime":1699330102181,"results":"69","hashOfConfig":"61"},{"size":683,"mtime":1696633082497,"results":"70","hashOfConfig":"61"},{"size":3830,"mtime":1693609129949,"results":"71","hashOfConfig":"61"},{"size":2783,"mtime":1697836845970,"results":"72","hashOfConfig":"61"},{"size":12012,"mtime":1727795408420,"results":"73","hashOfConfig":"61"},{"size":8508,"mtime":1724147307451,"results":"74","hashOfConfig":"61"},{"size":2871,"mtime":1723854701347,"results":"75","hashOfConfig":"61"},{"size":5373,"mtime":1698149638485,"results":"76","hashOfConfig":"61"},{"size":303,"mtime":1696855510372,"results":"77","hashOfConfig":"61"},{"size":287,"mtime":1693614346050,"results":"78","hashOfConfig":"61"},{"size":2131,"mtime":1696859762348,"results":"79","hashOfConfig":"61"},{"size":7300,"mtime":1728468968479,"results":"80","hashOfConfig":"61"},{"size":5378,"mtime":1727693024018,"results":"81","hashOfConfig":"61"},{"size":2566,"mtime":1727828149685,"results":"82","hashOfConfig":"61"},{"size":3704,"mtime":1698841560744,"results":"83","hashOfConfig":"61"},{"size":4073,"mtime":1698841212474,"results":"84","hashOfConfig":"61"},{"size":3960,"mtime":1739906394230,"results":"85","hashOfConfig":"61"},{"size":322,"mtime":1727686748367,"results":"86","hashOfConfig":"61"},{"size":1297,"mtime":1698169409065,"results":"87","hashOfConfig":"61"},{"size":479,"mtime":1739906309219,"results":"88","hashOfConfig":"61"},{"size":374,"mtime":1695978780714,"results":"89","hashOfConfig":"61"},{"size":6058,"mtime":1724145972747,"results":"90","hashOfConfig":"61"},{"size":2145,"mtime":1728472455508,"results":"91","hashOfConfig":"61"},{"size":1963,"mtime":1725528323790,"results":"92","hashOfConfig":"61"},{"size":2414,"mtime":1699609977241,"results":"93","hashOfConfig":"61"},{"size":3058,"mtime":1727829188473,"results":"94","hashOfConfig":"61"},{"size":595,"mtime":1691410613223,"results":"95","hashOfConfig":"61"},{"size":371,"mtime":1692927128134,"results":"96","hashOfConfig":"61"},{"size":228,"mtime":1692927659429,"results":"97","hashOfConfig":"61"},{"size":1379,"mtime":1693616319641,"results":"98","hashOfConfig":"61"},{"size":321,"mtime":1693316315596,"results":"99","hashOfConfig":"61"},{"size":1616,"mtime":1723737910941,"results":"100","hashOfConfig":"61"},{"size":4368,"mtime":1724151098750,"results":"101","hashOfConfig":"61"},{"size":3904,"mtime":1724146302040,"results":"102","hashOfConfig":"61"},{"size":2659,"mtime":1723564130018,"results":"103","hashOfConfig":"61"},{"size":446,"mtime":1727686896446,"results":"104","hashOfConfig":"61"},{"size":710,"mtime":1725405967970,"results":"105","hashOfConfig":"61"},{"size":3772,"mtime":1727775645808,"results":"106","hashOfConfig":"61"},{"size":1636,"mtime":1727692111369,"results":"107","hashOfConfig":"61"},{"size":5635,"mtime":1727806110913,"results":"108","hashOfConfig":"61"},{"size":3005,"mtime":1727826988054,"results":"109","hashOfConfig":"61"},{"size":716,"mtime":1728471534112,"results":"110","hashOfConfig":"61"},{"size":998,"mtime":1728472309185,"results":"111","hashOfConfig":"61"},{"size":460,"mtime":1728472194474,"results":"112","hashOfConfig":"61"},{"size":50706,"mtime":1739903515044,"results":"113","hashOfConfig":"61"},{"size":2539,"mtime":1739638997350,"results":"114","hashOfConfig":"61"},{"size":2365,"mtime":1739641737459,"results":"115","hashOfConfig":"61"},{"size":1526,"mtime":1739642842909,"results":"116","hashOfConfig":"61"},{"size":3464,"mtime":1739643462047,"results":"117","hashOfConfig":"61"},{"size":3242,"mtime":1739822312202,"results":"118","hashOfConfig":"61"},{"size":4319,"mtime":1739904966107,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"938ql0",{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"123"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"123"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"123"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"123"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"123"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"123"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"123"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"123"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"123"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"123"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Afriqana/frontend/src/index.js",[],[],[],"/Users/mac/Afriqana/frontend/src/reportWebVitals.js",[],[],"/Users/mac/Afriqana/frontend/src/App.js",[],[],"/Users/mac/Afriqana/frontend/src/store.js",["308"],[],"import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"./slices/apiSlice\";\nimport  cartSliceReducer  from './slices/cartSlice';\nimport authSliceReducer from \"./slices/authSlice\";\nimport stripeReducer from \"./slices/stripeSlice\";\nimport orderSliceReducer from \"./slices/orderSlice\";\n\nconst  store = configureStore({\n    reducer: {\n        [apiSlice.reducerPath]: apiSlice.reducer,\n        cart: cartSliceReducer,\n        auth: authSliceReducer,\n        order: orderSliceReducer,\n        stripe: stripeReducer,\n    },\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(apiSlice.middleware),\n    devTools: true,\n});\n\nexport default store;","/Users/mac/Afriqana/frontend/src/screens/ProductCatalogScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/HomeScreen.jsx",["309","310","311","312"],[],"/Users/mac/Afriqana/frontend/src/screens/ProductScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/DeliveryScreen.jsx",["313","314","315","316"],[],"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport FormContainer from \"../components/FormContainer\";\nimport { saveDeliveryAddress } from \"../slices/cartSlice\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { useJsApiLoader, StandaloneSearchBox } from \"@react-google-maps/api\";\n\nconst libraries = [\"places\"]\n\nconst DeliveryScreen = () => {\n\n    const { isLoaded, loadError } = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: process.env.REACT_APP_GOOGLEMAPS_API_KEY, // Store your API key in .env\n        libraries: [\"places\"],\n    });\n\n    const cart = useSelector((state) => state.cart);\n    const { deliveryAddress } = cart;\n\n    const [address, setAddress] = useState(deliveryAddress?.address || '');\n    const [longitude, setLongitude] = useState(deliveryAddress?.longitude || '');\n    const [latitude, setLatitude] = useState(deliveryAddress?.latitude || '');\n\n\n    const [phoneNumber, setPhoneNumber] = useState(deliveryAddress?.phoneNumber || '')\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch()\n\n\n\n    const searchBoxRef = useRef(null);\n\n    const onPlacesChanged = async () => {\n        const places = searchBoxRef.current.getPlaces();\n        const place = places[0];\n        if (place) {\n            const geocode = await getGeocode({ address: place.formatted_address });\n            const { lat, lng } = getLatLng(geocode[0]);\n    \n            setAddress(place.formatted_address);\n            setLongitude(lng); // Set longitude first\n            setLatitude(lat); // before setting lat as 2nd\n\n        }\n    };\n    \n\n\n\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        console.log(\"Submitting delivery address\", {address, phoneNumber})\n        dispatch(saveDeliveryAddress({\n            address,\n            longitude, \n            latitude,\n            phoneNumber\n        }));\n        navigate('/placeorder')\n    };\n\n    if (!isLoaded) {\n        return <div>Loading...</div>;\n    }\n\n  return (\n    <FormContainer>\n    <CheckoutSteps step1 step2 />\n    <h1>Delivery</h1>\n    <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"address\" className=\"my-2\">\n            <Form.Label>Address</Form.Label>\n            <StandaloneSearchBox\n                onLoad={ref => searchBoxRef.current = ref}\n                onPlacesChanged={onPlacesChanged}\n            >\n                <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Address\"\n                    value={address}\n                    onChange={(e) => setAddress(e.target.value)}\n                />\n            </StandaloneSearchBox>\n        </Form.Group>\n\n        <Form.Group controlId=\"phoneNumber\" className=\"my-2\">\n            <Form.Label>Phone Number</Form.Label>\n            <Form.Control\n                type=\"number\"\n                placeholder=\"Enter Phone Number\"\n                value={phoneNumber}\n                onChange={(e) => setPhoneNumber(e.target.value)}\n            ></Form.Control>\n        </Form.Group>\n\n        <Button type=\"submit\" variant=\"primary\" className=\"my-2\">\n            Continue\n        </Button>\n    </Form>\n</FormContainer>\n\n)\n}\n\nexport default DeliveryScreen\n\n","/Users/mac/Afriqana/frontend/src/screens/CartScreen.jsx",["317"],[],"// import { useState } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Row, Col, ListGroup, Image, Form, Button, Card, FormControl } from \"react-bootstrap\";\n// import { FaTrash } from \"react-icons/fa6\";\n// import Message from '../components/Message';\n// import { toast } from 'react-toastify';\n// import { useApplyCouponMutation } from \"../slices/couponApiSlice\";\n// import { addToCart, removeFromCart, applyCouponDiscount } from \"../slices/cartSlice\";\n\n\n// const CartScreen = () => {\n//     const navigate = useNavigate();\n//     const dispatch = useDispatch();\n//     const [couponCode, setCouponCode] = useState('')\n\n\n//     const cart = useSelector((state) => state.cart);\n//     const { cartItems, discountPercentage } = cart; // added the discountPercentage from state;\n\n//     const [applyCoupon] = useApplyCouponMutation();\n\n//     const addToCartHandler = async (product, qty) => {\n//         dispatch(addToCart({...product, qty}))\n//     };\n\n//     const removeFromCartHandler = async (id) => {\n//         dispatch(removeFromCart(id))\n//     };\n\n//     const addCouponHandler = async () => {\n//         try {\n//             await applyCoupon(couponCode);\n//             toast.success(`Coupon applied successfully! ${discountPercentage}% off your total!`);\n//             dispatch(applyCouponDiscount(discountPercentage))\n//         } catch (error) {\n//             if (error.data && error.data.message) {\n//                 toast.error(`Coupon Error: ${error.data.message}`);\n//             } else {\n//                 toast.error('Coupon Error: Unexpected error occurred.');\n//             }\n//         }\n//     }\n\n//     const checkoutHandler = () => {\n//         navigate('/login?redirect=/delivery'); \n//     }\n\n//     const maxOrderQuantity = 10; // Adjust qty number as pleased...\n\n\n//     const subtotal = cartItems.reduce((acc, item) => acc + Number(item.qty) * Number(item.price), 0);\n//     const discountedTotal = subtotal * ((100 - Number(discountPercentage)) / 100); // Calculate the new total after applying discount\n\n//     console.log(\"Discount Percentage:\", discountPercentage);\n//     console.log(\"Raw Items Price:\", subtotal); // renamed from rawItemsPrice to subtotal for clarity\n//     console.log(\"Discount Amount:\", subtotal - discountedTotal);\n//   return (\n//     <Row>\n//         <Col md={8}>\n//             <h1 style={{marginBottom: '20px'}}>Shopping Cart</h1>\n//             {cartItems.length === 0 ? (\n//                 <Message>\n//                     Your Cart is empty <Link to='/'>Go Back</Link>\n//                 </Message>\n//             ) : (\n//                 <ListGroup variant=\"flush\">\n//                     {cartItems.map((item) => (\n//                         <ListGroup.Item key={item._id}>\n//                             <Row>\n//                                 <Col md={2}>\n//                                     <Image src={item.Image} alt={item.name} fluid rounded />\n//                                 </Col>\n//                                 <Col md={3}>\n//                                     <Link to={`/product/${item._id}`}>{item.name}</Link>\n//                                 </Col>\n//                                 <Col>{item.price}</Col>\n//                                 <Col md={2}>\n//                                 <FormControl\n//                                     as='select'\n//                                     value={item.qty}\n//                                     onChange={(e) => addToCartHandler(item, Number(e.target.value))}>\n//                                     {[...Array(maxOrderQuantity).keys()].map(x => (\n//                                         <option key={x + 1} value={x + 1}>\n//                                             {x + 1}\n//                                         </option>\n//                                     ))}\n//                                 </FormControl>\n//                                 </Col>\n//                                 <Col md={2}>\n//                                     <Button type=\"button\" variant=\"light\" onClick={ () =>\n//                                     removeFromCartHandler(item._id)}>\n//                                         <FaTrash/>\n//                                     </Button>\n//                                 </Col>\n//                             </Row>\n//                         </ListGroup.Item>\n//                     ))}\n//                 </ListGroup>\n//             ) }\n//         </Col>\n//         <Col md={4}>\n//             <Card>\n//                 <ListGroup variant=\"flush\">\n//                     <ListGroup.Item>\n//                         <ListGroup.Item>\n//                             <Form.Control \n//                               type=\"text\"\n//                               placeholder=\"Enter coupon code\"\n//                               value={couponCode}\n//                               onChange={(e) => setCouponCode(e.target.value)}\n//                             />\n//                             <Button onClick={addCouponHandler}>\n//                                 Apply Coupon\n//                             </Button>\n//                         </ListGroup.Item>\n//                         { discountPercentage > 0 && \n//                           <span>Discount applied: {discountPercentage}%</span>\n//                         }\n//                         <h2>\n//                             {/* Subtotal ({ cartItems.reduce((acc, item) => acc + item.qty, 0)}) */}\n//                             Subtotal{subtotal}\n//                             items\n//                         </h2>\n//                         SEK{ discountedTotal.toFixed(2)}\n//                     </ListGroup.Item>\n//                     <ListGroup.Item>\n//                         <Button type=\"button\" className=\"btn-block\"\n//                          disabled={cartItems.length === 0}\n//                          onClick={checkoutHandler}>\n//                             Proceed To CheckOut\n//                         </Button>\n//                     </ListGroup.Item>\n//                 </ListGroup>\n//             </Card>\n//         </Col>\n//     </Row>\n//   )\n// }\n\n// export default CartScreen;\n\n\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row, Col, ListGroup, Image, Form, Button, Card, FormControl } from \"react-bootstrap\";\nimport { FaTrash } from \"react-icons/fa6\";\nimport Message from '../components/Message'\nimport { addToCart, removeFromCart } from \"../slices/cartSlice\";\nimport { resetOrderValues } from \"../slices/orderSlice\";\n\nconst CartScreen = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n\n    const cart = useSelector((state) => state.cart);\n    const { cartItems } = cart;\n\n    const addToCartHandler = async (product, qty) => {\n        dispatch(addToCart({...product, qty}))\n    };\n\n    const removeFromCartHandler = async (id) => {\n        dispatch(removeFromCart(id))\n    };\n\n    const checkoutHandler = () => {\n        dispatch(resetOrderValues())\n        navigate('/login?redirect=/delivery');\n    }\n\n    const maxOrderQuantity = 10; // Adjust qty number as pleased...\n  return (\n    <Row>\n        <Col md={8}>\n            <h1 style={{marginBottom: '20px'}}>Shopping Cart</h1>\n            {cartItems.length === 0 ? (\n                <Message>\n                    Your Cart is empty <Link to='/'>Go Back</Link>\n                </Message>\n            ) : (\n                <ListGroup variant=\"flush\">\n                    {cartItems.map((item) => (\n                        <ListGroup.Item key={item._id}>\n                            <Row>\n                                <Col md={2}>\n                                    <Image src={item.Image} alt={item.name} fluid rounded />\n                                </Col>\n                                <Col md={3}>\n                                    <Link to={`/product/${item._id}`}>{item.name}</Link>\n                                </Col>\n                                <Col>{item.price}</Col>\n                                <Col md={2}>\n                                <FormControl\n                                    as='select'\n                                    value={item.qty}\n                                    onChange={(e) => addToCartHandler(item, Number(e.target.value))}>\n                                    {[...Array(maxOrderQuantity).keys()].map(x => (\n                                        <option key={x + 1} value={x + 1}>\n                                            {x + 1}\n                                        </option>\n                                    ))}\n                                </FormControl>\n                                </Col>\n                                <Col md={2}>\n                                    <Button type=\"button\" variant=\"light\" onClick={ () =>\n                                    removeFromCartHandler(item._id)}>\n                                        <FaTrash/>\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n                    ))}\n                </ListGroup>\n            ) }\n        </Col>\n        <Col md={4}>\n            <Card>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <h2>\n                            Subtotal ({ cartItems.reduce((acc, item) => acc + item.qty, 0)})\n                            items\n                        </h2>\n                        SEK{ cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2) }\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <Button type=\"button\" className=\"btn-block\"\n                         disabled={cartItems.length === 0}\n                         onClick={checkoutHandler}>\n                            Proceed To CheckOut\n                        </Button>\n                    </ListGroup.Item>\n                </ListGroup>\n            </Card>\n        </Col>\n    </Row>\n  )\n}\n\nexport default CartScreen;","/Users/mac/Afriqana/frontend/src/contexts/StripeContext.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/RegisterScreen.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/LoginScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/PlaceOrderScreen.jsx",["318","319"],[],"import { useEffect } from \"react\";\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader'\nimport { useCreateOrderMutation } from '../slices/ordersApiSlice';\nimport { setOrderId, setOrderValues } from \"../slices/orderSlice\";\nimport { clearCartItems } from '../slices/cartSlice';\n\n\nconst PlaceOrderScreens = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const cart = useSelector((state) => state.cart);\n\n  const [createOrder, {isLoading, error}] = useCreateOrderMutation();\n\n  const orderDetails = useSelector((state) => state.order.orderPrices);\n\n\n  // const order = useSelector((state) => state.order); // Get the order state from Redux\n\n\n  useEffect(() => {\n    if (!cart.deliveryAddress.address) {\n      navigate('/delivery');\n    } else if (!cart.paymentMethod) {\n      navigate('/payment')\n    }\n  }, [cart.paymentMethod, cart.deliveryAddress.address, navigate])\n\n\n  const placeOrderHandler = async () => {\n    try {\n\n      console.log(\"Order Details:\", {\n        orderItems: cart.cartItems,\n        deliveryAddress: cart.deliveryAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        deliveryPrice: cart.deliveryPrice,\n        phoneNumber: cart.phoneNumber,\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice\n    });\n\n\n\n      const res = await createOrder({\n        orderItems: cart.cartItems,\n        deliveryAddress: cart.deliveryAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        deliveryPrice: cart.deliveryPrice,\n        phoneNumber: cart.phoneNumber,\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice\n      }).unwrap();\n      \n      \n      if (res && res.createdOrder && res.createdOrder._id) {\n\n       // Dispatch order details to Redux\n       dispatch(setOrderValues({\n        itemsPrice: res.createdOrder.itemsPrice,\n        deliveryPrice: res.createdOrder.deliveryPrice,\n        taxPrice: res.createdOrder.taxPrice,\n        totalPrice: res.createdOrder.totalPrice,\n        discountAmount: res.createdOrder.discountAmount || 0, // Assuming this exists\n      }));\n\n         // Dispatch orderId to Redux\n         dispatch(setOrderId(res.createdOrder._id));\n         dispatch(clearCartItems());\n         navigate(`/order/${res.createdOrder._id}`); \n      } else {\n        toast.error(\"Order ID not found in the response\")\n      }\n    } catch (err) {\n        console.log(\"Error objecr\", err);\n        // Checking if error is related to no delivery to the region.\n        if (err.status === 400 && err.data.error == 'Delivery not available for this location') {\n          toast.error('Delivery Not available for this location');\n        } else {\n          toast.error(err?.data?.error || 'Failed to place order. Please try again.')\n      }\n    }\n  }\n\n  return (<>\n    <CheckoutSteps step1 step2 step3 step4 />\n    <Row>\n      <Col md={8}>\n        <ListGroup variant=\"flush\">\n          <ListGroup.Item>\n            <h2>Delivery</h2>\n            <p>\n              <strong>Address</strong>\n              {cart.deliveryAddress.address}, \n            </p>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <h2>Payment Method</h2>\n            <strong>Method: </strong>\n            {cart.paymentMethod}\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <h2>Order Items</h2>\n            {cart.cartItems.length === 0 ? (\n              <Message>Your cart is empty</Message>\n            ) : (\n              <ListGroup variant=\"flush\">\n                {cart.cartItems.map((item, index) =>(\n                  <ListGroup.Item key={index}>\n                    <Row>\n                      <Col md={1}>\n                        <Image \n                          src={item.image}\n                          alt={item.name}\n                          fluid\n                          rounded\n                        />\n                      </Col>\n                      <Col>\n                        <Link to={`/products/${item.product}`}>\n                          {item.name}\n                        </Link>\n                      </Col>\n                      <Col md={4}>\n                        { item.qty } x SEK{ item.price } = SEK{ item.qty * item.price }\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                ) )}\n              </ListGroup>\n            )}\n          </ListGroup.Item>\n        </ListGroup>\n      </Col>\n      <Col md={4}>\n        <Card>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>\n              <h2>Order Summary</h2>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Row>\n                <Col>Items:</Col>\n                <Col>SEK{cart.itemsPrice}</Col>\n              </Row>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Row>\n                <Col>Delivery:</Col>\n                <Col>SEK{cart.deliveryPrice}</Col>\n              </Row>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Row>\n                <Col>Tax:</Col>\n                <Col>SEK{cart.taxPrice}</Col>\n              </Row>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <Row>\n                <Col><strong>Total</strong></Col>\n                <Col>SEK{cart.totalPrice}</Col>\n              </Row>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              {error && <Message variant='danger'>{error.data ? error.data.message : \"An error occurred\"}</Message>}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <Button\n                type=\"button\"\n                className=\"btn-block\"\n                disabled={cart.cartItems.length === 0}\n                onClick={placeOrderHandler}\n              >\n                Place Order\n              </Button>\n              {isLoading && <Loader />}\n            </ListGroup.Item>\n          </ListGroup>\n        </Card>\n      </Col>\n    </Row>\n    </>\n  )\n}\n\nexport default PlaceOrderScreens\n\n\n\n\n\n\n// import { useEffect, useState } from \"react\";\n// import { Link, useNavigate } from 'react-router-dom';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\n// import { toast } from 'react-toastify';\n// import CheckoutSteps from '../components/CheckoutSteps';\n// import Message from '../components/Message';\n// import Loader from '../components/Loader'\n// import { useCreateOrderMutation } from '../slices/ordersApiSlice';\n// import { setOrderId } from \"../slices/orderSlice\";\n// import { clearCartItems } from '../slices/cartSlice';\n\n\n// const PlaceOrderScreens = () => {\n//   const navigate = useNavigate();\n//   const dispatch = useDispatch();\n//   const cart = useSelector((state) => state.cart);\n\n//   const [createOrder, {isLoading, error}] = useCreateOrderMutation();\n\n//   const orderDetails = useSelector((state) => state.order.orderPrices);\n\n\n//   // const order = useSelector((state) => state.order); // Get the order state from Redux\n\n\n//   useEffect(() => {\n//     if (!cart.deliveryAddress.address) {\n//       navigate('/delivery');\n//     } else if (!cart.paymentMethod) {\n//       navigate('/payment')\n//     }\n//   }, [cart.paymentMethod, cart.deliveryAddress.address, navigate])\n\n\n//   const placeOrderHandler = async () => {\n//     try {\n//       const res = await createOrder({\n//         orderItems: cart.cartItems,\n//         deliveryAddress: cart.deliveryAddress,\n//         paymentMethod: cart.paymentMethod,\n//         itemsPrice: cart.itemsPrice,\n//         deliveryPrice: cart.deliveryPrice,\n//         phoneNumber: cart.phoneNumber,\n//         taxPrice: cart.taxPrice,\n//         totalPrice: cart.totalPrice\n//       }).unwrap();\n//       dispatch(clearCartItems());\n      \n//       if (res && res.createdOrder && res.createdOrder._id) {\n//          // Dispatch orderId to Redux\n//          dispatch(setOrderId(res.createdOrder._id));\n         \n//          navigate(`/order/${res.createdOrder._id}`); \n//       } else {\n//         toast.error(\"Order ID not found in the response\")\n//       }\n//     } catch (err) {\n//       toast.error(err)\n//     }\n//   }\n\n//   return (<>\n//     <CheckoutSteps step1 step2 step3 step4 />\n//     <Row>\n//       <Col md={8}>\n//         <ListGroup variant=\"flush\">\n//           <ListGroup.Item>\n//             <h2>Delivery</h2>\n//             <p>\n//               <strong>Address</strong>\n//               {cart.deliveryAddress.address}, \n//             </p>\n//           </ListGroup.Item>\n//           <ListGroup.Item>\n//             <h2>Payment Method</h2>\n//             <strong>Method: </strong>\n//             {cart.paymentMethod}\n//           </ListGroup.Item>\n//           <ListGroup.Item>\n//             <h2>Order Items</h2>\n//             {cart.cartItems.length === 0 ? (\n//               <Message>Your cart is empty</Message>\n//             ) : (\n//               <ListGroup variant=\"flush\">\n//                 {cart.cartItems.map((item, index) =>(\n//                   <ListGroup.Item key={index}>\n//                     <Row>\n//                       <Col md={1}>\n//                         <Image \n//                           src={item.image}\n//                           alt={item.name}\n//                           fluid\n//                           rounded\n//                         />\n//                       </Col>\n//                       <Col>\n//                         <Link to={`/products/${item.product}`}>\n//                           {item.name}\n//                         </Link>\n//                       </Col>\n//                       <Col md={4}>\n//                         { item.qty } x SEK{ item.price } = SEK{ item.qty * item.price }\n//                       </Col>\n//                     </Row>\n//                   </ListGroup.Item>\n//                 ) )}\n//               </ListGroup>\n//             )}\n//           </ListGroup.Item>\n//         </ListGroup>\n//       </Col>\n//       <Col md={4}>\n//         <Card>\n//           <ListGroup variant=\"flush\">\n//             <ListGroup.Item>\n//               <h2>Order Summary</h2>\n//             </ListGroup.Item>\n//             <ListGroup.Item>\n//               <Row>\n//                 <Col>Items:</Col>\n//                 <Col>SEK{cart.itemsPrice}</Col>\n//               </Row>\n//             </ListGroup.Item>\n//             <ListGroup.Item>\n//               <Row>\n//                 <Col>Delivery:</Col>\n//                 <Col>SEK{cart.deliveryPrice}</Col>\n//               </Row>\n//             </ListGroup.Item>\n//             <ListGroup.Item>\n//               <Row>\n//                 <Col>Tax:</Col>\n//                 <Col>SEK{cart.taxPrice}</Col>\n//               </Row>\n//             </ListGroup.Item>\n//             <ListGroup.Item>\n//               <Row>\n//                 <Col><strong>Total</strong></Col>\n//                 <Col>SEK{cart.totalPrice}</Col>\n//               </Row>\n//             </ListGroup.Item>\n\n//             <ListGroup.Item>\n//               {error && <Message variant='danger'>{error.data ? error.data.message : \"An error occurred\"}</Message>}\n//             </ListGroup.Item>\n\n//             <ListGroup.Item>\n//               <Button\n//                 type=\"button\"\n//                 className=\"btn-block\"\n//                 disabled={cart.cartItems.length === 0}\n//                 onClick={placeOrderHandler}\n//               >\n//                 Place Order\n//               </Button>\n//               {isLoading && <Loader />}\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Card>\n//       </Col>\n//     </Row>\n//     </>\n//   )\n// }\n\n// export default PlaceOrderScreens\n","/Users/mac/Afriqana/frontend/src/screens/OrderScreen.jsx",["320","321","322"],[],"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector} from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { toast } from 'react-toastify';\nimport { Elements } from '@stripe/react-stripe-js';\nimport PaymentElementScreen from '../components/PaymentElementScreen';\nimport ApplyCoupon from '../components/ApplyCoupon';\nimport { useStripePromise } from '../contexts/StripeContext';\nimport { useGetOrderDetailsQuery, useCreatePaymentIntentMutation, useDeliverOrderMutation } from '../slices/ordersApiSlice';\nimport RedeemPoints from '../components/RedeemPoints';\nimport { setOrderValues, finalizeOrder, setOrderId } from \"../slices/orderSlice\";\n\n\nconst OrderScreen = () => {\n\n  const [clientSecret, setClientSecret] = useState('');\n  \n  // Selector to get orderId and orderPricesfrom Redux\n  const orderId = useSelector((state) => state.order.orderId);\n  const orderPrices = useSelector((state) => state.order.orderPrices);\n\n  const [hasPaid, setHasPaid] = useState(false);\n  const [paymentDate, setPaymentDate] = useState(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  const stripePromise = useStripePromise()\n  const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n  const [createPaymentIntent] = useCreatePaymentIntentMutation();\n  const { userInfo } = useSelector((state) => state.auth);\n  const [deliverOrder, {isLoading: loadingDeliver }] = \n  useDeliverOrderMutation();\n\n  const markAsPaid = () => {\n    setHasPaid(true);\n    setPaymentDate(new Date().toISOString());\n  };\n\n\n  useEffect(() => {\n    if (!orderId) {\n        // If orderId is not in Redux state, retrieve it from localStorage\n        const storedOrderId = localStorage.getItem('orderId');\n        if (storedOrderId) {\n            dispatch(setOrderId(storedOrderId));\n        } else {\n            toast.error('Order ID not found. Redirecting to home.');\n            navigate('/');\n        }\n    }\n  }, [orderId, dispatch, navigate]);\n\n\n  useEffect(() => {\n    console.log(\"my stripe promise is:\", stripePromise)\n    if (order && !order.isPaid) {\n      createPaymentIntent({ amount: order.totalPrice * 100 })\n        .unwrap()\n        .then((data) => {\n          setClientSecret(data.clientSecret);\n        })\n        .catch((err) => {\n          console.error(\"Error fetching client secret:\", err.message);\n        });\n    }\n  }, [order, createPaymentIntent]);\n\n  useEffect(() => {\n    // Set initial values when the component mounts\n    if (order) {\n        dispatch(setOrderValues({\n        itemsPrice: order.itemsPrice,\n        deliveryPrice: order.deliveryPrice,\n        taxPrice: order.taxPrice,\n        totalPrice: order.totalPrice,\n        discountAmount: 0,\n        isFinalized: false,\n        } \n        ));\n    } \n  }, [orderId, dispatch]);\n  \n  \n\n\n  const deliverOrderHandler = async () => {\n    try {\n      await deliverOrder(orderId);\n      refetch();\n      toast.success('Order delivered')\n    } catch (err) {\n      toast.error(err?.data?.message || err?.message)\n    }\n  }\n\n\n  if (isLoading) return <Loader />;\n  if (isError) return <Message variant=\"danger\">{isError.message}</Message>;\n\n  const appearance = {\n    theme: 'stripe',\n  };\n  const options = {\n    clientSecret,\n    appearance,\n  };\n\n\n\n  return (\n    <>\n\n    <h2>Order {order._id}</h2>\n    <Row>\n        <Col md={8}>\n            <ListGroup>\n                <ListGroup.Item>\n                    <h3>Delivery</h3>\n                    <p>\n                        <strong>Name:</strong> {order.user.name}\n                    </p>\n                    <p>\n                        <strong>Email:</strong> {order.user.email}\n                    </p>\n                    <p>\n                        <strong>Address:</strong> {order.deliveryAddress.address}\n                    </p>\n                    {order.isDelivered ? (\n                        <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                    ) : (\n                        <Message variant=\"danger\">Not Delivered </Message>\n                    )}\n                </ListGroup.Item>\n\n                <RedeemPoints />\n\n                <ListGroup.Item>\n                    <h3>Payment Status</h3>\n                    {/* <p>\n                        <strong>Method:</strong>\n                        {order.paymentMethod}\n                    </p> */}\n                    {order.isPaid || hasPaid ? (\n                        <Message variant=\"success\">Paid on {order.paidAt || paymentDate}</Message>\n                    ) : (\n                        <Message variant=\"danger\">Not Paid </Message>\n                    )}\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                    <h2>Order Items</h2>\n                    <ListGroup variant='flush'>\n                        {order.orderItems.map((item, index) => (\n                            <ListGroup.Item key={index}>\n                                <Row>\n                                    <Col md={1}>\n                                        <Image src={item.image} alt={item.name} fluid rounded />\n                                    </Col>\n                                    <Col>\n                                        <Link to={`/product/${item.product}`}>\n                                            {item.name}\n                                        </Link>\n                                    </Col>\n                                    <Col md={4}>\n                                        {item.qty} x ${item.price} = ${item.qty * item.price}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        ))}\n                    </ListGroup>\n                </ListGroup.Item>\n            </ListGroup>\n        </Col>\n\n        <Col md={4}>\n            <Card>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <h3>Order Summary</h3>\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <Row>\n                            <Col>Items</Col>\n                            <Col>SEK{orderPrices.itemsPrice}</Col>\n                        </Row>\n                        <Row>\n                            <Col>Discount</Col>\n                            <Col>SEK{orderPrices.discountAmount}</Col>\n                        </Row>\n                        <Row>\n                            <Col>Delivery</Col>\n                            <Col>SEK{orderPrices.deliveryPrice}</Col>\n                        </Row>\n                        <Row>\n                            <Col>Tax</Col>\n                            <Col>SEK{orderPrices.taxPrice}</Col>\n                        </Row>\n                        <Row>\n                            <Col><strong>Total</strong></Col>\n                            <Col>SEK{orderPrices.totalPrice}</Col>\n                        </Row>\n                    </ListGroup.Item>\n                    \n                    {(!order.isPaid && !hasPaid && clientSecret && stripePromise ) ? (\n                        <ListGroup.Item>\n                           <Elements options={options} stripe={stripePromise}>\n                            <PaymentElementScreen markAsPaid={markAsPaid} clientSecret={clientSecret}/>\n                            </Elements>\n                        </ListGroup.Item>\n                    ) : (\n                        <p>Payment already made </p>\n                    )}\n\n                    {loadingDeliver && <Loader />}\n\n                    <ListGroup.Item>\n                        <ApplyCoupon />\n                    </ListGroup.Item>\n\n                    {userInfo && userInfo.isAdmin && order.isPaid &&\n                    !order.isDelivered && (\n                      <ListGroup.Item>\n                        <Button \n                         type='button'\n                         className='btn btn-block'\n                         onClick={deliverOrderHandler}\n                        >\n                            Mark as Delivered\n                        </Button>\n                      </ListGroup.Item>\n                    )}\n\n                    \n                </ListGroup>\n            </Card>\n        </Col>\n    </Row>\n</>\n\n  );\n};\n\nexport default OrderScreen;","/Users/mac/Afriqana/frontend/src/screens/PaymentSuccess.jsx",["323","324","325","326","327","328"],[],"import React, { useEffect } from 'react';\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport { updateUserInfoAfterPayment } from '../slices/authSlice';\nimport { useGetOrderDetailsQuery, usePayOrderMutation } from '../slices/ordersApiSlice';\nimport { resetOrderValues } from '../slices/orderSlice';\nimport { toast } from 'react-toastify';\nimport { useStripePromise } from '../contexts/StripeContext';\n\nconst PaymentSuccess = () => {\n\n    const orderId = useSelector((state) => state.order.orderId);  // Use Redux state for orderId\n    const dispatch = useDispatch();\n    \n    const { data: order, refetch, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n    const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\n    const stripe = useStripePromise()\n\n    useEffect(() => {\n        \n        if (!stripe) return;\n\n        const url = new URL(window.location);\n        const clientSecret = url.searchParams.get('payment_intent_client_secret');\n        const fetchPaymentIntent = async () => {\n          const { paymentIntent, error: retrieveError } = await stripe.retrievePaymentIntent(clientSecret);\n            \n          if (retrieveError) {\n              toast.error(`Error retrieving payment details: ${retrieveError.message}`);\n              return;\n            };   \n          \n              const details = {\n                  id: paymentIntent.id,\n                  status: paymentIntent.status,\n                  update_time: new Date().toISOString(),\n                  email_address: paymentIntent.receipt_email,\n              };\n              \n              await payOrder({ orderId, details});\n              // markAsPaid(orderId)\n              toast.success('Order is Paid')\n\n              // Reset orderId after successful payment\n              dispatch(resetOrderValues());\n              // dispatch(resetOrderId())\n          } \n          refetch()\n    \n        fetchPaymentIntent();\n        \n    }, [stripe, payOrder, refetch, orderId, dispatch]);\n\n      \n\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col xs={12} md={6}>\n          <Card>\n            <Card.Body>\n              <Card.Title className=\"text-center\">\n                <h2>Payment Successful!</h2>\n              </Card.Title>\n              <Card.Text className=\"text-center\">\n                Your payment has been successfully processed.\n              </Card.Text>\n              <div className=\"d-flex justify-content-center\">\n                <Link to=\"/\">\n                  <Button variant=\"primary\">Go to Home</Button>\n                </Link>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default PaymentSuccess;\n","/Users/mac/Afriqana/frontend/src/screens/ProfileScreen.jsx",["329"],[],"import React, { useEffect, useState } from 'react';\nimport { Table, Form, Button, Row, Col } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaTimes } from 'react-icons/fa';\n\nimport { toast } from 'react-toastify';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { useProfileMutation, useCurrentUserDetailsQuery } from '../slices/usersApiSlice';\nimport { useGetMyOrdersQuery } from '../slices/ordersApiSlice';\nimport { setCredentials } from '../slices/authSlice';\n\n\n\nconst ProfileScreen = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [updateProfile, {isLoading: loadingUpdateProfile}] = useProfileMutation();\n  const { refetch: refetchUser } = useCurrentUserDetailsQuery();\n\n  const dispatch = useDispatch();\n\n  const { userInfo } = useSelector((state) => state.auth)\n\n  const { data: orders, isLoading, error } = useGetMyOrdersQuery();\n\n  useEffect(() => {\n    if (userInfo) { \n      setName(userInfo.name)\n      setEmail(userInfo.email)\n    }\n  }, [userInfo, userInfo.name, userInfo.email])\n\n  useEffect(() => {\n    // Call refetchUser when the component mounts\n    refetchUser();\n  }, []);  \n\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword)  {\n      toast.error('Password do not match')\n    } else {\n      try {\n        const res = await updateProfile({ _id:userInfo._id, \n          name, email, password }).unwrap();\n          dispatch(setCredentials(res))\n          toast.success('Profile updated successfully')\n      } catch (err) {\n        toast.error(err?.data.message || err?.error );\n      }\n    }\n  }\n\n\n  return (\n    <Row>\n      <Col md={3}>\n        <h2>User Profile</h2>\n        <p className='text-primary'><strong>Qana Points:</strong> {userInfo.qanaPoints}</p>\n        <Form onSubmit={submitHandler}>\n          <Form.Group className='my-2' controlId='name'>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type='text'\n              placeholder='Enter name'\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='email'>\n            <Form.Label>Email Address</Form.Label>\n            <Form.Control\n              type='email'\n              placeholder='Enter email'\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='password'>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type='password'\n              placeholder='Enter password'\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group className='my-2' controlId='confirmPassword'>\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type='password'\n              placeholder='Confirm password'\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Button type='submit' variant='primary'>\n            Update\n          </Button>\n          {loadingUpdateProfile && <Loader />}\n        </Form>\n\n      </Col>\n\n      <Col md={9}>\n        <h2>My Orders</h2>\n        {isLoading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant='danger'>\n            {error?.data?.message || error.error}\n          </Message>\n        ) : (\n          <Table striped hover responsive className='table-sm'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>{order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt.substring(0, 10)\n                    ) : (\n                      <FaTimes style={{ color: 'red' }} />\n                    )}\n                  </td>\n                  <td>\n                    {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                    ) : (\n                      <FaTimes style={{ color: 'red' }} />\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button className='btn-sm' variant='light'>\n                        Details\n                      </Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Col>\n    </Row>\n  )\n}\n\nexport default ProfileScreen","/Users/mac/Afriqana/frontend/src/components/AdminRoute.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/PrivateRoute.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/OrderListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/ProductListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/ProductEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/UserListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/CouponEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/CouponListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Header.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/apiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/authSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/components/Footer.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/stripeSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/orderSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/productsApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/cartSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/ordersApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/slices/usersApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/components/Product.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Loader.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Message.jsx",["330"],[],"import { Alert } from \"react-bootstrap\";\n\nconst Message = ({ variant, children}) => {\n  return (\n    <Alert variant={variant}>{children}</Alert>\n  );\n\n  Message.defaultProps = {\n    variant: 'info',\n  }\n}\n\nexport default Message","/Users/mac/Afriqana/frontend/src/components/CheckoutSteps.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/FormContainer.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/RedeemPoints.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/PaymentElementScreen.jsx",["331","332","333","334","335"],[],"import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { Button } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { updateUserInfoAfterPayment } from '../slices/authSlice';\nimport { useStripePromise } from '../contexts/StripeContext';\nimport { usePayOrderMutation, useGetOrderDetailsQuery } from '../slices/ordersApiSlice';\nimport { useCurrentUserDetailsQuery } from '../slices/usersApiSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nconst PaymentElementScreen = ({ clientSecret ,markAsPaid }) => {\n  const { id: orderId } = useParams();\n  const  stripe  = useStripePromise();\n  const elements = useElements();\n  const dispatch = useDispatch();\n\n  // Extract couponCode from redux\n  const couponCode = useSelector((state) => state.order.couponCode); \n\n  const { data: order, isError, isLoading } = useGetOrderDetailsQuery(orderId);\n  const [payOrder, { isLoading: loadingPay }] = usePayOrderMutation();\n\n  // Destructure the refetch function for the user's details\n  const { data: currentUser, refetch: refetchUser } = useCurrentUserDetailsQuery();\n\n\n  const [processing, setProcessing] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n\n  // const [showModal, setShowModal] = useState(false);\n  const [refetchResult, setRefetchResult] = useState(null);\n\n\n  useEffect(() => {\n    if (refetchResult?.isSuccess === true) {\n      toast.success('User details updated!');\n    } else if (refetchResult?.isError === true) {\n      toast.error('Failed to update user details.');\n    }\n  }, [refetchResult, currentUser]);\n  \n\n  const handleChange = async (event) => {\n    setDisabled(event.empty);\n    if (event.error) {\n        toast.error(event.error.message);\n    }\n    if (!stripe || !elements) {\n        // Stripe.js hasn't yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n};\n\n  const handlePayment = async (event) => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n  setProcessing(true);\n\n  // Trigger form validation and wallet collection\n  const { error: submitError } = await elements.submit();\n  if (submitError) {\n    toast.error(`Payment failed: ${submitError.message}`);\n    setProcessing(false);\n    return;\n  }\n\n    // Confirm the PaymentIntent\n    const { error } = await stripe.confirmPayment({\n      elements,\n      clientSecret,\n      confirmParams: {\n        return_url: `${window.location.origin}/payment-success/${orderId}`,\n      },\n      redirect: 'if_required'\n    });\n\n    if (error) {\n      toast.error(`Payment failed: ${error.message}`);\n      setProcessing(false);\n      return;\n    }\n\n    // Retrieve PaymentIntent to get detailed info\n    const { paymentIntent, error: retrieveError } = await stripe.retrievePaymentIntent(clientSecret);\n\n    if (retrieveError) {\n      toast.error(`Payment failed: ${retrieveError.message}`);\n      setProcessing(false);\n      return;\n    }\n\n\n    // Assuming paymentIntent.status === 'succeeded'\n    const details = {\n      id: paymentIntent.id,\n      status: paymentIntent.status,\n      update_time: new Date().toISOString(),\n      email_address: paymentIntent.receipt_email || 'default_email@example.com', // replace with actual email\n      couponCode // Pass couponCode here\n    };\n  \n    // Include couponCode in the payment payload\n    const response = await payOrder({ orderId, details });\n    if (response.data.updatedUser) {\n      dispatch(updateUserInfoAfterPayment(response.data.updatedUser))\n    }\n    markAsPaid(orderId);\n    await refetchUser();\n    toast.success('Order is Paid');\n    setProcessing(false);\n\n    \n\n    console.log(\"refetched user data is:\", currentUser)\n};\n\n\n  return (\n    <>\n      <form onSubmit={handlePayment}>\n      <div style={{ marginBottom: \"20px\" }}>\n          <PaymentElement onChange={handleChange} />\n      <Button type='submit' disabled={!stripe || processing || disabled } style={{ marginTop: \"10px\" }}>\n          {processing ? \"Processing...\":\"Pay Now\"}\n      </Button>\n          </div>\n      </form>\n\n    </>\n  );\n};\n\nexport default PaymentElementScreen;\n","/Users/mac/Afriqana/frontend/src/components/ApplyCoupon.jsx",["336","337","338","339"],[],"import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport Message from '../components/Message';\nimport { useApplyCouponMutation } from \"../slices/couponApiSlice\";\nimport { setOrderValues, putCouponCode } from \"../slices/orderSlice\";\nimport { useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\nconst ApplyCoupon = () => {\n    \n    const dispatch = useDispatch()\n    const [couponCode, setCouponCode] = useState('');\n    const [applyCoupon, {isLoading, refetch, error}] = useApplyCouponMutation()\n    \n    // Selector to get orderId from Redux\n    const orderId = useSelector((state) => state.order.orderId);\n\n\n    const submitHandler = async (e) => {\n      e.preventDefault();\n\n      try {\n          const res = await applyCoupon({ couponCode, orderId }).unwrap();\n\n          if (res && res.orderPrices) {\n              toast.success(\"Coupon successfully applied\");\n              dispatch(setOrderValues(res.orderPrices)); // Update the order prices in the state\n              dispatch(putCouponCode(couponCode)); // save coupon code\n              refetch();\n          } else {\n              toast.error(\"Failed to apply the coupon\");\n          }\n      } catch (err) {\n          console.error(\"Coupon Error:\", err);\n          toast.error(err?.data?.message || err?.error);\n      }\n  };\n\n\n\n\n  return (\n    <>\n    <Form onSubmit={submitHandler}>\n        <InputGroup className=\"mb-3\">\n            <Form.Control\n            placeholder=\"Coupon code\"\n            aria-describedby=\"basic-addon2\"\n            value={couponCode}\n            onChange={(e) => setCouponCode(e.target.value)}\n\n            />\n            <Button type=\"submit\"  variant=\"outline-secondary\" id=\"button-addon2\">\n            Apply Coupon\n            </Button>\n        </InputGroup>     \n      </Form>\n    </>\n  )\n}\n\nexport default ApplyCoupon\n\n\n\n\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { useState } from \"react\";\n// import { Button, Form, InputGroup } from 'react-bootstrap';\n// import { toast } from 'react-toastify';\n// import { useParams } from 'react-router-dom';\n// import { useApplyCouponMutation } from \"../slices/couponApiSlice\";\n// import { setOrderValues } from \"../slices/orderSlice\";\n\n// const ApplyCoupon = () => {\n//   const dispatch = useDispatch();\n//   const { id: orderId } = useParams(); // Get orderId from the URL params\n//   const [couponCode, setCouponCode] = useState('');\n//   const orderId = useSelector((state) => state.order.orderId);\n//   const [applyCoupon, { isLoading, refetch, error }] = useApplyCouponMutation();\n\n//   const submitHandler = async (e) => {\n//     e.preventDefault();\n\n//     const payload = { couponCode, orderId };\n\n\n//     try {\n//       const res = await applyCoupon(payload).unwrap();\n\n//       if (res && res.orderPrices) {\n//         toast.success(\"Coupon successfully applied\");\n//         dispatch(setOrderValues(res.orderPrices)); // Update the order prices in the state\n//         refetch();\n//       } else {\n//         toast.error(\"Failed to apply the coupon\");\n//       }\n//     } catch (err) {\n//       console.error(\"Coupon Error:\", err);\n//       toast.error(err?.data?.message || err?.error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Form onSubmit={submitHandler}>\n//         <InputGroup className=\"mb-3\">\n//           <Form.Control\n//             placeholder=\"Coupon code\"\n//             aria-describedby=\"basic-addon2\"\n//             value={couponCode}\n//             onChange={(e) => setCouponCode(e.target.value)}\n//           />\n//           <Button type=\"submit\" variant=\"outline-secondary\" id=\"button-addon2\">\n//             Apply Coupon\n//           </Button>\n//         </InputGroup>\n//       </Form>\n//     </>\n//   );\n// };\n\n// export default ApplyCoupon;","/Users/mac/Afriqana/frontend/src/slices/couponApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/constants.js",[],[],"/Users/mac/Afriqana/frontend/src/utils/cartUtils.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/RegionListScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/slices/regionApiSlice.js",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/RegionPriceEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/screens/admin/UserEditScreen.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Paginate.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/ProductCarousel.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/Meta.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/FoodAnimation.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/HorizontalTransition.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/SlideTransition.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/FoodSwiper.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/SlowTransition.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/ModernCards.jsx",[],[],"/Users/mac/Afriqana/frontend/src/components/WhyChooseUs.jsx",[],[],{"ruleId":"340","severity":1,"message":"341","line":1,"column":26,"nodeType":"342","messageId":"343","endLine":1,"endColumn":46},{"ruleId":"340","severity":1,"message":"344","line":329,"column":21,"nodeType":"342","messageId":"343","endLine":329,"endColumn":24},{"ruleId":"340","severity":1,"message":"345","line":329,"column":26,"nodeType":"342","messageId":"343","endLine":329,"endColumn":29},{"ruleId":"340","severity":1,"message":"346","line":329,"column":31,"nodeType":"342","messageId":"343","endLine":329,"endColumn":35},{"ruleId":"340","severity":1,"message":"347","line":329,"column":37,"nodeType":"342","messageId":"343","endLine":329,"endColumn":43},{"ruleId":"340","severity":1,"message":"348","line":3,"column":28,"nodeType":"342","messageId":"343","endLine":3,"endColumn":37},{"ruleId":"340","severity":1,"message":"349","line":10,"column":8,"nodeType":"342","messageId":"343","endLine":10,"endColumn":29},{"ruleId":"340","severity":1,"message":"350","line":13,"column":7,"nodeType":"342","messageId":"343","endLine":13,"endColumn":16},{"ruleId":"340","severity":1,"message":"351","line":17,"column":23,"nodeType":"342","messageId":"343","endLine":17,"endColumn":32},{"ruleId":"340","severity":1,"message":"352","line":146,"column":38,"nodeType":"342","messageId":"343","endLine":146,"endColumn":42},{"ruleId":"340","severity":1,"message":"353","line":21,"column":9,"nodeType":"342","messageId":"343","endLine":21,"endColumn":21},{"ruleId":"354","severity":1,"message":"355","line":85,"column":50,"nodeType":"356","messageId":"357","endLine":85,"endColumn":52},{"ruleId":"340","severity":1,"message":"358","line":14,"column":26,"nodeType":"342","messageId":"343","endLine":14,"endColumn":39},{"ruleId":"359","severity":1,"message":"360","line":70,"column":6,"nodeType":"361","endLine":70,"endColumn":34,"suggestions":"362"},{"ruleId":"359","severity":1,"message":"363","line":85,"column":6,"nodeType":"361","endLine":85,"endColumn":25,"suggestions":"364"},{"ruleId":"340","severity":1,"message":"365","line":4,"column":16,"nodeType":"342","messageId":"343","endLine":4,"endColumn":25},{"ruleId":"340","severity":1,"message":"366","line":5,"column":10,"nodeType":"342","messageId":"343","endLine":5,"endColumn":36},{"ruleId":"340","severity":1,"message":"367","line":16,"column":19,"nodeType":"342","messageId":"343","endLine":16,"endColumn":24},{"ruleId":"340","severity":1,"message":"368","line":16,"column":35,"nodeType":"342","messageId":"343","endLine":16,"endColumn":42},{"ruleId":"340","severity":1,"message":"369","line":16,"column":44,"nodeType":"342","messageId":"343","endLine":16,"endColumn":53},{"ruleId":"340","severity":1,"message":"370","line":17,"column":35,"nodeType":"342","messageId":"343","endLine":17,"endColumn":45},{"ruleId":"359","severity":1,"message":"371","line":40,"column":6,"nodeType":"361","endLine":40,"endColumn":8,"suggestions":"372"},{"ruleId":"373","severity":1,"message":"374","line":8,"column":3,"nodeType":"375","messageId":"376","endLine":10,"endColumn":4},{"ruleId":"340","severity":1,"message":"367","line":23,"column":17,"nodeType":"342","messageId":"343","endLine":23,"endColumn":22},{"ruleId":"340","severity":1,"message":"368","line":23,"column":24,"nodeType":"342","messageId":"343","endLine":23,"endColumn":31},{"ruleId":"340","severity":1,"message":"369","line":23,"column":33,"nodeType":"342","messageId":"343","endLine":23,"endColumn":42},{"ruleId":"340","severity":1,"message":"370","line":24,"column":33,"nodeType":"342","messageId":"343","endLine":24,"endColumn":43},{"ruleId":"340","severity":1,"message":"377","line":34,"column":25,"nodeType":"342","messageId":"343","endLine":34,"endColumn":41},{"ruleId":"340","severity":1,"message":"348","line":2,"column":10,"nodeType":"342","messageId":"343","endLine":2,"endColumn":19},{"ruleId":"340","severity":1,"message":"378","line":5,"column":8,"nodeType":"342","messageId":"343","endLine":5,"endColumn":15},{"ruleId":"340","severity":1,"message":"369","line":15,"column":26,"nodeType":"342","messageId":"343","endLine":15,"endColumn":35},{"ruleId":"340","severity":1,"message":"379","line":15,"column":46,"nodeType":"342","messageId":"343","endLine":15,"endColumn":51},"no-unused-vars","'getDefaultMiddleware' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'Button' is defined but never used.","'useEffect' is defined but never used.","'usePlacesAutocomplete' is defined but never used.","'libraries' is assigned a value but never used.","'loadError' is assigned a value but never used.","'Form' is defined but never used.","'orderDetails' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'finalizeOrder' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stripePromise'. Either include it or remove the dependency array.","ArrayExpression",["380"],"React Hook useEffect has a missing dependency: 'order'. Either include it or remove the dependency array.",["381"],"'useParams' is defined but never used.","'updateUserInfoAfterPayment' is defined but never used.","'order' is assigned a value but never used.","'isError' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refetchUser'. Either include it or remove the dependency array.",["382"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'setRefetchResult' is assigned a value but never used.","'Message' is defined but never used.","'error' is assigned a value but never used.",{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},"Update the dependencies array to be: [order, createPaymentIntent, stripePromise]",{"range":"389","text":"390"},"Update the dependencies array to be: [orderId, dispatch, order]",{"range":"391","text":"392"},"Update the dependencies array to be: [refetchUser]",{"range":"393","text":"394"},[2584,2612],"[order, createPaymentIntent, stripePromise]",[2983,3002],"[orderId, dispatch, order]",[1395,1397],"[refetchUser]"]